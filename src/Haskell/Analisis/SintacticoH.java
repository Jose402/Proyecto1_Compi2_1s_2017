//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Apr 03 21:30:06 GMT-12:00 2017
//----------------------------------------------------
package Haskell.Analisis;

import Ast.*;
import Interfaz.Inicio;
import java_cup.runtime.*;

/**
 * CUP v0.11a beta 20060608 generated parser.
 *
 * @version Mon Apr 03 21:30:06 GMT-12:00 2017
 */
public class SintacticoH extends java_cup.runtime.lr_parser {

    /**
     * Default constructor.
     */
    public SintacticoH() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    public SintacticoH(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public SintacticoH(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][]
            = unpackFromStrings(new String[]{
        "\000\166\000\002\002\004\000\002\006\004\000\002\006"
        + "\003\000\002\051\003\000\002\051\002\000\002\002\005"
        + "\000\002\002\005\000\002\002\005\000\002\002\005\000"
        + "\002\002\005\000\002\002\005\000\002\002\005\000\002"
        + "\002\005\000\002\002\004\000\002\002\003\000\002\002"
        + "\003\000\002\002\003\000\002\016\003\000\002\016\003"
        + "\000\002\016\003\000\002\004\005\000\002\004\005\000"
        + "\002\004\005\000\002\004\005\000\002\004\005\000\002"
        + "\004\005\000\002\004\003\000\002\003\005\000\002\003"
        + "\005\000\002\003\005\000\002\003\003\000\002\005\003"
        + "\000\002\005\003\000\002\035\004\000\002\035\003\000"
        + "\002\007\006\000\002\021\006\000\002\022\003\000\002"
        + "\022\003\000\002\023\003\000\002\023\003\000\002\023"
        + "\003\000\002\023\003\000\002\023\003\000\002\036\006"
        + "\000\002\037\003\000\002\037\003\000\002\037\003\000"
        + "\002\037\003\000\002\037\003\000\002\040\006\000\002"
        + "\041\003\000\002\041\003\000\002\041\003\000\002\041"
        + "\003\000\002\041\003\000\002\043\003\000\002\043\003"
        + "\000\002\043\003\000\002\043\003\000\002\043\003\000"
        + "\002\043\003\000\002\042\005\000\002\010\006\000\002"
        + "\012\005\000\002\012\005\000\002\013\005\000\002\013"
        + "\003\000\002\052\003\000\002\052\002\000\002\011\005"
        + "\000\002\011\003\000\002\044\003\000\002\044\003\000"
        + "\002\044\003\000\002\020\004\000\002\017\005\000\002"
        + "\017\004\000\002\014\005\000\002\014\003\000\002\015"
        + "\003\000\002\015\003\000\002\015\003\000\002\015\003"
        + "\000\002\015\003\000\002\015\003\000\002\015\003\000"
        + "\002\015\003\000\002\015\003\000\002\015\003\000\002"
        + "\015\003\000\002\015\005\000\002\024\010\000\002\024"
        + "\005\000\002\050\005\000\002\050\003\000\002\026\003"
        + "\000\002\026\002\000\002\025\005\000\002\025\003\000"
        + "\002\027\010\000\002\045\003\000\002\045\002\000\002"
        + "\047\005\000\002\047\003\000\002\046\003\000\002\046"
        + "\003\000\002\046\003\000\002\046\003\000\002\046\003"
        + "\000\002\030\015\000\002\033\007\000\002\032\004\000"
        + "\002\032\003\000\002\031\007\000\002\034\003\000\002"
        + "\034\003\000\002\034\003"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table
            = unpackFromStrings(new String[]{
        "\000\311\000\024\003\024\004\021\017\030\022\007\023"
        + "\034\025\015\027\017\030\020\067\005\001\002\000\014"
        + "\002\uffb0\015\uffb0\016\uffb0\035\uffc4\036\uffc4\001\002\000"
        + "\016\002\uffc5\015\uffc5\016\uffc5\025\uffc5\035\uffc5\036\uffc5"
        + "\001\002\000\006\035\226\036\310\001\002\000\012\004"
        + "\021\023\135\025\015\067\133\001\002\000\004\002\uffff"
        + "\001\002\000\006\002\ufffd\015\050\001\002\000\010\002"
        + "\uffac\015\uffac\016\uffac\001\002\000\010\002\uffaa\015\uffaa"
        + "\016\uffaa\001\002\000\010\002\uffab\015\uffab\016\uffab\001"
        + "\002\000\036\023\216\026\205\031\253\032\245\033\251"
        + "\034\254\037\252\040\255\041\215\042\222\043\217\044"
        + "\220\045\223\046\246\001\002\000\014\002\uffa9\015\uffa9"
        + "\016\uffa9\035\uffc7\036\uffc7\001\002\000\004\023\210\001"
        + "\002\000\010\002\uffa7\015\uffa7\016\uffa7\001\002\000\012"
        + "\004\021\023\172\025\167\071\173\001\002\000\014\002"
        + "\uffa8\015\uffa8\016\uffa8\035\uffc6\036\uffc6\001\002\000\010"
        + "\002\uffaf\015\uffaf\016\uffaf\001\002\000\004\015\050\001"
        + "\002\000\010\002\uffb1\015\uffb1\016\uffb1\001\002\000\010"
        + "\002\uffad\015\uffad\016\uffad\001\002\000\016\002\uffc8\015"
        + "\uffc8\016\uffc8\025\uffc8\035\uffc8\036\uffc8\001\002\000\020"
        + "\004\021\014\062\023\100\025\015\050\067\066\061\067"
        + "\060\001\002\000\010\002\uffae\015\uffae\016\uffae\001\002"
        + "\000\006\002\uffa2\015\uffa2\001\002\000\004\002\056\001"
        + "\002\000\012\011\uffa0\023\036\035\uffc9\036\uffc9\001\002"
        + "\000\004\011\042\001\002\000\006\011\uff9e\012\uff9e\001"
        + "\002\000\006\011\uffa1\012\040\001\002\000\004\023\041"
        + "\001\002\000\006\011\uff9f\012\uff9f\001\002\000\024\003"
        + "\045\004\021\017\030\022\007\023\046\025\015\027\017"
        + "\030\020\067\005\001\002\000\006\015\uffb2\016\uffb2\001"
        + "\002\000\004\015\050\001\002\000\004\015\050\001\002"
        + "\000\016\002\uffc9\015\uffc9\016\uffc9\025\uffc9\035\uffc9\036"
        + "\uffc9\001\002\000\026\003\045\004\021\015\052\017\030"
        + "\022\007\023\046\025\015\027\017\030\020\067\005\001"
        + "\002\000\040\002\uffdf\003\uffdf\004\uffdf\015\uffdf\017\uffdf"
        + "\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\027\uffdf\030"
        + "\uffdf\066\uffdf\067\uffdf\071\uffdf\001\002\000\010\002\uffa6"
        + "\015\uffa6\016\uffa6\001\002\000\040\002\uffe0\003\uffe0\004"
        + "\uffe0\015\uffe0\017\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0"
        + "\025\uffe0\027\uffe0\030\uffe0\066\uffe0\067\uffe0\071\uffe0\001"
        + "\002\000\030\003\045\004\021\015\052\017\030\022\007"
        + "\023\046\024\054\025\015\027\017\030\020\067\005\001"
        + "\002\000\006\002\uffa5\015\uffa5\001\002\000\006\015\uffb3"
        + "\016\uffb3\001\002\000\004\002\001\001\002\000\054\013"
        + "\uffd6\015\uffd6\020\uffd6\025\uffd6\035\uffc4\036\uffc4\047\uffd6"
        + "\050\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\056"
        + "\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\063\uffd6\064\uffd6"
        + "\065\uffd6\001\002\000\050\013\uffe1\020\uffe1\035\uffc5\036"
        + "\uffc5\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1"
        + "\055\uffe1\056\uffee\057\uffee\060\uffee\061\uffee\062\uffee\063"
        + "\uffee\064\uffe1\065\uffe1\001\002\000\032\013\uffe2\020\uffe2"
        + "\025\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\054"
        + "\uffe2\055\uffe2\064\uffe2\065\uffe2\001\002\000\020\004\021"
        + "\014\062\023\100\025\015\050\067\066\061\067\060\001"
        + "\002\000\044\013\ufff2\020\ufff2\047\ufff2\050\ufff2\051\ufff2"
        + "\052\ufff2\053\ufff2\054\ufff2\055\ufff2\056\uffef\057\uffef\060"
        + "\uffef\061\uffef\062\uffef\063\uffef\064\ufff2\065\ufff2\001\002"
        + "\000\050\013\uffd9\015\uffd9\020\uffd9\025\uffd9\047\uffd9\050"
        + "\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9\056\uffd9"
        + "\057\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9\065"
        + "\uffd9\001\002\000\050\013\uffd7\015\uffd7\020\uffd7\025\uffd7"
        + "\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055"
        + "\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7\063\uffd7"
        + "\064\uffd7\065\uffd7\001\002\000\012\013\uffe3\020\uffe3\064"
        + "\uffe3\065\uffe3\001\002\000\020\004\021\014\111\023\114"
        + "\025\015\050\067\066\061\067\110\001\002\000\010\020"
        + "\146\064\145\065\144\001\002\000\050\013\uffda\015\uffda"
        + "\020\uffda\025\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053"
        + "\uffda\054\uffda\055\uffda\056\uffda\057\uffda\060\uffda\061\uffda"
        + "\062\uffda\063\uffda\064\uffda\065\uffda\001\002\000\016\002"
        + "\uffc7\015\uffc7\016\uffc7\025\uffc7\035\uffc7\036\uffc7\001\002"
        + "\000\016\002\uffc6\015\uffc6\016\uffc6\025\uffc6\035\uffc6\036"
        + "\uffc6\001\002\000\016\056\132\057\130\060\131\061\126"
        + "\062\127\063\125\001\002\000\030\013\uffe7\020\uffe7\047"
        + "\102\050\103\051\105\052\107\053\101\054\106\055\104"
        + "\064\uffe7\065\uffe7\001\002\000\050\013\uffd8\015\uffd8\020"
        + "\uffd8\025\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8"
        + "\054\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8\062"
        + "\uffd8\063\uffd8\064\uffd8\065\uffd8\001\002\000\032\013\ufff3"
        + "\020\ufff3\025\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\053"
        + "\ufff3\054\ufff3\055\ufff3\064\ufff3\065\ufff3\001\002\000\050"
        + "\013\ufff1\020\ufff1\035\uffc9\036\uffc9\047\ufff1\050\ufff1\051"
        + "\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff0\057\ufff0"
        + "\060\ufff0\061\ufff0\062\ufff0\063\ufff0\064\ufff1\065\ufff1\001"
        + "\002\000\020\004\021\014\111\023\114\025\015\050\067"
        + "\066\061\067\110\001\002\000\020\004\021\014\111\023"
        + "\114\025\015\050\067\066\061\067\110\001\002\000\020"
        + "\004\021\014\111\023\114\025\015\050\067\066\061\067"
        + "\110\001\002\000\020\004\021\014\111\023\114\025\015"
        + "\050\067\066\061\067\110\001\002\000\020\004\021\014"
        + "\111\023\114\025\015\050\067\066\061\067\110\001\002"
        + "\000\020\004\021\014\111\023\114\025\015\050\067\066"
        + "\061\067\110\001\002\000\020\004\021\014\111\023\114"
        + "\025\015\050\067\066\061\067\110\001\002\000\036\013"
        + "\uffe1\020\uffe1\025\uffe1\035\uffc5\036\uffc5\047\uffe1\050\uffe1"
        + "\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\064\uffe1\065"
        + "\uffe1\001\002\000\020\004\021\014\111\023\114\025\015"
        + "\050\067\066\061\067\110\001\002\000\032\013\ufff2\020"
        + "\ufff2\025\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2\053\ufff2"
        + "\054\ufff2\055\ufff2\064\ufff2\065\ufff2\001\002\000\032\013"
        + "\ufff9\020\ufff9\025\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9"
        + "\053\ufff9\054\106\055\104\064\ufff9\065\ufff9\001\002\000"
        + "\036\013\ufff1\020\ufff1\025\ufff1\035\uffc9\036\uffc9\047\ufff1"
        + "\050\ufff1\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\064"
        + "\ufff1\065\ufff1\001\002\000\022\013\116\047\102\050\103"
        + "\051\105\052\107\053\101\054\106\055\104\001\002\000"
        + "\032\013\ufff5\020\ufff5\025\ufff5\047\ufff5\050\ufff5\051\ufff5"
        + "\052\ufff5\053\ufff5\054\ufff5\055\ufff5\064\ufff5\065\ufff5\001"
        + "\002\000\032\013\ufff8\020\ufff8\025\ufff8\047\ufff8\050\ufff8"
        + "\051\ufff8\052\ufff8\053\ufff8\054\ufff8\055\ufff8\064\ufff8\065"
        + "\ufff8\001\002\000\032\013\ufffa\020\ufffa\025\ufffa\047\ufffa"
        + "\050\ufffa\051\ufffa\052\ufffa\053\ufffa\054\106\055\104\064"
        + "\ufffa\065\ufffa\001\002\000\032\013\ufff7\020\ufff7\025\ufff7"
        + "\047\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\055"
        + "\ufff7\064\ufff7\065\ufff7\001\002\000\032\013\ufffb\020\ufffb"
        + "\025\ufffb\047\ufffb\050\ufffb\051\105\052\107\053\101\054"
        + "\106\055\104\064\ufffb\065\ufffb\001\002\000\032\013\ufffc"
        + "\020\ufffc\025\ufffc\047\ufffc\050\ufffc\051\105\052\107\053"
        + "\101\054\106\055\104\064\ufffc\065\ufffc\001\002\000\032"
        + "\013\ufff6\020\ufff6\025\ufff6\047\ufff6\050\ufff6\051\ufff6\052"
        + "\ufff6\053\ufff6\054\106\055\104\064\ufff6\065\ufff6\001\002"
        + "\000\012\004\021\023\135\025\015\067\133\001\002\000"
        + "\012\004\021\023\135\025\015\067\133\001\002\000\012"
        + "\004\021\023\135\025\015\067\133\001\002\000\012\004"
        + "\021\023\135\025\015\067\133\001\002\000\012\004\021"
        + "\023\135\025\015\067\133\001\002\000\012\004\021\023"
        + "\135\025\015\067\133\001\002\000\020\013\uffee\015\uffee"
        + "\020\uffee\035\uffc5\036\uffc5\064\uffee\065\uffee\001\002\000"
        + "\012\013\uffec\020\uffec\064\uffec\065\uffec\001\002\000\020"
        + "\013\ufff0\015\ufff0\020\ufff0\035\uffc9\036\uffc9\064\ufff0\065"
        + "\ufff0\001\002\000\014\013\uffef\015\uffef\020\uffef\064\uffef"
        + "\065\uffef\001\002\000\012\013\uffed\020\uffed\064\uffed\065"
        + "\uffed\001\002\000\012\013\uffeb\020\uffeb\064\uffeb\065\uffeb"
        + "\001\002\000\012\013\uffe9\020\uffe9\064\uffe9\065\uffe9\001"
        + "\002\000\012\013\uffea\020\uffea\064\uffea\065\uffea\001\002"
        + "\000\012\013\uffe8\020\uffe8\064\uffe8\065\uffe8\001\002\000"
        + "\020\004\021\014\062\023\100\025\015\050\067\066\061"
        + "\067\060\001\002\000\020\004\021\014\062\023\100\025"
        + "\015\050\067\066\061\067\060\001\002\000\004\015\050"
        + "\001\002\000\026\003\045\004\021\015\052\017\030\022"
        + "\007\023\046\025\015\027\017\030\020\067\005\001\002"
        + "\000\004\015\050\001\002\000\030\003\045\004\021\015"
        + "\052\017\030\021\152\022\007\023\046\025\015\027\017"
        + "\030\020\067\005\001\002\000\004\015\050\001\002\000"
        + "\026\003\045\004\021\015\052\017\030\022\007\023\046"
        + "\025\015\027\017\030\020\067\005\001\002\000\004\015"
        + "\050\001\002\000\030\003\045\004\021\015\052\017\030"
        + "\022\007\023\046\024\156\025\015\027\017\030\020\067"
        + "\005\001\002\000\010\002\uff93\015\uff93\016\uff93\001\002"
        + "\000\012\013\uffe5\020\uffe5\064\uffe5\065\144\001\002\000"
        + "\012\013\uffe6\020\uffe6\064\uffe6\065\uffe6\001\002\000\032"
        + "\013\ufff4\020\ufff4\025\ufff4\047\ufff4\050\ufff4\051\105\052"
        + "\107\053\101\054\106\055\104\064\ufff4\065\ufff4\001\002"
        + "\000\010\013\164\064\145\065\144\001\002\000\026\013"
        + "\116\047\102\050\103\051\105\052\107\053\101\054\106"
        + "\055\104\064\uffe7\065\uffe7\001\002\000\012\013\uffe4\020"
        + "\uffe4\064\uffe4\065\uffe4\001\002\000\026\003\024\004\021"
        + "\015\052\017\030\022\007\023\034\025\015\027\017\030"
        + "\020\067\005\001\002\000\006\002\uffa4\015\uffa4\001\002"
        + "\000\004\026\205\001\002\000\006\005\202\012\203\001"
        + "\002\000\006\005\uffbe\012\uffbe\001\002\000\006\005\uffb8"
        + "\012\uffb8\001\002\000\006\005\uffb7\012\uffb7\001\002\000"
        + "\006\005\177\012\200\001\002\000\006\005\uffba\012\uffba"
        + "\001\002\000\006\005\uffb9\012\uffb9\001\002\000\024\002"
        + "\uffc1\005\uffc1\007\uffc1\012\uffc1\015\uffc1\016\uffc1\025\uffc1"
        + "\035\uffc1\036\uffc1\001\002\000\010\023\172\025\167\071"
        + "\173\001\002\000\006\005\uffbb\012\uffbb\001\002\000\024"
        + "\002\uffc0\005\uffc0\007\uffc0\012\uffc0\015\uffc0\016\uffc0\025"
        + "\uffc0\035\uffc0\036\uffc0\001\002\000\004\004\021\001\002"
        + "\000\006\005\uffbf\012\uffbf\001\002\000\020\004\021\014"
        + "\111\023\114\025\015\050\067\066\061\067\110\001\002"
        + "\000\022\025\207\047\102\050\103\051\105\052\107\053"
        + "\101\054\106\055\104\001\002\000\064\002\uffde\005\uffde"
        + "\007\uffde\012\uffde\013\uffde\015\uffde\016\uffde\020\uffde\025"
        + "\uffde\036\uffde\047\uffde\050\uffde\051\uffde\052\uffde\053\uffde"
        + "\054\uffde\055\uffde\056\uffde\057\uffde\060\uffde\061\uffde\062"
        + "\uffde\063\uffde\064\uffde\065\uffde\001\002\000\004\011\211"
        + "\001\002\000\012\004\021\023\046\025\213\067\005\001"
        + "\002\000\012\002\uffc2\015\uffc2\016\uffc2\035\226\001\002"
        + "\000\016\023\216\041\215\042\222\043\217\044\220\045"
        + "\223\001\002\000\016\002\uffc4\015\uffc4\016\uffc4\025\uffc4"
        + "\035\uffc4\036\uffc4\001\002\000\012\004\uffce\023\uffce\025"
        + "\uffce\067\uffce\001\002\000\004\006\230\001\002\000\012"
        + "\004\uffcc\023\uffcc\025\uffcc\067\uffcc\001\002\000\012\004"
        + "\uffcb\023\uffcb\025\uffcb\067\uffcb\001\002\000\012\004\021"
        + "\023\046\025\213\067\005\001\002\000\012\004\uffcd\023"
        + "\uffcd\025\uffcd\067\uffcd\001\002\000\012\004\uffca\023\uffca"
        + "\025\uffca\067\uffca\001\002\000\006\025\225\035\226\001"
        + "\002\000\016\002\uffcf\015\uffcf\016\uffcf\025\uffcf\035\uffcf"
        + "\036\uffcf\001\002\000\012\004\021\023\046\025\213\067"
        + "\005\001\002\000\016\002\uffc3\015\uffc3\016\uffc3\025\uffc3"
        + "\035\uffc3\036\uffc3\001\002\000\016\004\021\007\uff9b\023"
        + "\235\025\167\067\234\071\236\001\002\000\006\007\uff99"
        + "\012\uff99\001\002\000\006\007\uff96\012\uff96\001\002\000"
        + "\006\007\uff9c\012\243\001\002\000\006\007\uff95\012\uff95"
        + "\001\002\000\006\007\uff97\012\uff97\001\002\000\006\007"
        + "\uff94\012\uff94\001\002\000\004\007\241\001\002\000\006"
        + "\007\uff98\012\uff98\001\002\000\004\025\242\001\002\000"
        + "\060\002\uff9d\013\uff9d\015\uff9d\016\uff9d\020\uff9d\025\uff9d"
        + "\035\uff9d\036\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d\053"
        + "\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d\060\uff9d\061\uff9d"
        + "\062\uff9d\063\uff9d\064\uff9d\065\uff9d\001\002\000\014\004"
        + "\021\023\235\025\167\067\234\071\236\001\002\000\006"
        + "\007\uff9a\012\uff9a\001\002\000\012\004\uffdb\023\uffdb\025"
        + "\uffdb\067\uffdb\001\002\000\012\004\uffd0\023\uffd0\025\uffd0"
        + "\067\uffd0\001\002\000\012\004\021\023\046\025\213\067"
        + "\005\001\002\000\012\004\021\023\046\025\015\067\005"
        + "\001\002\000\012\004\uffd4\023\uffd4\025\uffd4\067\uffd4\001"
        + "\002\000\012\004\uffd2\023\uffd2\025\uffd2\067\uffd2\001\002"
        + "\000\012\004\uffdc\023\uffdc\025\uffdc\067\uffdc\001\002\000"
        + "\012\004\uffd3\023\uffd3\025\uffd3\067\uffd3\001\002\000\012"
        + "\004\uffd1\023\uffd1\025\uffd1\067\uffd1\001\002\000\004\025"
        + "\257\001\002\000\054\002\uffdd\013\uffdd\015\uffdd\016\uffdd"
        + "\020\uffdd\025\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053"
        + "\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd"
        + "\062\uffdd\063\uffdd\064\uffdd\065\uffdd\001\002\000\006\025"
        + "\261\035\226\001\002\000\054\002\uffd5\013\uffd5\015\uffd5"
        + "\016\uffd5\020\uffd5\025\uffd5\047\uffd5\050\uffd5\051\uffd5\052"
        + "\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5"
        + "\061\uffd5\062\uffd5\063\uffd5\064\uffd5\065\uffd5\001\002\000"
        + "\004\002\000\001\002\000\012\002\ufffe\003\265\015\052"
        + "\023\264\001\002\000\006\011\uffa0\023\036\001\002\000"
        + "\004\015\050\001\002\000\006\002\uffa3\015\uffa3\001\002"
        + "\000\010\003\265\015\052\023\264\001\002\000\004\015"
        + "\050\001\002\000\012\015\052\066\272\067\273\071\277"
        + "\001\002\000\004\010\uff8e\001\002\000\004\010\uff8d\001"
        + "\002\000\004\010\302\001\002\000\012\024\300\066\272"
        + "\067\273\071\277\001\002\000\012\024\uff90\066\uff90\067"
        + "\uff90\071\uff90\001\002\000\004\010\uff8c\001\002\000\010"
        + "\002\uff92\015\uff92\016\uff92\001\002\000\012\024\uff91\066"
        + "\uff91\067\uff91\071\uff91\001\002\000\024\003\045\004\021"
        + "\017\030\022\007\023\046\025\015\027\017\030\020\067"
        + "\005\001\002\000\006\015\050\016\305\001\002\000\026"
        + "\003\045\004\021\015\052\017\030\022\007\023\046\025"
        + "\015\027\017\030\020\067\005\001\002\000\004\015\050"
        + "\001\002\000\014\015\052\024\uff8f\066\uff8f\067\uff8f\071"
        + "\uff8f\001\002\000\056\002\uffb6\013\uffb6\015\uffb6\016\uffb6"
        + "\020\uffb6\025\uffb6\036\312\047\uffb6\050\uffb6\051\uffb6\052"
        + "\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6"
        + "\061\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6\001\002\000"
        + "\004\025\167\001\002\000\056\002\uffb4\013\uffb4\015\uffb4"
        + "\016\uffb4\020\uffb4\025\uffb4\036\uffb4\047\uffb4\050\uffb4\051"
        + "\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4"
        + "\060\uffb4\061\uffb4\062\uffb4\063\uffb4\064\uffb4\065\uffb4\001"
        + "\002\000\004\025\167\001\002\000\056\002\uffb5\013\uffb5"
        + "\015\uffb5\016\uffb5\020\uffb5\025\uffb5\036\uffb5\047\uffb5\050"
        + "\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5"
        + "\057\uffb5\060\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5\065"
        + "\uffb5\001\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /**
     * <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table
            = unpackFromStrings(new String[]{
        "\000\311\000\042\006\032\007\024\010\025\012\026\015"
        + "\007\020\011\021\013\024\031\027\003\030\022\033\030"
        + "\036\012\040\015\042\021\043\005\050\010\001\001\000"
        + "\002\001\001\000\002\001\001\000\004\017\306\001\001"
        + "\000\030\007\075\012\026\016\267\020\063\021\070\023"
        + "\135\027\056\036\064\040\071\042\072\043\005\001\001"
        + "\000\002\001\001\000\006\035\262\051\261\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\010"
        + "\022\247\037\246\041\220\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\014\007\175\011\173"
        + "\012\170\013\167\044\174\001\001\000\002\001\001\000"
        + "\002\001\001\000\004\035\164\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\040\002\074\003"
        + "\067\004\065\005\076\007\075\012\026\016\073\020\063"
        + "\021\070\023\062\027\056\036\064\040\071\042\072\043"
        + "\005\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\006\025\036\026\034\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\036\007\024\010\025\012\026\014"
        + "\043\015\042\020\011\021\013\027\003\030\022\033\030"
        + "\036\012\040\015\042\021\043\005\001\001\000\002\001"
        + "\001\000\004\035\052\001\001\000\004\035\046\001\001"
        + "\000\002\001\001\000\034\007\024\010\025\012\026\015"
        + "\050\020\011\021\013\027\003\030\022\033\030\036\012"
        + "\040\015\042\021\043\005\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\034\007\024\010\025"
        + "\012\026\015\054\020\011\021\013\027\003\030\022\033"
        + "\030\036\012\040\015\042\021\043\005\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\040\002\162"
        + "\003\161\004\065\005\076\007\075\012\026\016\073\020"
        + "\063\021\070\023\062\027\056\036\064\040\071\042\072"
        + "\043\005\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\032\002\160\005\076"
        + "\007\075\012\026\020\063\021\070\023\111\027\056\036"
        + "\064\040\071\042\072\043\005\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\032\002\123\005\076\007"
        + "\075\012\026\020\063\021\070\023\111\027\056\036\064"
        + "\040\071\042\072\043\005\001\001\000\032\002\122\005"
        + "\076\007\075\012\026\020\063\021\070\023\111\027\056"
        + "\036\064\040\071\042\072\043\005\001\001\000\032\002"
        + "\121\005\076\007\075\012\026\020\063\021\070\023\111"
        + "\027\056\036\064\040\071\042\072\043\005\001\001\000"
        + "\032\002\120\005\076\007\075\012\026\020\063\021\070"
        + "\023\111\027\056\036\064\040\071\042\072\043\005\001"
        + "\001\000\032\002\117\005\076\007\075\012\026\020\063"
        + "\021\070\023\111\027\056\036\064\040\071\042\072\043"
        + "\005\001\001\000\032\002\116\005\076\007\075\012\026"
        + "\020\063\021\070\023\111\027\056\036\064\040\071\042"
        + "\072\043\005\001\001\000\032\002\112\005\076\007\075"
        + "\012\026\020\063\021\070\023\111\027\056\036\064\040"
        + "\071\042\072\043\005\001\001\000\002\001\001\000\032"
        + "\002\114\005\076\007\075\012\026\020\063\021\070\023"
        + "\111\027\056\036\064\040\071\042\072\043\005\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\030\007\075\012\026\016\142"
        + "\020\063\021\070\023\135\027\056\036\064\040\071\042"
        + "\072\043\005\001\001\000\030\007\075\012\026\016\141"
        + "\020\063\021\070\023\135\027\056\036\064\040\071\042"
        + "\072\043\005\001\001\000\030\007\075\012\026\016\140"
        + "\020\063\021\070\023\135\027\056\036\064\040\071\042"
        + "\072\043\005\001\001\000\030\007\075\012\026\016\137"
        + "\020\063\021\070\023\135\027\056\036\064\040\071\042"
        + "\072\043\005\001\001\000\030\007\075\012\026\016\136"
        + "\020\063\021\070\023\135\027\056\036\064\040\071\042"
        + "\072\043\005\001\001\000\030\007\075\012\026\016\133"
        + "\020\063\021\070\023\135\027\056\036\064\040\071\042"
        + "\072\043\005\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\040\002\074\003\157\004\065\005\076\007"
        + "\075\012\026\016\073\020\063\021\070\023\062\027\056"
        + "\036\064\040\071\042\072\043\005\001\001\000\040\002"
        + "\074\003\156\004\065\005\076\007\075\012\026\016\073"
        + "\020\063\021\070\023\062\027\056\036\064\040\071\042"
        + "\072\043\005\001\001\000\004\035\146\001\001\000\036"
        + "\007\024\010\025\012\026\014\147\015\042\020\011\021"
        + "\013\027\003\030\022\033\030\036\012\040\015\042\021"
        + "\043\005\001\001\000\004\035\150\001\001\000\034\007"
        + "\024\010\025\012\026\015\054\020\011\021\013\027\003"
        + "\030\022\033\030\036\012\040\015\042\021\043\005\001"
        + "\001\000\004\035\152\001\001\000\036\007\024\010\025"
        + "\012\026\014\153\015\042\020\011\021\013\027\003\030"
        + "\022\033\030\036\012\040\015\042\021\043\005\001\001"
        + "\000\004\035\154\001\001\000\034\007\024\010\025\012"
        + "\026\015\054\020\011\021\013\027\003\030\022\033\030"
        + "\036\012\040\015\042\021\043\005\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\036\007\024\010\025\012\026\015\050\020\011\021\013"
        + "\024\165\027\003\030\022\033\030\036\012\040\015\042"
        + "\021\043\005\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\006\007\175\044\200\001"
        + "\001\000\002\001\001\000\002\001\001\000\004\012\203"
        + "\001\001\000\002\001\001\000\032\002\205\005\076\007"
        + "\075\012\026\020\063\021\070\023\111\027\056\036\064"
        + "\040\071\042\072\043\005\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\014\012\026\027\213"
        + "\040\071\042\072\043\211\001\001\000\002\001\001\000"
        + "\004\041\220\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\014\012\026\027\213\040\071\042\072\043\223\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\014\012\026\027\213\040\071\042\072"
        + "\043\226\001\001\000\002\001\001\000\014\007\237\012"
        + "\231\045\236\046\230\047\232\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\010\007"
        + "\237\012\231\046\243\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\014\012\026\027\213\040"
        + "\071\042\072\043\257\001\001\000\026\007\075\012\026"
        + "\020\063\021\070\023\255\027\056\036\064\040\071\042"
        + "\072\043\005\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\004\024\265\001\001\000"
        + "\006\025\036\026\034\001\001\000\004\035\266\001\001"
        + "\000\002\001\001\000\004\024\165\001\001\000\004\035"
        + "\270\001\001\000\010\031\275\032\274\034\273\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\006\031\300\034\273\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\036\007"
        + "\024\010\025\012\026\014\302\015\042\020\011\021\013"
        + "\027\003\030\022\033\030\036\012\040\015\042\021\043"
        + "\005\001\001\000\004\035\303\001\001\000\034\007\024"
        + "\010\025\012\026\015\054\020\011\021\013\027\003\030"
        + "\022\033\030\036\012\040\015\042\021\043\005\001\001"
        + "\000\004\035\305\001\001\000\002\001\001\000\002\001"
        + "\001\000\004\007\310\001\001\000\002\001\001\000\004"
        + "\007\312\001\001\000\002\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$SintacticoH$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$SintacticoH$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$SintacticoH$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 0;
    }

    /**
     * <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /**
     * <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }

    /**
     * Metodo al que se llama automáticamente ante algún error sintactico.
     */
    public void syntax_error(Symbol s) {
        /*System.out.println("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "
        +s.value + " no reconocido." );*/
        Inicio.reporteError2.agregar("Sintactico", s.right + 1, s.left + 1, "Identificador " + s.value + " no reconocido", Inicio.archivoHaskellActual);
    }

    /**
     * Metodo al que se llama en el momento en que ya no es posible una
     * recuperación de errores.
     */
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        /*System.out.println("Error en la Línea " + (s.right+1)+ "Columna "+(s.left+1)+". Identificador " +
        s.value + " no reconocido.");*/
        Inicio.reporteError2.agregar("Sintactico", s.right + 1, s.left + 1, "Identificador " + s.value + " no reconocido", Inicio.archivoHaskellActual);
    }

    public Nodo getRaiz() {
        return action_obj.raiz;
    }

}

/**
 * Cup generated class to encapsulate user supplied action code.
 */
class CUP$SintacticoH$actions {

    Nodo raiz = null;

    private final SintacticoH parser;

    /**
     * Constructor
     */
    CUP$SintacticoH$actions(SintacticoH parser) {
        this.parser = parser;
    }

    /**
     * Method with the actual generated action code.
     */
    public final java_cup.runtime.Symbol CUP$SintacticoH$do_action(
            int CUP$SintacticoH$act_num,
            java_cup.runtime.lr_parser CUP$SintacticoH$parser,
            java.util.Stack CUP$SintacticoH$stack,
            int CUP$SintacticoH$top)
            throws java.lang.Exception {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$SintacticoH$result;

        /* select the action based on the action number */
        switch (CUP$SintacticoH$act_num) {
            /*. . . . . . . . . . . . . . . . . . . .*/
            case 117: // VALORCASE ::= caracter 
            {
                Nodo RESULT = null;
                int cadleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int cadright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                String cad = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo("caracter", cad, cadright, cadleft);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALORCASE", 26, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 116: // VALORCASE ::= cadena 
            {
                Nodo RESULT = null;
                int cadleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int cadright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                String cad = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo("cadena", cad, cadright, cadleft);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALORCASE", 26, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 115: // VALORCASE ::= numero 
            {
                Nodo RESULT = null;
                int numleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int numright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                String num = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo("numero", num, numright, numleft);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALORCASE", 26, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 114: // CASO ::= VALORCASE dosPuntos SENTENCIAS puntoComa SALTOS 
            {
                Nodo RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 4)).left;
                int valright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 4)).right;
                Nodo val = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 4)).value;
                int sentleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).value;

                RESULT = new Nodo("case", val.linea - 1, val.columna - 1);
                RESULT.add(val);
                RESULT.add(sent);

                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CASO", 23, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 4)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 113: // CASOS ::= CASO 
            {
                Nodo RESULT = null;
                int casoleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int casoright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo caso = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;

                RESULT = new Nodo("cases", caso.linea - 1, caso.columna - 1);
                RESULT.add(caso);

                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CASOS", 24, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 112: // CASOS ::= CASOS CASO 
            {
                Nodo RESULT = null;
                int listaleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).value;
                int casoleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int casoright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo caso = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = lista;
                RESULT.add(caso);

                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CASOS", 24, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 111: // SELECCIONAR ::= caso EXPC SALTOS CASOS end 
            {
                Nodo RESULT = null;
                int casoleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 4)).left;
                int casoright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 4)).right;
                String caso = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 4)).value;
                int expleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 3)).left;
                int expright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 3)).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 3)).value;
                int casosleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).left;
                int casosright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).right;
                Nodo casos = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).value;

                RESULT = new Nodo("switch", casoright, casoleft);
                RESULT.add(exp);
                RESULT.add(casos);

                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SELECCIONAR", 25, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 4)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 110: // SI ::= si EXPL then SALTOS SENTENCIAS SALTOS sino SALTOS SENTENCIAS SALTOS end 
            {
                Nodo RESULT = null;
                int sileft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 10)).left;
                int siright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 10)).right;
                String si = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 10)).value;
                int expleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 9)).left;
                int expright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 9)).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 9)).value;
                int sentleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 6)).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 6)).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 6)).value;
                int sentSinoleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).left;
                int sentSinoright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).right;
                Nodo sentSino = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).value;

                Nodo sentSi = new Nodo("if", siright, sileft);
                Nodo condicion = new Nodo("condicion", exp.linea - 1, exp.columna - 1);
                condicion.add(exp);
                sentSi.add(condicion);
                sentSi.add(sent);
                sentSi.add(sentSino);
                RESULT = sentSi;

                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SI", 22, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 10)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 109: // TIPOVALORPARA ::= caracter 
            {
                Nodo RESULT = null;
                int cadleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int cadright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                String cad = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo("caracter", cad, cadright, cadleft);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOVALORPARA", 36, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 108: // TIPOVALORPARA ::= cadena 
            {
                Nodo RESULT = null;
                int cadleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int cadright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                String cad = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo("cadena", cad, cadright, cadleft);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOVALORPARA", 36, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 107: // TIPOVALORPARA ::= ARRAY 
            {
                Nodo RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo val = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = val;
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOVALORPARA", 36, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 106: // TIPOVALORPARA ::= iden 
            {
                Nodo RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int idright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo("id", id, idright, idleft);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOVALORPARA", 36, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 105: // TIPOVALORPARA ::= CALCULAR 
            {
                Nodo RESULT = null;
                int calleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int calright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo cal = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = cal;
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOVALORPARA", 36, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 104: // VALORESPARA ::= TIPOVALORPARA 
            {
                Nodo RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo val = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;

                RESULT = new Nodo("valorParametros", val.linea - 1, val.columna - 1);
                RESULT.add(val);

                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALORESPARA", 37, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 103: // VALORESPARA ::= VALORESPARA coma TIPOVALORPARA 
            {
                Nodo RESULT = null;
                int paraleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).left;
                int pararight = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).right;
                Nodo para = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).value;
                int valleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo val = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = para;
                RESULT.add(val);

                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALORESPARA", 37, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 102: // VALORESSTAR ::= 
            {
                Nodo RESULT = null;
                RESULT = new Nodo("valorParametros", 0, 0);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALORESSTAR", 35, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 101: // VALORESSTAR ::= VALORESPARA 
            {
                Nodo RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo val = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = val;
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALORESSTAR", 35, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 100: // LLAMADA ::= dolar iden llaveInicio VALORESSTAR llaveFin dolar 
            {
                Nodo RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 4)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 4)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 4)).value;
                int parametrosleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).left;
                int parametrosright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).right;
                Nodo parametros = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).value;

                RESULT = new Nodo("llamada", id, idright, idleft);
                RESULT.add(parametros);

                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LLAMADA", 21, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 5)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 99: // PARAMETROS ::= iden 
            {
                Nodo RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int idright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo("parametros", idright, idleft);
                Nodo par = new Nodo("id", id, idright, idleft);
                RESULT.add(par);

                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("PARAMETROS", 19, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 98: // PARAMETROS ::= PARAMETROS coma iden 
            {
                Nodo RESULT = null;
                int paraleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).left;
                int pararight = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).right;
                Nodo para = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int idright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = para;
                Nodo par = new Nodo("id", id, idright, idleft);
                RESULT.add(par);

                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("PARAMETROS", 19, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 97: // PARAMETROSTAR ::= 
            {
                Nodo RESULT = null;
                RESULT = new Nodo("parametros", 0, 0);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("PARAMETROSTAR", 20, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 96: // PARAMETROSTAR ::= PARAMETROS 
            {
                Nodo RESULT = null;
                int parleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int parright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo par = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = par;
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("PARAMETROSTAR", 20, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 95: // FUNCIONES ::= FUNCION 
            {
                Nodo RESULT = null;
                int funcionleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int funcionright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo funcion = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;

                RESULT = new Nodo("funciones", funcion.linea - 1, funcion.columna - 1);
                RESULT.add(funcion);

                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("FUNCIONES", 38, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 94: // FUNCIONES ::= FUNCIONES SALTOS FUNCION 
            {
                Nodo RESULT = null;
                int listaleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).value;
                int funcionleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int funcionright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo funcion = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = lista;
                RESULT.add(funcion);

                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("FUNCIONES", 38, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 93: // FUNCION ::= error SALTOS FUNCION 
            {
                Nodo RESULT = null;
                int funleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int funright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo fun = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = fun;
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("FUNCION", 18, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 92: // FUNCION ::= iden PARAMETROSTAR igual SENTENCIAS SALTOS end 
            {
                Nodo RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 5)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 5)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 5)).value;
                int parleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 4)).left;
                int parright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 4)).right;
                Nodo par = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 4)).value;
                int sent1left = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).left;
                int sent1right = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).right;
                Nodo sent1 = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).value;

                Nodo funcion = new Nodo("funcion", id, idright, idright);
                funcion.add(par);
                funcion.add(sent1);
                RESULT = funcion;

                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("FUNCION", 18, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 5)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 91: // SENTENCIA ::= error SALTOS SENTENCIA 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = sent;
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 11, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 90: // SENTENCIA ::= ans 
            {
                Nodo RESULT = null;
                int ansleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int ansright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                String ans = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo("ans", ans, ansright, ansleft);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 11, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 89: // SENTENCIA ::= CONCA 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = sent;
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 11, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 88: // SENTENCIA ::= OPERACIONLISTA2 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = sent;
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 11, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 87: // SENTENCIA ::= OPERACIONLISTA 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = sent;
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 11, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 86: // SENTENCIA ::= SIMPLIFICADA 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = sent;
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 11, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 85: // SENTENCIA ::= ACCESO 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = sent;
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 11, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 84: // SENTENCIA ::= LISTA 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = sent;
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 11, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 83: // SENTENCIA ::= SELECCIONAR 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = sent;
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 11, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 82: // SENTENCIA ::= SI 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = sent;
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 11, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 81: // SENTENCIA ::= LLAMADA 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = sent;
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 11, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 80: // SENTENCIA ::= CALCULAR 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = sent;
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 11, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 79: // SENTENCIAS ::= SENTENCIA 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo("sentencias", sent.linea - 1, sent.columna - 1);
                RESULT.add(sent);

                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS", 10, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 78: // SENTENCIAS ::= SENTENCIAS SALTOS SENTENCIA 
            {
                Nodo RESULT = null;
                int sentsleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).left;
                int sentsright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).right;
                Nodo sents = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).value;
                int sentleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = sents;
                RESULT.add(sent);

                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS", 10, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 77: // INDICE ::= indice CALCULAR 
            {
                Nodo RESULT = null;
                int indleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).left;
                int indright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).right;
                String ind = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).value;
                int expleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int expright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;

                //Nodo indice=new Nodo("numero",num,numright,numleft);
                RESULT = new Nodo("indices", indright, indleft);
                RESULT.add(exp);

                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("INDICE", 13, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 76: // INDICE ::= INDICE indice CALCULAR 
            {
                Nodo RESULT = null;
                int listaleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).value;
                int expleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int expright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = lista;
                //Nodo indice=new Nodo("numero",num,numright,numleft);
                RESULT.add(exp);

                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("INDICE", 13, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 75: // ACCESO ::= TIPOLISTA INDICE 
            {
                Nodo RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).left;
                int valright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).right;
                Nodo val = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).value;
                int indiceleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int indiceright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo indice = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;

                RESULT = new Nodo("acceso", valright, valleft);
                RESULT.add(val);
                RESULT.add(indice);

                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("ACCESO", 14, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 74: // TIPOVALOR ::= caracter 
            {
                Nodo RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                String val = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo("caracter", val, valright, valleft);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOVALOR", 34, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 73: // TIPOVALOR ::= iden 
            {
                Nodo RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int idright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo("id", id, idright, idleft);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOVALOR", 34, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 72: // TIPOVALOR ::= CALCULAR 
            {
                Nodo RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo val = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = val;
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOVALOR", 34, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 71: // VALORES ::= TIPOVALOR 
            {
                Nodo RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo val = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;

                RESULT = new Nodo("valores", val.linea - 1, val.columna - 1);
                RESULT.add(val);

                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALORES", 7, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 70: // VALORES ::= VALORES coma TIPOVALOR 
            {
                Nodo RESULT = null;
                int listaleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).value;
                int valleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo val = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = lista;
                RESULT.add(val);

                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALORES", 7, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 69: // VALORESSTAR1 ::= 
            {
                Nodo RESULT = null;

                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALORESSTAR1", 40, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 68: // VALORESSTAR1 ::= VALORES 
            {
                Nodo RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo val = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = val;
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALORESSTAR1", 40, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 67: // ARRAY2 ::= ARRAY 
            {
                Nodo RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo val = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;

                RESULT = new Nodo("listaValores", val.linea - 1, val.columna - 1);
                RESULT.add(val);

                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("ARRAY2", 9, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 66: // ARRAY2 ::= ARRAY2 coma ARRAY 
            {
                Nodo RESULT = null;
                int listaleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).value;
                int valleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo val = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = lista;
                RESULT.add(val);

                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("ARRAY2", 9, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 65: // ARRAY ::= corInicio ARRAY2 corFin 
            {
                Nodo RESULT = null;
                int listaleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).value;
                RESULT = lista;
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("ARRAY", 8, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 64: // ARRAY ::= corInicio VALORES corFin 
            {
                Nodo RESULT = null;
                int listasleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).left;
                int listasright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).right;
                Nodo listas = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).value;
                RESULT = listas;
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("ARRAY", 8, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 63: // LISTA ::= let iden igual TIPOLISTA 
            {
                Nodo RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).value;
                int valleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo val = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;

                RESULT = new Nodo("declaracionLista", id, idright, idleft);
                RESULT.add(val);

                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LISTA", 6, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 3)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 62: // CONCA ::= TIPOLISTA concatenar TIPOLISTA 
            {
                Nodo RESULT = null;
                int val1left = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).left;
                int val1right = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).right;
                Nodo val1 = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).value;
                int val2left = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int val2right = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo val2 = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;

                RESULT = new Nodo("concatenar", val1.linea - 1, val2.columna - 1);
                RESULT.add(val1);
                RESULT.add(val2);

                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CONCA", 32, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 61: // TIPOLISTA ::= LLAMADA 
            {
                Nodo RESULT = null;
                int cadleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int cadright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo cad = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = cad;
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOLISTA", 33, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 60: // TIPOLISTA ::= cadena 
            {
                Nodo RESULT = null;
                int cadleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int cadright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                String cad = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo("cadena", cad, cadright, cadleft);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOLISTA", 33, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 59: // TIPOLISTA ::= CONCA 
            {
                Nodo RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo val = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = val;
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOLISTA", 33, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 58: // TIPOLISTA ::= OPERACIONLISTA2 
            {
                Nodo RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo val = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = val;
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOLISTA", 33, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 57: // TIPOLISTA ::= ARRAY 
            {
                Nodo RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo val = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = val;
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOLISTA", 33, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 56: // TIPOLISTA ::= iden 
            {
                Nodo RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int idright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo("id", id, idright, idleft);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOLISTA", 33, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 55: // TIPOOPERACIONLISTA2 ::= desc 
            {
                Nodo RESULT = null;
                int cadleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int cadright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                String cad = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo("desc", cadright, cadleft);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOOPERACIONLISTA2", 31, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 54: // TIPOOPERACIONLISTA2 ::= asc 
            {
                Nodo RESULT = null;
                int cadleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int cadright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                String cad = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo("asc", cadright, cadleft);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOOPERACIONLISTA2", 31, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 53: // TIPOOPERACIONLISTA2 ::= par 
            {
                Nodo RESULT = null;
                int cadleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int cadright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                String cad = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo("par", cadright, cadleft);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOOPERACIONLISTA2", 31, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 52: // TIPOOPERACIONLISTA2 ::= impr 
            {
                Nodo RESULT = null;
                int cadleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int cadright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                String cad = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo("impr", cadright, cadleft);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOOPERACIONLISTA2", 31, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 51: // TIPOOPERACIONLISTA2 ::= revers 
            {
                Nodo RESULT = null;
                int cadleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int cadright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                String cad = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo("revers", cadright, cadleft);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOOPERACIONLISTA2", 31, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 50: // OPERACIONLISTA2 ::= dolar TIPOOPERACIONLISTA2 TIPOLISTA dolar 
            {
                Nodo RESULT = null;
                int tipoleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).left;
                int tiporight = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).right;
                Nodo tipo = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).value;
                int listaleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).value;

                RESULT = new Nodo(tipo.etiqueta, tipo.linea - 1, tipo.columna - 1);
                RESULT.add(lista);

                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPERACIONLISTA2", 30, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 3)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 49: // TIPOOPERACIONLISTA ::= length 
            {
                Nodo RESULT = null;
                int cadleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int cadright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                String cad = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo("length", cadright, cadleft);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOOPERACIONLISTA", 29, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 48: // TIPOOPERACIONLISTA ::= product 
            {
                Nodo RESULT = null;
                int cadleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int cadright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                String cad = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo("product", cadright, cadleft);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOOPERACIONLISTA", 29, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 47: // TIPOOPERACIONLISTA ::= sum 
            {
                Nodo RESULT = null;
                int cadleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int cadright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                String cad = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo("sum", cadright, cadleft);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOOPERACIONLISTA", 29, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 46: // TIPOOPERACIONLISTA ::= max 
            {
                Nodo RESULT = null;
                int cadleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int cadright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                String cad = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo("max", cadright, cadleft);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOOPERACIONLISTA", 29, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 45: // TIPOOPERACIONLISTA ::= min 
            {
                Nodo RESULT = null;
                int cadleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int cadright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                String cad = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo("min", cadright, cadleft);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOOPERACIONLISTA", 29, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 44: // OPERACIONLISTA ::= dolar TIPOOPERACIONLISTA TIPOLISTA dolar 
            {
                Nodo RESULT = null;
                int tipoleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).left;
                int tiporight = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).right;
                Nodo tipo = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).value;
                int listaleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).value;

                RESULT = new Nodo(tipo.etiqueta, tipo.linea - 1, tipo.columna - 1);
                RESULT.add(lista);

                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPERACIONLISTA", 28, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 3)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 43: // VALOREXP ::= LLAMADA 
            {
                Nodo RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo val = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = val;
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALOREXP", 17, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 42: // VALOREXP ::= OPERACIONLISTA 
            {
                Nodo RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo val = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = val;
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALOREXP", 17, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 41: // VALOREXP ::= CALCULAR 
            {
                Nodo RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo val = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = val;
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALOREXP", 17, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 40: // VALOREXP ::= ACCESO 
            {
                Nodo RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo val = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = val;
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALOREXP", 17, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 39: // VALOREXP ::= SIMPLIFICADA 
            {
                Nodo RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo val = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = val;
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALOREXP", 17, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 38: // TIPOSIMPLIFICADA ::= decc 
            {
                Nodo RESULT = null;
                int tipoleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int tiporight = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                String tipo = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo("decc", tiporight, tipoleft);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOSIMPLIFICADA", 16, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 37: // TIPOSIMPLIFICADA ::= succ 
            {
                Nodo RESULT = null;
                int tipoleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int tiporight = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                String tipo = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo("succ", tiporight, tipoleft);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOSIMPLIFICADA", 16, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 36: // SIMPLIFICADA ::= dolar TIPOSIMPLIFICADA VALOREXP dolar 
            {
                Nodo RESULT = null;
                int tipoleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).left;
                int tiporight = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).right;
                Nodo tipo = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).value;
                int calleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).left;
                int calright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).right;
                Nodo cal = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).value;

                RESULT = new Nodo(tipo.etiqueta, tipo.linea - 1, tipo.columna - 1);
                RESULT.add(cal);

                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SIMPLIFICADA", 15, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 3)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 35: // CALCULAR ::= dolar calcular EXPA dolar 
            {
                Nodo RESULT = null;
                int calleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).left;
                int calright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).right;
                String cal = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).value;
                int expleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).left;
                int expright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).value;

                RESULT = new Nodo("calcular", calright, calleft);
                RESULT.add(exp);

                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CALCULAR", 5, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 3)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 34: // SALTOS ::= salto 
            {
                Nodo RESULT = null;

                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SALTOS", 27, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 33: // SALTOS ::= SALTOS salto 
            {
                Nodo RESULT = null;

                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SALTOS", 27, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 32: // DATO ::= cadena 
            {
                Nodo RESULT = null;
                int datoleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int datoright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                String dato = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo("cadena", dato, datoright, datoleft);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("DATO", 3, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 31: // DATO ::= numero 
            {
                Nodo RESULT = null;
                int datoleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int datoright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                String dato = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo("numero", dato, datoright, datoleft);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("DATO", 3, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 30: // EXPL ::= EXPR 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = d1;
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPL", 1, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 29: // EXPL ::= parenInicio EXPL parenFin 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).value;
                RESULT = d1;
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPL", 1, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 28: // EXPL ::= EXPL or EXPL 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).value;
                int d2left = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int d2right = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo d2 = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo(op, opright, opleft);
                RESULT.add(d1);
                RESULT.add(d2);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPL", 1, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 27: // EXPL ::= EXPL and EXPL 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).value;
                int d2left = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int d2right = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo d2 = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo(op, opright, opleft);
                RESULT.add(d1);
                RESULT.add(d2);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPL", 1, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 26: // EXPR ::= EXPA 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = d1;
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPR", 2, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 25: // EXPR ::= EXPC noIgual EXPC 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).value;
                int d2left = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int d2right = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo d2 = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo(op, opright, opleft);
                RESULT.add(d1);
                RESULT.add(d2);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPR", 2, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 24: // EXPR ::= EXPC menorIgual EXPC 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).value;
                int d2left = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int d2right = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo d2 = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo(op, opright, opleft);
                RESULT.add(d1);
                RESULT.add(d2);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPR", 2, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 23: // EXPR ::= EXPC mayorIgual EXPC 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).value;
                int d2left = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int d2right = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo d2 = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo(op, opright, opleft);
                RESULT.add(d1);
                RESULT.add(d2);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPR", 2, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 22: // EXPR ::= EXPC menor EXPC 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).value;
                int d2left = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int d2right = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo d2 = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo(op, opright, opleft);
                RESULT.add(d1);
                RESULT.add(d2);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPR", 2, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 21: // EXPR ::= EXPC mayor EXPC 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).value;
                int d2left = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int d2right = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo d2 = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo(op, opright, opleft);
                RESULT.add(d1);
                RESULT.add(d2);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPR", 2, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 20: // EXPR ::= EXPC igualIgual EXPC 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).value;
                int d2left = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int d2right = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo d2 = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo(op, opright, opleft);
                RESULT.add(d1);
                RESULT.add(d2);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPR", 2, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 19: // EXPC ::= cadena 
            {
                Nodo RESULT = null;
                int datoleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int datoright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                String dato = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo("cadena", dato, datoright, datoleft);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPC", 12, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 18: // EXPC ::= VALOREXP 
            {
                Nodo RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo val = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = val;
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPC", 12, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 17: // EXPC ::= iden 
            {
                Nodo RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int idright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo("id", id, idright, idleft);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPC", 12, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 16: // EXPA ::= iden 
            {
                Nodo RESULT = null;
                int id1left = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int id1right = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                String id1 = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo("id", id1, id1right, id1left);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPA", 0, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 15: // EXPA ::= VALOREXP 
            {
                Nodo RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo val = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = val;
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPA", 0, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 14: // EXPA ::= DATO 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = d1;
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPA", 0, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 13: // EXPA ::= menos EXPA 
            {
                Nodo RESULT = null;
                int opleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).value;
                int d1left = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo("unitario", opright, opleft);
                RESULT.add(d1);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPA", 0, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 12: // EXPA ::= parenInicio EXPA parenFin 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).value;
                RESULT = d1;
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPA", 0, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 11: // EXPA ::= EXPA mod EXPA 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).value;
                int d2left = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int d2right = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo d2 = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo("mod", opright, opleft);
                RESULT.add(d1);
                RESULT.add(d2);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPA", 0, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 10: // EXPA ::= EXPA sqrt EXPA 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).value;
                int d2left = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int d2right = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo d2 = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo("sqrt", opright, opleft);
                RESULT.add(d1);
                RESULT.add(d2);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPA", 0, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 9: // EXPA ::= EXPA pot EXPA 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).value;
                int d2left = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int d2right = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo d2 = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo("^", opright, opleft);
                RESULT.add(d1);
                RESULT.add(d2);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPA", 0, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 8: // EXPA ::= EXPA div EXPA 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).value;
                int d2left = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int d2right = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo d2 = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo(op, opright, opleft);
                RESULT.add(d1);
                RESULT.add(d2);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPA", 0, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 7: // EXPA ::= EXPA mul EXPA 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).value;
                int d2left = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int d2right = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo d2 = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo(op, opright, opleft);
                RESULT.add(d1);
                RESULT.add(d2);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPA", 0, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 6: // EXPA ::= EXPA menos EXPA 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).value;
                int d2left = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int d2right = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo d2 = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo(op, opright, opleft);
                RESULT.add(d1);
                RESULT.add(d2);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPA", 0, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 5: // EXPA ::= EXPA mas EXPA 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).value;
                int d2left = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int d2right = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo d2 = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = new Nodo(op, opright, opleft);
                RESULT.add(d1);
                RESULT.add(d2);
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPA", 0, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 2)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 4: // SALTOSSTAR ::= 
            {
                Nodo RESULT = null;

                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SALTOSSTAR", 39, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 3: // SALTOSSTAR ::= SALTOS 
            {
                Nodo RESULT = null;

                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SALTOSSTAR", 39, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 2: // INICIO ::= SENTENCIA 
            {
                Nodo RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).right;
                Nodo val = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
                RESULT = val;
                Inicio.raiz = val;

                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("INICIO", 4, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 1: // INICIO ::= FUNCIONES SALTOSSTAR 
            {
                Nodo RESULT = null;
                int funcionesleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).left;
                int funcionesright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).right;
                Nodo funciones = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).value;

                raiz = funciones;

                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("INICIO", 4, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            return CUP$SintacticoH$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 0: // $START ::= INICIO EOF 
            {
                Object RESULT = null;
                int start_valleft = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).left;
                int start_valright = ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).right;
                Nodo start_val = (Nodo) ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)).value;
                RESULT = start_val;
                CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top - 1)), ((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()), RESULT);
            }
            /* ACCEPT */
            CUP$SintacticoH$parser.done_parsing();
            return CUP$SintacticoH$result;

            /* . . . . . .*/
            default:
                throw new Exception(
                        "Invalid action number found in internal parse table");

        }
    }
}
