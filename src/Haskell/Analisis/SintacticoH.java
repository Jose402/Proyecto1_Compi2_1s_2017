
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Mar 11 21:01:41 GMT-12:00 2017
//----------------------------------------------------

package Haskell.Analisis;

import Ast.*;
import Interfaz.Inicio;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Mar 11 21:01:41 GMT-12:00 2017
  */
public class SintacticoH extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintacticoH() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticoH(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoH(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\160\000\002\002\004\000\002\006\004\000\002\006" +
    "\003\000\002\051\003\000\002\051\002\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\016\003\000\002\016\003" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\003\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\003\000\002\005\003\000\002\005\003" +
    "\000\002\035\004\000\002\035\003\000\002\007\006\000" +
    "\002\021\006\000\002\022\003\000\002\022\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\036\006\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\040\006\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\042\007\000" +
    "\002\010\010\000\002\012\005\000\002\012\005\000\002" +
    "\013\005\000\002\013\003\000\002\052\003\000\002\052" +
    "\002\000\002\011\005\000\002\011\003\000\002\044\003" +
    "\000\002\044\003\000\002\044\003\000\002\020\006\000" +
    "\002\017\005\000\002\017\004\000\002\014\005\000\002" +
    "\014\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\024\010\000\002" +
    "\050\005\000\002\050\003\000\002\026\003\000\002\026" +
    "\002\000\002\025\005\000\002\025\003\000\002\027\010" +
    "\000\002\045\003\000\002\045\002\000\002\047\005\000" +
    "\002\047\003\000\002\046\003\000\002\046\003\000\002" +
    "\046\003\000\002\046\003\000\002\030\015\000\002\033" +
    "\007\000\002\032\004\000\002\032\003\000\002\031\007" +
    "\000\002\034\003\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\014\017\022\022\005\023\025\025\013\030" +
    "\015\001\002\000\010\002\uffb2\015\uffb2\016\uffb2\001\002" +
    "\000\006\023\141\025\045\001\002\000\004\002\uffff\001" +
    "\002\000\006\002\ufffd\015\040\001\002\000\010\002\uffac" +
    "\015\uffac\016\uffac\001\002\000\010\002\uffae\015\uffae\016" +
    "\uffae\001\002\000\010\002\uffad\015\uffad\016\uffad\001\002" +
    "\000\046\004\163\023\171\025\161\026\167\027\256\031" +
    "\160\032\157\033\165\034\166\037\152\040\151\041\233" +
    "\042\227\043\232\044\235\045\231\046\155\067\150\001" +
    "\002\000\010\002\uffab\015\uffab\016\uffab\001\002\000\010" +
    "\002\uffa9\015\uffa9\016\uffa9\001\002\000\010\002\uffaa\015" +
    "\uffaa\016\uffaa\001\002\000\010\002\uffb1\015\uffb1\016\uffb1" +
    "\001\002\000\010\002\uffb3\015\uffb3\016\uffb3\001\002\000" +
    "\010\002\uffaf\015\uffaf\016\uffaf\001\002\000\016\014\063" +
    "\023\051\025\045\050\053\066\055\067\047\001\002\000" +
    "\010\002\uffb0\015\uffb0\016\uffb0\001\002\000\004\002\044" +
    "\001\002\000\006\011\uffa4\023\030\001\002\000\006\002" +
    "\uffa6\015\uffa6\001\002\000\004\011\034\001\002\000\006" +
    "\011\uffa2\012\uffa2\001\002\000\006\011\uffa5\012\032\001" +
    "\002\000\004\023\033\001\002\000\006\011\uffa3\012\uffa3" +
    "\001\002\000\012\017\022\022\005\025\013\030\015\001" +
    "\002\000\004\015\040\001\002\000\006\015\uffb4\016\uffb4" +
    "\001\002\000\016\015\043\017\022\022\005\024\041\025" +
    "\013\030\015\001\002\000\030\002\uffe0\015\uffe0\017\uffe0" +
    "\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\030\uffe0\066" +
    "\uffe0\067\uffe0\001\002\000\006\002\uffa8\015\uffa8\001\002" +
    "\000\006\015\uffb5\016\uffb5\001\002\000\030\002\uffe1\015" +
    "\uffe1\017\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1" +
    "\030\uffe1\066\uffe1\067\uffe1\001\002\000\004\002\001\001" +
    "\002\000\032\004\163\023\171\025\161\026\167\031\160" +
    "\032\157\033\165\034\166\037\152\040\151\046\155\067" +
    "\150\001\002\000\052\013\uffda\015\uffda\020\uffda\025\uffda" +
    "\036\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda\054" +
    "\uffda\055\uffda\056\uffda\057\uffda\060\uffda\061\uffda\062\uffda" +
    "\063\uffda\064\uffda\065\uffda\001\002\000\032\013\uffe2\020" +
    "\uffe2\025\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2" +
    "\054\uffe2\055\uffe2\064\uffe2\065\uffe2\001\002\000\016\056" +
    "\137\057\136\060\135\061\133\062\134\063\132\001\002" +
    "\000\044\013\ufff1\020\ufff1\047\ufff1\050\ufff1\051\ufff1\052" +
    "\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff0\057\ufff0\060\ufff0" +
    "\061\ufff0\062\ufff0\063\ufff0\064\ufff1\065\ufff1\001\002\000" +
    "\052\013\uffd7\015\uffd7\020\uffd7\025\uffd7\036\uffd7\047\uffd7" +
    "\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\056" +
    "\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7" +
    "\065\uffd7\001\002\000\016\014\121\023\116\025\045\050" +
    "\053\066\055\067\047\001\002\000\030\013\uffe8\020\uffe8" +
    "\047\107\050\110\051\113\052\115\053\106\054\114\055" +
    "\112\064\uffe8\065\uffe8\001\002\000\032\013\uffe3\020\uffe3" +
    "\025\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054" +
    "\uffe3\055\uffe3\064\uffe3\065\uffe3\001\002\000\052\013\uffd8" +
    "\015\uffd8\020\uffd8\025\uffd8\036\uffd8\047\uffd8\050\uffd8\051" +
    "\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8" +
    "\060\uffd8\061\uffd8\062\uffd8\063\uffd8\064\uffd8\065\uffd8\001" +
    "\002\000\044\013\ufff2\020\ufff2\047\ufff2\050\ufff2\051\ufff2" +
    "\052\ufff2\053\ufff2\054\ufff2\055\ufff2\056\uffef\057\uffef\060" +
    "\uffef\061\uffef\062\uffef\063\uffef\064\ufff2\065\ufff2\001\002" +
    "\000\012\013\uffe4\020\uffe4\064\uffe4\065\uffe4\001\002\000" +
    "\032\013\ufff3\020\ufff3\025\ufff3\047\ufff3\050\ufff3\051\ufff3" +
    "\052\ufff3\053\ufff3\054\ufff3\055\ufff3\064\ufff3\065\ufff3\001" +
    "\002\000\052\013\uffdb\015\uffdb\020\uffdb\025\uffdb\036\uffdb" +
    "\047\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb\055" +
    "\uffdb\056\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb\063\uffdb" +
    "\064\uffdb\065\uffdb\001\002\000\016\014\063\023\051\025" +
    "\045\050\053\066\055\067\047\001\002\000\052\013\uffd9" +
    "\015\uffd9\020\uffd9\025\uffd9\036\uffd9\047\uffd9\050\uffd9\051" +
    "\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9" +
    "\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9\065\uffd9\001" +
    "\002\000\010\020\070\064\067\065\066\001\002\000\016" +
    "\014\063\023\051\025\045\050\053\066\055\067\047\001" +
    "\002\000\016\014\063\023\051\025\045\050\053\066\055" +
    "\067\047\001\002\000\004\015\040\001\002\000\014\015" +
    "\043\017\022\022\005\025\013\030\015\001\002\000\004" +
    "\015\040\001\002\000\016\015\043\017\022\021\074\022" +
    "\005\025\013\030\015\001\002\000\004\015\040\001\002" +
    "\000\014\015\043\017\022\022\005\025\013\030\015\001" +
    "\002\000\004\015\040\001\002\000\016\015\043\017\022" +
    "\022\005\024\100\025\013\030\015\001\002\000\010\002" +
    "\uff98\015\uff98\016\uff98\001\002\000\012\013\uffe6\020\uffe6" +
    "\064\uffe6\065\066\001\002\000\012\013\uffe7\020\uffe7\064" +
    "\uffe7\065\uffe7\001\002\000\026\013\111\047\107\050\110" +
    "\051\113\052\115\053\106\054\114\055\112\064\uffe8\065" +
    "\uffe8\001\002\000\010\013\105\064\067\065\066\001\002" +
    "\000\012\013\uffe5\020\uffe5\064\uffe5\065\uffe5\001\002\000" +
    "\016\014\121\023\116\025\045\050\053\066\055\067\047" +
    "\001\002\000\016\014\121\023\116\025\045\050\053\066" +
    "\055\067\047\001\002\000\016\014\121\023\116\025\045" +
    "\050\053\066\055\067\047\001\002\000\032\013\ufff5\020" +
    "\ufff5\025\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5" +
    "\054\ufff5\055\ufff5\064\ufff5\065\ufff5\001\002\000\016\014" +
    "\121\023\116\025\045\050\053\066\055\067\047\001\002" +
    "\000\016\014\121\023\116\025\045\050\053\066\055\067" +
    "\047\001\002\000\016\014\121\023\116\025\045\050\053" +
    "\066\055\067\047\001\002\000\016\014\121\023\116\025" +
    "\045\050\053\066\055\067\047\001\002\000\032\013\ufff1" +
    "\020\ufff1\025\ufff1\047\ufff1\050\ufff1\051\ufff1\052\ufff1\053" +
    "\ufff1\054\ufff1\055\ufff1\064\ufff1\065\ufff1\001\002\000\032" +
    "\013\ufff9\020\ufff9\025\ufff9\047\ufff9\050\ufff9\051\ufff9\052" +
    "\ufff9\053\ufff9\054\114\055\112\064\ufff9\065\ufff9\001\002" +
    "\000\032\013\ufff2\020\ufff2\025\ufff2\047\ufff2\050\ufff2\051" +
    "\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2\064\ufff2\065\ufff2" +
    "\001\002\000\016\014\121\023\116\025\045\050\053\066" +
    "\055\067\047\001\002\000\022\013\111\047\107\050\110" +
    "\051\113\052\115\053\106\054\114\055\112\001\002\000" +
    "\032\013\ufff8\020\ufff8\025\ufff8\047\ufff8\050\ufff8\051\ufff8" +
    "\052\ufff8\053\ufff8\054\ufff8\055\ufff8\064\ufff8\065\ufff8\001" +
    "\002\000\032\013\ufffa\020\ufffa\025\ufffa\047\ufffa\050\ufffa" +
    "\051\ufffa\052\ufffa\053\ufffa\054\114\055\112\064\ufffa\065" +
    "\ufffa\001\002\000\032\013\ufff7\020\ufff7\025\ufff7\047\ufff7" +
    "\050\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7\064" +
    "\ufff7\065\ufff7\001\002\000\032\013\ufffb\020\ufffb\025\ufffb" +
    "\047\ufffb\050\ufffb\051\113\052\115\053\106\054\114\055" +
    "\112\064\ufffb\065\ufffb\001\002\000\032\013\ufffc\020\ufffc" +
    "\025\ufffc\047\ufffc\050\ufffc\051\113\052\115\053\106\054" +
    "\114\055\112\064\ufffc\065\ufffc\001\002\000\032\013\ufff6" +
    "\020\ufff6\025\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\053" +
    "\ufff6\054\114\055\112\064\ufff6\065\ufff6\001\002\000\032" +
    "\013\ufff4\020\ufff4\025\ufff4\047\ufff4\050\ufff4\051\113\052" +
    "\115\053\106\054\114\055\112\064\ufff4\065\ufff4\001\002" +
    "\000\006\023\141\025\045\001\002\000\006\023\141\025" +
    "\045\001\002\000\006\023\141\025\045\001\002\000\006" +
    "\023\141\025\045\001\002\000\006\023\141\025\045\001" +
    "\002\000\006\023\141\025\045\001\002\000\012\013\uffed" +
    "\020\uffed\064\uffed\065\uffed\001\002\000\014\013\ufff0\015" +
    "\ufff0\020\ufff0\064\ufff0\065\ufff0\001\002\000\014\013\uffef" +
    "\015\uffef\020\uffef\064\uffef\065\uffef\001\002\000\012\013" +
    "\uffec\020\uffec\064\uffec\065\uffec\001\002\000\012\013\uffee" +
    "\020\uffee\064\uffee\065\uffee\001\002\000\012\013\uffea\020" +
    "\uffea\064\uffea\065\uffea\001\002\000\012\013\uffeb\020\uffeb" +
    "\064\uffeb\065\uffeb\001\002\000\012\013\uffe9\020\uffe9\064" +
    "\uffe9\065\uffe9\001\002\000\010\025\uffc6\035\uffc6\036\uffc6" +
    "\001\002\000\012\004\uffd2\023\uffd2\025\uffd2\067\uffd2\001" +
    "\002\000\012\004\uffd3\023\uffd3\025\uffd3\067\uffd3\001\002" +
    "\000\004\025\174\001\002\000\004\036\246\001\002\000" +
    "\012\004\uffd1\023\uffd1\025\uffd1\067\uffd1\001\002\000\012" +
    "\004\163\023\230\025\161\067\150\001\002\000\004\025" +
    "\uffdc\001\002\000\004\025\uffdd\001\002\000\024\004\163" +
    "\023\230\025\161\041\233\042\227\043\232\044\235\045" +
    "\231\067\150\001\002\000\010\025\uffc8\035\uffc8\036\uffc8" +
    "\001\002\000\012\004\163\023\213\025\174\071\214\001" +
    "\002\000\010\025\uffc7\035\uffc7\036\uffc7\001\002\000\012" +
    "\004\uffd5\023\uffd5\025\uffd5\067\uffd5\001\002\000\012\004" +
    "\uffd4\023\uffd4\025\uffd4\067\uffd4\001\002\000\016\014\121" +
    "\023\116\025\045\050\053\066\055\067\047\001\002\000" +
    "\010\025\uffc9\035\uffc9\036\uffc9\001\002\000\010\006\172" +
    "\035\uffca\036\uffca\001\002\000\014\004\163\007\uff9f\023" +
    "\200\025\174\067\177\001\002\000\006\007\uff9d\012\uff9d" +
    "\001\002\000\004\026\167\001\002\000\006\007\uff9a\012" +
    "\uff9a\001\002\000\006\007\uffa0\012\205\001\002\000\006" +
    "\007\uff99\012\uff99\001\002\000\006\007\uff9b\012\uff9b\001" +
    "\002\000\004\007\203\001\002\000\006\007\uff9c\012\uff9c" +
    "\001\002\000\004\025\204\001\002\000\056\002\uffa1\013" +
    "\uffa1\015\uffa1\016\uffa1\020\uffa1\025\uffa1\036\uffa1\047\uffa1" +
    "\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1\056" +
    "\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1\063\uffa1\064\uffa1" +
    "\065\uffa1\001\002\000\012\004\163\023\200\025\174\067" +
    "\177\001\002\000\006\007\uff9e\012\uff9e\001\002\000\022" +
    "\025\210\047\107\050\110\051\113\052\115\053\106\054" +
    "\114\055\112\001\002\000\064\002\uffdf\005\uffdf\007\uffdf" +
    "\012\uffdf\013\uffdf\015\uffdf\016\uffdf\020\uffdf\025\uffdf\036" +
    "\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf" +
    "\055\uffdf\056\uffdf\057\uffdf\060\uffdf\061\uffdf\062\uffdf\063" +
    "\uffdf\064\uffdf\065\uffdf\001\002\000\006\005\223\012\224" +
    "\001\002\000\006\005\uffc0\012\uffc0\001\002\000\006\005" +
    "\uffba\012\uffba\001\002\000\006\005\uffb9\012\uffb9\001\002" +
    "\000\006\005\220\012\221\001\002\000\006\005\uffbc\012" +
    "\uffbc\001\002\000\006\005\uffbb\012\uffbb\001\002\000\016" +
    "\005\uffc3\007\uffc3\012\uffc3\025\uffc3\035\uffc3\036\uffc3\001" +
    "\002\000\010\023\213\025\174\071\214\001\002\000\006" +
    "\005\uffbd\012\uffbd\001\002\000\016\005\uffc2\007\uffc2\012" +
    "\uffc2\025\uffc2\035\uffc2\036\uffc2\001\002\000\004\004\163" +
    "\001\002\000\006\005\uffc1\012\uffc1\001\002\000\004\035" +
    "\240\001\002\000\012\004\uffce\023\uffce\025\uffce\067\uffce" +
    "\001\002\000\006\025\uffca\035\uffca\001\002\000\012\004" +
    "\uffcb\023\uffcb\025\uffcb\067\uffcb\001\002\000\012\004\uffcd" +
    "\023\uffcd\025\uffcd\067\uffcd\001\002\000\012\004\uffcf\023" +
    "\uffcf\025\uffcf\067\uffcf\001\002\000\012\004\163\023\230" +
    "\025\161\067\150\001\002\000\012\004\uffcc\023\uffcc\025" +
    "\uffcc\067\uffcc\001\002\000\004\025\237\001\002\000\016" +
    "\002\uffd0\015\uffd0\016\uffd0\025\uffd0\035\uffd0\036\uffd0\001" +
    "\002\000\012\004\163\023\230\025\161\067\150\001\002" +
    "\000\004\025\242\001\002\000\016\002\uffc5\015\uffc5\016" +
    "\uffc5\025\uffc5\035\uffc5\036\uffc5\001\002\000\004\025\244" +
    "\001\002\000\056\002\uffd6\013\uffd6\015\uffd6\016\uffd6\020" +
    "\uffd6\025\uffd6\036\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6" +
    "\053\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\061" +
    "\uffd6\062\uffd6\063\uffd6\064\uffd6\065\uffd6\001\002\000\006" +
    "\025\250\036\251\001\002\000\004\025\045\001\002\000" +
    "\006\025\uffb6\036\uffb6\001\002\000\056\002\uffb8\013\uffb8" +
    "\015\uffb8\016\uffb8\020\uffb8\025\uffb8\036\uffb8\047\uffb8\050" +
    "\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8" +
    "\057\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8\064\uffb8\065" +
    "\uffb8\001\002\000\004\025\045\001\002\000\006\025\uffb7" +
    "\036\uffb7\001\002\000\004\025\254\001\002\000\056\002" +
    "\uffde\013\uffde\015\uffde\016\uffde\020\uffde\025\uffde\036\uffde" +
    "\047\uffde\050\uffde\051\uffde\052\uffde\053\uffde\054\uffde\055" +
    "\uffde\056\uffde\057\uffde\060\uffde\061\uffde\062\uffde\063\uffde" +
    "\064\uffde\065\uffde\001\002\000\006\035\240\036\246\001" +
    "\002\000\004\023\257\001\002\000\004\011\260\001\002" +
    "\000\012\004\163\023\230\025\161\067\150\001\002\000" +
    "\004\025\262\001\002\000\010\002\uffc4\015\uffc4\016\uffc4" +
    "\001\002\000\004\002\000\001\002\000\010\002\ufffe\015" +
    "\043\023\025\001\002\000\006\002\uffa7\015\uffa7\001\002" +
    "\000\004\015\040\001\002\000\010\015\043\066\270\067" +
    "\271\001\002\000\004\010\uff93\001\002\000\004\010\uff92" +
    "\001\002\000\004\010\277\001\002\000\010\024\275\066" +
    "\270\067\271\001\002\000\010\024\uff95\066\uff95\067\uff95" +
    "\001\002\000\010\002\uff97\015\uff97\016\uff97\001\002\000" +
    "\010\024\uff96\066\uff96\067\uff96\001\002\000\012\017\022" +
    "\022\005\025\013\030\015\001\002\000\006\015\040\016" +
    "\302\001\002\000\014\015\043\017\022\022\005\025\013" +
    "\030\015\001\002\000\004\015\040\001\002\000\012\015" +
    "\043\024\uff94\066\uff94\067\uff94\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\036\006\023\007\017\010\020\015\005\020" +
    "\010\021\011\024\025\027\003\030\016\033\022\036\007" +
    "\040\013\042\015\050\006\001\001\000\002\001\001\000" +
    "\020\007\063\016\265\020\045\021\061\023\141\027\051" +
    "\036\055\001\001\000\002\001\001\000\006\035\263\051" +
    "\262\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\012\167\022\152\037\155\040\161\041" +
    "\233\042\163\043\254\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\002\053\003\064\004\057" +
    "\005\060\007\063\016\047\020\045\021\061\023\056\027" +
    "\051\036\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\025\030\026\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\007\017\010\020\014" +
    "\034\015\035\020\010\021\011\027\003\030\016\033\022" +
    "\036\007\040\013\042\015\001\001\000\004\035\036\001" +
    "\001\000\002\001\001\000\030\007\017\010\020\015\041" +
    "\020\010\021\011\027\003\030\016\033\022\036\007\040" +
    "\013\042\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\012\167\022\152\037\155\040\161\042\163\043\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\002\130" +
    "\005\060\007\063\020\045\021\061\023\117\027\051\036" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\002\102\003\103\004\057" +
    "\005\060\007\063\016\047\020\045\021\061\023\056\027" +
    "\051\036\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\002\053\003\101\004\057\005\060\007\063\016" +
    "\047\020\045\021\061\023\056\027\051\036\055\001\001" +
    "\000\030\002\053\003\100\004\057\005\060\007\063\016" +
    "\047\020\045\021\061\023\056\027\051\036\055\001\001" +
    "\000\004\035\070\001\001\000\032\007\017\010\020\014" +
    "\071\015\035\020\010\021\011\027\003\030\016\033\022" +
    "\036\007\040\013\042\015\001\001\000\004\035\072\001" +
    "\001\000\030\007\017\010\020\015\041\020\010\021\011" +
    "\027\003\030\016\033\022\036\007\040\013\042\015\001" +
    "\001\000\004\035\074\001\001\000\032\007\017\010\020" +
    "\014\075\015\035\020\010\021\011\027\003\030\016\033" +
    "\022\036\007\040\013\042\015\001\001\000\004\035\076" +
    "\001\001\000\030\007\017\010\020\015\041\020\010\021" +
    "\011\027\003\030\016\033\022\036\007\040\013\042\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\002\127\005\060\007\063\020\045\021\061\023" +
    "\117\027\051\036\055\001\001\000\022\002\126\005\060" +
    "\007\063\020\045\021\061\023\117\027\051\036\055\001" +
    "\001\000\022\002\125\005\060\007\063\020\045\021\061" +
    "\023\117\027\051\036\055\001\001\000\002\001\001\000" +
    "\022\002\124\005\060\007\063\020\045\021\061\023\117" +
    "\027\051\036\055\001\001\000\022\002\123\005\060\007" +
    "\063\020\045\021\061\023\117\027\051\036\055\001\001" +
    "\000\022\002\122\005\060\007\063\020\045\021\061\023" +
    "\117\027\051\036\055\001\001\000\022\002\116\005\060" +
    "\007\063\020\045\021\061\023\117\027\051\036\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\002\121\005\060\007\063\020\045\021\061\023" +
    "\117\027\051\036\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\007\063\016\146\020\045\021\061\023\141\027" +
    "\051\036\055\001\001\000\020\007\063\016\145\020\045" +
    "\021\061\023\141\027\051\036\055\001\001\000\020\007" +
    "\063\016\144\020\045\021\061\023\141\027\051\036\055" +
    "\001\001\000\020\007\063\016\143\020\045\021\061\023" +
    "\141\027\051\036\055\001\001\000\020\007\063\016\142" +
    "\020\045\021\061\023\141\027\051\036\055\001\001\000" +
    "\020\007\063\016\137\020\045\021\061\023\141\027\051" +
    "\036\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\252" +
    "\001\001\000\004\017\244\001\001\000\002\001\001\000" +
    "\012\012\167\040\161\042\163\043\242\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\012\167\040\161\041" +
    "\233\042\163\043\225\001\001\000\002\001\001\000\014" +
    "\007\216\011\214\012\211\013\210\044\215\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\002\206\005\060\007\063\020\045\021\061\023\117\027" +
    "\051\036\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\007\201\012\174\045\200\046\172\047\175\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\201\012\174\046\205\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\216\044\221\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\224\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\012\167\040\161\042\163\043\235\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\167\040\161\042\163\043\240\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\007\063\020\045\021" +
    "\061\023\246\027\051\036\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\007\063\020\045\021\061\023" +
    "\251\027\051\036\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\244\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\167\040\161" +
    "\042\163\043\260\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\264\001\001\000\002" +
    "\001\001\000\004\035\266\001\001\000\010\031\273\032" +
    "\272\034\271\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\031\275\034\271\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\007\017\010\020\014\277\015\035\020\010\021\011\027" +
    "\003\030\016\033\022\036\007\040\013\042\015\001\001" +
    "\000\004\035\300\001\001\000\030\007\017\010\020\015" +
    "\041\020\010\021\011\027\003\030\016\033\022\036\007" +
    "\040\013\042\015\001\001\000\004\035\302\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoH$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoH$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoH$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        System.out.println("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "
        +s.value + " no reconocido." );
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error en la Línea " + (s.right+1)+ "Columna "+(s.left+1)+". Identificador " +
        s.value + " no reconocido.");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintacticoH$actions {
  private final SintacticoH parser;

  /** Constructor */
  CUP$SintacticoH$actions(SintacticoH parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintacticoH$do_action(
    int                        CUP$SintacticoH$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoH$parser,
    java.util.Stack            CUP$SintacticoH$stack,
    int                        CUP$SintacticoH$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoH$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoH$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // VALORCASE ::= cadena 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("cadena",cad,cadright,cadleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALORCASE",26, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // VALORCASE ::= numero 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("numero",num,numright,numleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALORCASE",26, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CASO ::= VALORCASE dosPuntos SENTENCIAS puntoComa SALTOS 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		
	RESULT=new Nodo("case",val.linea-1,val.columna-1);
	RESULT.add(val);
	RESULT.add(sent);
	
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CASO",23, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CASOS ::= CASO 
            {
              Nodo RESULT =null;
		int casoleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo caso = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		
		RESULT=new Nodo("cases",caso.linea-1,caso.columna-1);
		RESULT.add(caso);
		
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CASOS",24, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CASOS ::= CASOS CASO 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		int casoleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo caso = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=lista;
		RESULT.add(caso);
		
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CASOS",24, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SELECCIONAR ::= caso EXPC SALTOS CASOS end 
            {
              Nodo RESULT =null;
		int casoleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)).right;
		String caso = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)).value;
		int casosleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int casosright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo casos = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		
	RESULT=new Nodo("switch",casoright,casoleft);
	RESULT.add(exp);
	RESULT.add(casos);
	
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SELECCIONAR",25, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SI ::= si EXPL then SALTOS SENTENCIAS SALTOS sino SALTOS SENTENCIAS SALTOS end 
            {
              Nodo RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-10)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-10)).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-10)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-9)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-9)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-9)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-6)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-6)).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-6)).value;
		int sentSinoleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int sentSinoright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo sentSino = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		
	Nodo sentSi=new Nodo("if",siright,sileft);
	Nodo condicion=new Nodo("condicion",exp.linea-1,exp.columna-1);
	condicion.add(exp);
	sentSi.add(condicion);
	sentSi.add(sent);
	sentSi.add(sentSino);
	RESULT=sentSi;
	
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SI",22, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-10)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // TIPOVALORPARA ::= cadena 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("cadena",cad,cadright,cadleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOVALORPARA",36, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // TIPOVALORPARA ::= ARRAY 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=val;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOVALORPARA",36, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // TIPOVALORPARA ::= iden 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("id",id,idright,idleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOVALORPARA",36, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // TIPOVALORPARA ::= CALCULAR 
            {
              Nodo RESULT =null;
		int calleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int calright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo cal = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=cal;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOVALORPARA",36, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // VALORESPARA ::= TIPOVALORPARA 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		
				RESULT=new Nodo("valorParametros",val.linea-1,val.columna-1);
				RESULT.add(val);
				
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALORESPARA",37, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // VALORESPARA ::= VALORESPARA coma TIPOVALORPARA 
            {
              Nodo RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo para = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=para;
			RESULT.add(val);
			
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALORESPARA",37, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // VALORESSTAR ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALORESSTAR",35, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // VALORESSTAR ::= VALORESPARA 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=val;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALORESSTAR",35, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LLAMADA ::= dolar iden llaveInicio VALORESSTAR llaveFin dolar 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo parametros = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		
		RESULT=new Nodo("llamada",id,idright,idleft);
		RESULT.add(parametros);
		
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LLAMADA",21, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // PARAMETROS ::= iden 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("parametros",idright,idleft);
			Nodo par=new Nodo("id",id,idright,idleft);
			RESULT.add(par);
			
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // PARAMETROS ::= PARAMETROS coma iden 
            {
              Nodo RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo para = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=para;
			Nodo par=new Nodo("id",id,idright,idleft);
			RESULT.add(par);
			
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // PARAMETROSTAR ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("PARAMETROSTAR",20, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PARAMETROSTAR ::= PARAMETROS 
            {
              Nodo RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo par = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=par;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("PARAMETROSTAR",20, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // FUNCIONES ::= FUNCION 
            {
              Nodo RESULT =null;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo funcion = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		
			RESULT=new Nodo("funciones",funcion.linea-1,funcion.columna-1);
			RESULT.add(funcion);
			
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("FUNCIONES",38, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FUNCIONES ::= FUNCIONES SALTOS FUNCION 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo funcion = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=lista;
			RESULT.add(funcion);
			
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("FUNCIONES",38, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // FUNCION ::= iden PARAMETROSTAR igual SENTENCIAS SALTOS end 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-5)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)).right;
		Nodo par = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)).value;
		int sent1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int sent1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo sent1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		
		Nodo funcion=new Nodo("funcion",id,idright,idright);
		funcion.add(par);
		funcion.add(sent1);
		RESULT=funcion;
		
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SENTENCIA ::= ans 
            {
              Nodo RESULT =null;
		int ansleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int ansright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String ans = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("ans",ans,ansright,ansleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SENTENCIA ::= CONCA 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=sent;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SENTENCIA ::= OPERACIONLISTA2 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=sent;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SENTENCIA ::= OPERACIONLISTA 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=sent;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SENTENCIA ::= SIMPLIFICADA 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=sent;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SENTENCIA ::= ACCESO 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=sent;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SENTENCIA ::= LISTA 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=sent;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SENTENCIA ::= SELECCIONAR 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=sent;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENTENCIA ::= SI 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=sent;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SENTENCIA ::= LLAMADA 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=sent;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SENTENCIA ::= CALCULAR 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=sent;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIAS ::= SENTENCIA 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("sentencias",sent.linea-1,sent.columna-1);
			RESULT.add(sent);
			
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",10, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIAS ::= SENTENCIAS SALTOS SENTENCIA 
            {
              Nodo RESULT =null;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=sents;
			RESULT.add(sent);
			
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",10, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // INDICE ::= indice VALOREXP 
            {
              Nodo RESULT =null;
		int indleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int indright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		String ind = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		
		//Nodo indice=new Nodo("numero",num,numright,numleft);
		RESULT=new Nodo("indices",indright,indleft);
		RESULT.add(exp);
		
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("INDICE",13, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // INDICE ::= INDICE indice VALOREXP 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=lista;
		//Nodo indice=new Nodo("numero",num,numright,numleft);
		RESULT.add(exp);
		
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("INDICE",13, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ACCESO ::= dolar TIPOLISTA INDICE dolar 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int indiceleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int indiceright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo indice = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		
	RESULT=new Nodo("acceso",valright,valleft);
	RESULT.add(val);
	RESULT.add(indice);
	
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TIPOVALOR ::= caracter 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("caracter",val,valright,valleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOVALOR",34, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TIPOVALOR ::= iden 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("id",id,idright,idleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOVALOR",34, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TIPOVALOR ::= CALCULAR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=val;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOVALOR",34, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VALORES ::= TIPOVALOR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		
		RESULT=new Nodo("valores",val.linea-1,val.columna-1);
		RESULT.add(val);
		
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALORES",7, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VALORES ::= VALORES coma TIPOVALOR 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=lista;
		RESULT.add(val);
		
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALORES",7, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VALORESSTAR1 ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALORESSTAR1",40, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VALORESSTAR1 ::= VALORES 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=val;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALORESSTAR1",40, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ARRAY2 ::= ARRAY 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		
		RESULT=new Nodo("listaValores",val.linea-1,val.columna-1);
		RESULT.add(val);
		
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("ARRAY2",9, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ARRAY2 ::= ARRAY2 coma ARRAY 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=lista;
		RESULT.add(val);
		
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("ARRAY2",9, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ARRAY ::= corInicio ARRAY2 corFin 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		RESULT=lista;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("ARRAY",8, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ARRAY ::= corInicio VALORES corFin 
            {
              Nodo RESULT =null;
		int listasleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int listasright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo listas = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		RESULT=listas;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("ARRAY",8, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LISTA ::= dolar let iden igual TIPOLISTA dolar 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		
	RESULT=new Nodo("declaracionLista",id,idright,idleft);
	RESULT.add(val);
	
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LISTA",6, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONCA ::= dolar TIPOLISTA concatenar TIPOLISTA dolar 
            {
              Nodo RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)).right;
		Nodo val1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo val2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		
	RESULT=new Nodo("concatenar",val1.linea-1,val2.columna-1);
	RESULT.add(val1);
	RESULT.add(val2);
	
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CONCA",32, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TIPOLISTA ::= cadena 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("cadena",cad,cadright,cadleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOLISTA",33, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TIPOLISTA ::= CONCA 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=val;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOLISTA",33, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TIPOLISTA ::= OPERACIONLISTA2 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=val;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOLISTA",33, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TIPOLISTA ::= ARRAY 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=val;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOLISTA",33, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPOLISTA ::= iden 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("id",id,idright,idleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOLISTA",33, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPOOPERACIONLISTA2 ::= desc 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("desc",cadright,cadleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOOPERACIONLISTA2",31, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TIPOOPERACIONLISTA2 ::= asc 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("asc",cadright,cadleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOOPERACIONLISTA2",31, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TIPOOPERACIONLISTA2 ::= par 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("par",cadright,cadleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOOPERACIONLISTA2",31, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TIPOOPERACIONLISTA2 ::= impr 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("impr",cadright,cadleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOOPERACIONLISTA2",31, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIPOOPERACIONLISTA2 ::= revers 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("revers",cadright,cadleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOOPERACIONLISTA2",31, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPERACIONLISTA2 ::= dolar TIPOOPERACIONLISTA2 TIPOLISTA dolar 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		
	RESULT=new Nodo(tipo.etiqueta,tipo.linea-1,tipo.columna-1);
	RESULT.add(lista);
	
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPERACIONLISTA2",30, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIPOOPERACIONLISTA ::= length 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("length",cadright,cadleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOOPERACIONLISTA",29, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPOOPERACIONLISTA ::= product 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("product",cadright,cadleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOOPERACIONLISTA",29, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPOOPERACIONLISTA ::= sum 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("sum",cadright,cadleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOOPERACIONLISTA",29, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPOOPERACIONLISTA ::= max 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("max",cadright,cadleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOOPERACIONLISTA",29, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPOOPERACIONLISTA ::= min 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("min",cadright,cadleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOOPERACIONLISTA",29, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPERACIONLISTA ::= dolar TIPOOPERACIONLISTA TIPOLISTA dolar 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		
	RESULT=new Nodo(tipo.etiqueta,tipo.linea-1,tipo.columna-1);
	RESULT.add(lista);
	
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPERACIONLISTA",28, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VALOREXP ::= LLAMADA 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=val;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALOREXP",17, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VALOREXP ::= OPERACIONLISTA 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=val;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALOREXP",17, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VALOREXP ::= CALCULAR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=val;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALOREXP",17, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VALOREXP ::= ACCESO 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=val;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALOREXP",17, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VALOREXP ::= SIMPLIFICADA 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=val;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALOREXP",17, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPOSIMPLIFICADA ::= decc 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("decc",tiporight,tipoleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOSIMPLIFICADA",16, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPOSIMPLIFICADA ::= succ 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("succ",tiporight,tipoleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOSIMPLIFICADA",16, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SIMPLIFICADA ::= dolar TIPOSIMPLIFICADA CALCULAR dolar 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int calleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int calright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo cal = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		
		RESULT=new Nodo(tipo.etiqueta,tipo.linea-1,tipo.columna-1);
		RESULT.add(cal); 
		
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SIMPLIFICADA",15, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CALCULAR ::= dolar calcular EXPA dolar 
            {
              Nodo RESULT =null;
		int calleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int calright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		String cal = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		
		RESULT=new Nodo("calcular",calright,calleft);
		RESULT.add(exp);
		
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CALCULAR",5, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SALTOS ::= salto 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SALTOS",27, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SALTOS ::= SALTOS salto 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SALTOS",27, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DATO ::= cadena 
            {
              Nodo RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("cadena",dato,datoright,datoleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("DATO",3, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DATO ::= numero 
            {
              Nodo RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("numero",dato,datoright,datoleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("DATO",3, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPL ::= EXPR 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=d1;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPL",1, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPL ::= parenInicio EXPL parenFin 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		RESULT=d1;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPL",1, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPL ::= EXPL or EXPL 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPL",1, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPL ::= EXPL and EXPL 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPL",1, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPR ::= EXPA 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=d1;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPR",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPR ::= EXPC noIgual EXPC 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPR",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPR ::= EXPC menorIgual EXPC 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPR",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPR ::= EXPC mayorIgual EXPC 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPR",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPR ::= EXPC menor EXPC 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPR",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPR ::= EXPC mayor EXPC 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPR",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXPR ::= EXPC igualIgual EXPC 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPR",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXPC ::= VALOREXP 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=val;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPC",12, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXPC ::= iden 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("id",id,idright,idleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPC",12, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXPA ::= iden 
            {
              Nodo RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("id",id1,id1right,id1left);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPA",0, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXPA ::= VALOREXP 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=val;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPA",0, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXPA ::= DATO 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=d1;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPA",0, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXPA ::= menos EXPA 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		int d1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("unitario",opright,opleft);RESULT.add(d1);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPA",0, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXPA ::= parenInicio EXPA parenFin 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		RESULT=d1;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPA",0, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXPA ::= EXPA mod EXPA 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("mod",opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPA",0, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EXPA ::= EXPA sqrt EXPA 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("sqrt",opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPA",0, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // EXPA ::= EXPA pot EXPA 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("^",opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPA",0, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // EXPA ::= EXPA div EXPA 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPA",0, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // EXPA ::= EXPA mul EXPA 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPA",0, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // EXPA ::= EXPA menos EXPA 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPA",0, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // EXPA ::= EXPA mas EXPA 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPA",0, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SALTOSSTAR ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SALTOSSTAR",39, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SALTOSSTAR ::= SALTOS 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SALTOSSTAR",39, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= SENTENCIA 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=val;
	Inicio.raiz=val;
	
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("INICIO",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= FUNCIONES SALTOSSTAR 
            {
              Nodo RESULT =null;
		int funcionesleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int funcionesright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo funciones = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		
	Inicio.raiz=funciones;
	
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("INICIO",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoH$parser.done_parsing();
          return CUP$SintacticoH$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

