
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 06 20:48:45 GMT-12:00 2017
//----------------------------------------------------

package Haskell.Analisis;

import Graphik.Ast.*;
import Interfaz.Inicio;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 06 20:48:45 GMT-12:00 2017
  */
public class SintacticoH extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintacticoH() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticoH(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoH(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\002\004\000\002\006\003\000\002\006" +
    "\003\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\004\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\016" +
    "\003\000\002\016\003\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\003\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\003\000\002\005" +
    "\003\000\002\005\003\000\002\035\004\000\002\035\003" +
    "\000\002\007\006\000\002\021\006\000\002\022\003\000" +
    "\002\022\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\036\006\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\040\006\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\043\003\000\002\043\003\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\042\007" +
    "\000\002\010\010\000\002\012\005\000\002\012\005\000" +
    "\002\013\005\000\002\013\003\000\002\011\005\000\002" +
    "\011\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\020\006\000\002\017\005\000\002\017\004" +
    "\000\002\014\005\000\002\014\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\024\011\000\002\026\003\000\002\026\002\000" +
    "\002\025\005\000\002\025\003\000\002\027\010\000\002" +
    "\045\003\000\002\045\002\000\002\047\005\000\002\047" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\030\015\000\002\033\007\000" +
    "\002\032\004\000\002\032\003\000\002\031\007\000\002" +
    "\034\003\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\014\017\021\022\005\023\025\025\012\030" +
    "\014\001\002\000\010\002\uffb7\015\uffb7\016\uffb7\001\002" +
    "\000\016\014\120\023\115\025\045\050\052\066\054\067" +
    "\047\001\002\000\004\002\uffff\001\002\000\010\002\uffb1" +
    "\015\uffb1\016\uffb1\001\002\000\010\002\uffb3\015\uffb3\016" +
    "\uffb3\001\002\000\010\002\uffb2\015\uffb2\016\uffb2\001\002" +
    "\000\046\004\172\023\240\025\175\026\155\027\237\031" +
    "\157\032\147\033\153\034\160\037\156\040\161\041\207" +
    "\042\204\043\206\044\211\045\205\046\151\067\174\001" +
    "\002\000\010\002\uffb0\015\uffb0\016\uffb0\001\002\000\010" +
    "\002\uffae\015\uffae\016\uffae\001\002\000\010\002\uffaf\015" +
    "\uffaf\016\uffaf\001\002\000\010\002\uffb6\015\uffb6\016\uffb6" +
    "\001\002\000\010\002\uffb8\015\uffb8\016\uffb8\001\002\000" +
    "\010\002\uffb4\015\uffb4\016\uffb4\001\002\000\016\014\062" +
    "\023\051\025\045\050\052\066\054\067\047\001\002\000" +
    "\010\002\uffb5\015\uffb5\016\uffb5\001\002\000\004\002\044" +
    "\001\002\000\004\002\000\001\002\000\006\011\uffab\023" +
    "\027\001\002\000\004\011\033\001\002\000\006\011\uffa9" +
    "\012\uffa9\001\002\000\006\011\uffac\012\031\001\002\000" +
    "\004\023\032\001\002\000\006\011\uffaa\012\uffaa\001\002" +
    "\000\012\017\021\022\005\025\012\030\014\001\002\000" +
    "\004\015\037\001\002\000\006\015\uffb9\016\uffb9\001\002" +
    "\000\016\015\042\017\021\022\005\024\040\025\012\030" +
    "\014\001\002\000\026\002\uffe2\015\uffe2\017\uffe2\021\uffe2" +
    "\022\uffe2\024\uffe2\025\uffe2\030\uffe2\066\uffe2\067\uffe2\001" +
    "\002\000\004\015\037\001\002\000\006\015\uffba\016\uffba" +
    "\001\002\000\026\002\uffe3\015\uffe3\017\uffe3\021\uffe3\022" +
    "\uffe3\024\uffe3\025\uffe3\030\uffe3\066\uffe3\067\uffe3\001\002" +
    "\000\006\002\uffad\015\042\001\002\000\004\002\001\001" +
    "\002\000\024\023\154\026\155\031\157\032\147\033\153" +
    "\034\160\037\156\040\161\046\151\001\002\000\050\013" +
    "\uffdc\015\uffdc\020\uffdc\025\uffdc\047\uffdc\050\uffdc\051\uffdc" +
    "\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060" +
    "\uffdc\061\uffdc\062\uffdc\063\uffdc\064\uffdc\065\uffdc\001\002" +
    "\000\034\013\uffe4\015\uffe4\020\uffe4\025\uffe4\047\uffe4\050" +
    "\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4\055\uffe4\064\uffe4" +
    "\065\uffe4\001\002\000\016\056\136\057\134\060\135\061" +
    "\132\062\133\063\131\001\002\000\044\013\ufff3\020\ufff3" +
    "\047\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3\054\ufff3\055" +
    "\ufff3\056\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2" +
    "\064\ufff3\065\ufff3\001\002\000\016\014\120\023\115\025" +
    "\045\050\052\066\054\067\047\001\002\000\030\013\uffea" +
    "\020\uffea\047\106\050\107\051\112\052\114\053\105\054" +
    "\113\055\111\064\uffea\065\uffea\001\002\000\034\013\uffe5" +
    "\015\uffe5\020\uffe5\025\uffe5\047\uffe5\050\uffe5\051\uffe5\052" +
    "\uffe5\053\uffe5\054\uffe5\055\uffe5\064\uffe5\065\uffe5\001\002" +
    "\000\050\013\uffda\015\uffda\020\uffda\025\uffda\047\uffda\050" +
    "\uffda\051\uffda\052\uffda\053\uffda\054\uffda\055\uffda\056\uffda" +
    "\057\uffda\060\uffda\061\uffda\062\uffda\063\uffda\064\uffda\065" +
    "\uffda\001\002\000\044\013\ufff4\020\ufff4\047\ufff4\050\ufff4" +
    "\051\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4\056\ufff1\057" +
    "\ufff1\060\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff4\065\ufff4" +
    "\001\002\000\012\013\uffe6\020\uffe6\064\uffe6\065\uffe6\001" +
    "\002\000\034\013\ufff5\015\ufff5\020\ufff5\025\ufff5\047\ufff5" +
    "\050\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\064" +
    "\ufff5\065\ufff5\001\002\000\050\013\uffdd\015\uffdd\020\uffdd" +
    "\025\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054" +
    "\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd" +
    "\063\uffdd\064\uffdd\065\uffdd\001\002\000\016\014\062\023" +
    "\051\025\045\050\052\066\054\067\047\001\002\000\050" +
    "\013\uffdb\015\uffdb\020\uffdb\025\uffdb\047\uffdb\050\uffdb\051" +
    "\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb" +
    "\060\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb\001" +
    "\002\000\010\020\067\064\066\065\065\001\002\000\016" +
    "\014\062\023\051\025\045\050\052\066\054\067\047\001" +
    "\002\000\016\014\062\023\051\025\045\050\052\066\054" +
    "\067\047\001\002\000\004\015\037\001\002\000\014\015" +
    "\042\017\021\022\005\025\012\030\014\001\002\000\004" +
    "\015\037\001\002\000\016\015\042\017\021\021\073\022" +
    "\005\025\012\030\014\001\002\000\004\015\037\001\002" +
    "\000\014\015\042\017\021\022\005\025\012\030\014\001" +
    "\002\000\004\015\037\001\002\000\016\015\042\017\021" +
    "\022\005\024\077\025\012\030\014\001\002\000\010\002" +
    "\uff9f\015\uff9f\016\uff9f\001\002\000\012\013\uffe8\020\uffe8" +
    "\064\uffe8\065\065\001\002\000\012\013\uffe9\020\uffe9\064" +
    "\uffe9\065\uffe9\001\002\000\026\013\110\047\106\050\107" +
    "\051\112\052\114\053\105\054\113\055\111\064\uffea\065" +
    "\uffea\001\002\000\010\013\104\064\066\065\065\001\002" +
    "\000\012\013\uffe7\020\uffe7\064\uffe7\065\uffe7\001\002\000" +
    "\016\014\120\023\115\025\045\050\052\066\054\067\047" +
    "\001\002\000\016\014\120\023\115\025\045\050\052\066" +
    "\054\067\047\001\002\000\016\014\120\023\115\025\045" +
    "\050\052\066\054\067\047\001\002\000\034\013\ufff7\015" +
    "\ufff7\020\ufff7\025\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7" +
    "\053\ufff7\054\ufff7\055\ufff7\064\ufff7\065\ufff7\001\002\000" +
    "\016\014\120\023\115\025\045\050\052\066\054\067\047" +
    "\001\002\000\016\014\120\023\115\025\045\050\052\066" +
    "\054\067\047\001\002\000\016\014\120\023\115\025\045" +
    "\050\052\066\054\067\047\001\002\000\016\014\120\023" +
    "\115\025\045\050\052\066\054\067\047\001\002\000\034" +
    "\013\ufff3\015\ufff3\020\ufff3\025\ufff3\047\ufff3\050\ufff3\051" +
    "\ufff3\052\ufff3\053\ufff3\054\ufff3\055\ufff3\064\ufff3\065\ufff3" +
    "\001\002\000\034\013\ufffb\015\ufffb\020\ufffb\025\ufffb\047" +
    "\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb\054\113\055\111" +
    "\064\ufffb\065\ufffb\001\002\000\034\013\ufff4\015\ufff4\020" +
    "\ufff4\025\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4" +
    "\054\ufff4\055\ufff4\064\ufff4\065\ufff4\001\002\000\016\014" +
    "\120\023\115\025\045\050\052\066\054\067\047\001\002" +
    "\000\022\013\110\047\106\050\107\051\112\052\114\053" +
    "\105\054\113\055\111\001\002\000\034\013\ufffa\015\ufffa" +
    "\020\ufffa\025\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa\053" +
    "\ufffa\054\ufffa\055\ufffa\064\ufffa\065\ufffa\001\002\000\034" +
    "\013\ufffc\015\ufffc\020\ufffc\025\ufffc\047\ufffc\050\ufffc\051" +
    "\ufffc\052\ufffc\053\ufffc\054\113\055\111\064\ufffc\065\ufffc" +
    "\001\002\000\034\013\ufff9\015\ufff9\020\ufff9\025\ufff9\047" +
    "\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9" +
    "\064\ufff9\065\ufff9\001\002\000\034\013\ufffd\015\ufffd\020" +
    "\ufffd\025\ufffd\047\ufffd\050\ufffd\051\112\052\114\053\105" +
    "\054\113\055\111\064\ufffd\065\ufffd\001\002\000\034\013" +
    "\ufffe\015\ufffe\020\ufffe\025\ufffe\047\ufffe\050\ufffe\051\112" +
    "\052\114\053\105\054\113\055\111\064\ufffe\065\ufffe\001" +
    "\002\000\034\013\ufff8\015\ufff8\020\ufff8\025\ufff8\047\ufff8" +
    "\050\ufff8\051\ufff8\052\ufff8\053\ufff8\054\113\055\111\064" +
    "\ufff8\065\ufff8\001\002\000\034\013\ufff6\015\ufff6\020\ufff6" +
    "\025\ufff6\047\ufff6\050\ufff6\051\112\052\114\053\105\054" +
    "\113\055\111\064\ufff6\065\ufff6\001\002\000\006\023\140" +
    "\025\045\001\002\000\006\023\140\025\045\001\002\000" +
    "\006\023\140\025\045\001\002\000\006\023\140\025\045" +
    "\001\002\000\006\023\140\025\045\001\002\000\006\023" +
    "\140\025\045\001\002\000\012\013\ufff1\020\ufff1\064\ufff1" +
    "\065\ufff1\001\002\000\012\013\ufff2\020\ufff2\064\ufff2\065" +
    "\ufff2\001\002\000\012\013\uffef\020\uffef\064\uffef\065\uffef" +
    "\001\002\000\012\013\ufff0\020\ufff0\064\ufff0\065\ufff0\001" +
    "\002\000\012\013\uffee\020\uffee\064\uffee\065\uffee\001\002" +
    "\000\012\013\uffec\020\uffec\064\uffec\065\uffec\001\002\000" +
    "\012\013\uffed\020\uffed\064\uffed\065\uffed\001\002\000\012" +
    "\013\uffeb\020\uffeb\064\uffeb\065\uffeb\001\002\000\004\025" +
    "\uffde\001\002\000\004\025\217\001\002\000\012\004\uffd4" +
    "\023\uffd4\025\uffd4\067\uffd4\001\002\000\012\004\172\023" +
    "\176\025\175\067\174\001\002\000\012\004\uffd8\023\uffd8" +
    "\025\uffd8\067\uffd8\001\002\000\004\036\165\001\002\000" +
    "\016\014\120\023\115\025\045\050\052\066\054\067\047" +
    "\001\002\000\012\004\uffd6\023\uffd6\025\uffd6\067\uffd6\001" +
    "\002\000\004\025\uffdf\001\002\000\012\004\uffd7\023\uffd7" +
    "\025\uffd7\067\uffd7\001\002\000\012\004\uffd5\023\uffd5\025" +
    "\uffd5\067\uffd5\001\002\000\022\025\163\047\106\050\107" +
    "\051\112\052\114\053\105\054\113\055\111\001\002\000" +
    "\062\002\uffe1\005\uffe1\007\uffe1\012\uffe1\013\uffe1\015\uffe1" +
    "\016\uffe1\020\uffe1\025\uffe1\047\uffe1\050\uffe1\051\uffe1\052" +
    "\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1" +
    "\061\uffe1\062\uffe1\063\uffe1\064\uffe1\065\uffe1\001\002\000" +
    "\006\025\167\036\170\001\002\000\004\066\166\001\002" +
    "\000\006\025\uffbb\036\uffbb\001\002\000\054\002\uffbd\013" +
    "\uffbd\015\uffbd\016\uffbd\020\uffbd\025\uffbd\047\uffbd\050\uffbd" +
    "\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057" +
    "\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd" +
    "\001\002\000\004\066\171\001\002\000\006\025\uffbc\036" +
    "\uffbc\001\002\000\012\004\172\023\222\025\217\071\223" +
    "\001\002\000\006\025\uffcb\035\uffcb\001\002\000\006\025" +
    "\uffc9\035\uffc9\001\002\000\024\004\172\023\176\025\175" +
    "\041\207\042\204\043\206\044\211\045\205\067\174\001" +
    "\002\000\006\025\uffcd\035\uffcd\001\002\000\004\025\202" +
    "\001\002\000\006\025\uffca\035\uffca\001\002\000\006\025" +
    "\uffcc\035\uffcc\001\002\000\054\002\uffd9\013\uffd9\015\uffd9" +
    "\016\uffd9\020\uffd9\025\uffd9\047\uffd9\050\uffd9\051\uffd9\052" +
    "\uffd9\053\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9" +
    "\061\uffd9\062\uffd9\063\uffd9\064\uffd9\065\uffd9\001\002\000" +
    "\004\035\214\001\002\000\012\004\uffd1\023\uffd1\025\uffd1" +
    "\067\uffd1\001\002\000\012\004\uffce\023\uffce\025\uffce\067" +
    "\uffce\001\002\000\012\004\uffd0\023\uffd0\025\uffd0\067\uffd0" +
    "\001\002\000\012\004\uffd2\023\uffd2\025\uffd2\067\uffd2\001" +
    "\002\000\012\004\172\023\176\025\175\067\174\001\002" +
    "\000\012\004\uffcf\023\uffcf\025\uffcf\067\uffcf\001\002\000" +
    "\004\025\213\001\002\000\014\002\uffd3\015\uffd3\016\uffd3" +
    "\025\uffd3\035\uffd3\001\002\000\012\004\172\023\176\025" +
    "\175\067\174\001\002\000\004\025\216\001\002\000\014" +
    "\002\uffc8\015\uffc8\016\uffc8\025\uffc8\035\uffc8\001\002\000" +
    "\004\026\155\001\002\000\006\005\232\012\233\001\002" +
    "\000\006\005\uffc3\012\uffc3\001\002\000\006\005\uffbf\012" +
    "\uffbf\001\002\000\006\005\uffbe\012\uffbe\001\002\000\006" +
    "\005\227\012\230\001\002\000\006\005\uffc1\012\uffc1\001" +
    "\002\000\006\005\uffc0\012\uffc0\001\002\000\014\005\uffc6" +
    "\007\uffc6\012\uffc6\025\uffc6\035\uffc6\001\002\000\010\023" +
    "\222\025\217\071\223\001\002\000\006\005\uffc2\012\uffc2" +
    "\001\002\000\014\005\uffc5\007\uffc5\012\uffc5\025\uffc5\035" +
    "\uffc5\001\002\000\004\004\172\001\002\000\006\005\uffc4" +
    "\012\uffc4\001\002\000\004\025\236\001\002\000\054\002" +
    "\uffe0\013\uffe0\015\uffe0\016\uffe0\020\uffe0\025\uffe0\047\uffe0" +
    "\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056" +
    "\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0" +
    "\065\uffe0\001\002\000\004\023\255\001\002\000\010\006" +
    "\241\035\uffcd\036\165\001\002\000\014\004\172\007\uffa6" +
    "\023\246\025\217\067\245\001\002\000\006\007\uffa4\012" +
    "\uffa4\001\002\000\006\007\uffa1\012\uffa1\001\002\000\006" +
    "\007\uffa7\012\253\001\002\000\006\007\uffa0\012\uffa0\001" +
    "\002\000\006\007\uffa2\012\uffa2\001\002\000\004\007\251" +
    "\001\002\000\006\007\uffa3\012\uffa3\001\002\000\004\025" +
    "\252\001\002\000\010\002\uffa8\015\uffa8\016\uffa8\001\002" +
    "\000\012\004\172\023\246\025\217\067\245\001\002\000" +
    "\006\007\uffa5\012\uffa5\001\002\000\004\011\256\001\002" +
    "\000\012\004\172\023\176\025\175\067\174\001\002\000" +
    "\004\025\260\001\002\000\010\002\uffc7\015\uffc7\016\uffc7" +
    "\001\002\000\022\015\037\047\106\050\107\051\112\052" +
    "\114\053\105\054\113\055\111\001\002\000\010\015\042" +
    "\066\263\067\264\001\002\000\004\010\uff9a\001\002\000" +
    "\004\010\uff99\001\002\000\004\010\272\001\002\000\010" +
    "\024\270\066\263\067\264\001\002\000\010\024\uff9c\066" +
    "\uff9c\067\uff9c\001\002\000\010\002\uff9e\015\uff9e\016\uff9e" +
    "\001\002\000\010\024\uff9d\066\uff9d\067\uff9d\001\002\000" +
    "\012\017\021\022\005\025\012\030\014\001\002\000\006" +
    "\015\037\016\275\001\002\000\014\015\042\017\021\022" +
    "\005\025\012\030\014\001\002\000\004\015\037\001\002" +
    "\000\012\015\042\024\uff9b\066\uff9b\067\uff9b\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\034\006\022\007\016\010\017\015\005\020" +
    "\007\021\010\024\023\027\003\030\015\033\021\036\006" +
    "\040\012\042\014\001\001\000\002\001\001\000\020\002" +
    "\260\005\057\007\062\020\045\021\060\023\116\036\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\012\200\022\147\037\151" +
    "\040\172\041\207\042\177\043\202\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\002\052\003" +
    "\063\004\056\005\057\007\062\016\047\020\045\021\060" +
    "\023\055\036\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\025\027\026\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\007\016\010\017" +
    "\014\033\015\034\020\007\021\010\027\003\030\015\033" +
    "\021\036\006\040\012\042\014\001\001\000\004\035\035" +
    "\001\001\000\002\001\001\000\030\007\016\010\017\015" +
    "\040\020\007\021\010\027\003\030\015\033\021\036\006" +
    "\040\012\042\014\001\001\000\002\001\001\000\004\035" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\022\147\037\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\002\127\005\057\007\062\020" +
    "\045\021\060\023\116\036\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\002\101\003\102\004\056\005\057\007\062\016\047\020" +
    "\045\021\060\023\055\036\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\002\052\003\100\004\056\005" +
    "\057\007\062\016\047\020\045\021\060\023\055\036\054" +
    "\001\001\000\026\002\052\003\077\004\056\005\057\007" +
    "\062\016\047\020\045\021\060\023\055\036\054\001\001" +
    "\000\004\035\067\001\001\000\032\007\016\010\017\014" +
    "\070\015\034\020\007\021\010\027\003\030\015\033\021" +
    "\036\006\040\012\042\014\001\001\000\004\035\071\001" +
    "\001\000\030\007\016\010\017\015\040\020\007\021\010" +
    "\027\003\030\015\033\021\036\006\040\012\042\014\001" +
    "\001\000\004\035\073\001\001\000\032\007\016\010\017" +
    "\014\074\015\034\020\007\021\010\027\003\030\015\033" +
    "\021\036\006\040\012\042\014\001\001\000\004\035\075" +
    "\001\001\000\030\007\016\010\017\015\040\020\007\021" +
    "\010\027\003\030\015\033\021\036\006\040\012\042\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\002\126\005\057\007\062\020\045\021\060\023" +
    "\116\036\054\001\001\000\020\002\125\005\057\007\062" +
    "\020\045\021\060\023\116\036\054\001\001\000\020\002" +
    "\124\005\057\007\062\020\045\021\060\023\116\036\054" +
    "\001\001\000\002\001\001\000\020\002\123\005\057\007" +
    "\062\020\045\021\060\023\116\036\054\001\001\000\020" +
    "\002\122\005\057\007\062\020\045\021\060\023\116\036" +
    "\054\001\001\000\020\002\121\005\057\007\062\020\045" +
    "\021\060\023\116\036\054\001\001\000\020\002\115\005" +
    "\057\007\062\020\045\021\060\023\116\036\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\002\120\005\057\007\062\020\045\021\060\023\116" +
    "\036\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\007" +
    "\062\016\145\020\045\021\060\023\136\036\054\001\001" +
    "\000\016\007\062\016\144\020\045\021\060\023\136\036" +
    "\054\001\001\000\016\007\062\016\143\020\045\021\060" +
    "\023\136\036\054\001\001\000\016\007\062\016\142\020" +
    "\045\021\060\023\136\036\054\001\001\000\016\007\062" +
    "\016\141\020\045\021\060\023\136\036\054\001\001\000" +
    "\016\007\062\016\140\020\045\021\060\023\136\036\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\234\001\001\000\002\001\001\000\012\012\200" +
    "\040\172\042\177\043\176\001\001\000\002\001\001\000" +
    "\004\017\163\001\001\000\020\002\161\005\057\007\062" +
    "\020\045\021\060\023\116\036\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\007\225\011\223\012" +
    "\220\013\217\044\224\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\012\200\040\172\041\207\042\177\043" +
    "\202\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\012\200\040\172\042\177\043" +
    "\211\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\012\200\040\172\042\177\043\214\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\225\044\230\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\233" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\163\001\001\000\014" +
    "\007\247\012\242\045\246\046\241\047\243\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\247" +
    "\012\242\046\253\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\200\040\172\042\177\043\256\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\261\001" +
    "\001\000\010\031\266\032\265\034\264\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\031" +
    "\270\034\264\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\007\016\010\017\014\272\015" +
    "\034\020\007\021\010\027\003\030\015\033\021\036\006" +
    "\040\012\042\014\001\001\000\004\035\273\001\001\000" +
    "\030\007\016\010\017\015\040\020\007\021\010\027\003" +
    "\030\015\033\021\036\006\040\012\042\014\001\001\000" +
    "\004\035\275\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoH$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoH$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoH$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        System.out.println("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "
        +s.value + " no reconocido." );
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error en la Línea " + (s.right+1)+ "Columna "+(s.left+1)+". Identificador " +
        s.value + " no reconocido.");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintacticoH$actions {
  private final SintacticoH parser;

  /** Constructor */
  CUP$SintacticoH$actions(SintacticoH parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintacticoH$do_action(
    int                        CUP$SintacticoH$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoH$parser,
    java.util.Stack            CUP$SintacticoH$stack,
    int                        CUP$SintacticoH$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoH$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoH$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // VALORCASE ::= cadena 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("cadena",cad,cadright,cadleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALORCASE",26, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // VALORCASE ::= numero 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("numero",num,numright,numleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALORCASE",26, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CASO ::= VALORCASE dosPuntos SENTENCIAS puntoComa SALTOS 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		
	RESULT=new Nodo("case",val.linea-1,val.columna-1);
	RESULT.add(val);
	RESULT.add(sent);
	
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CASO",23, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CASOS ::= CASO 
            {
              Nodo RESULT =null;
		int casoleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo caso = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		
		RESULT=new Nodo("cases",caso.linea-1,caso.columna-1);
		RESULT.add(caso);
		
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CASOS",24, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CASOS ::= CASOS CASO 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		int casoleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo caso = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=lista;
		RESULT.add(caso);
		
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CASOS",24, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SELECCIONAR ::= caso EXPA SALTOS CASOS end 
            {
              Nodo RESULT =null;
		int casoleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)).right;
		String caso = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)).value;
		int casosleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int casosright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo casos = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		
	RESULT=new Nodo("switch",casoright,casoleft);
	RESULT.add(exp);
	RESULT.add(casos);
	
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SELECCIONAR",25, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SI ::= si EXPL then SALTOS SENTENCIAS SALTOS sino SALTOS SENTENCIAS SALTOS end 
            {
              Nodo RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-10)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-10)).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-10)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-9)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-9)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-9)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-6)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-6)).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-6)).value;
		int sentSinoleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int sentSinoright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo sentSino = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		
	Nodo sentSi=new Nodo("if",siright,sileft);
	Nodo condicion=new Nodo("condicion",exp.linea-1,exp.columna-1);
	condicion.add(exp);
	sentSi.add(condicion);
	sentSi.add(sent);
	sentSi.add(sentSino);
	RESULT=sentSi;
	
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SI",22, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-10)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TIPOVALORPARA ::= cadena 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("cadena",cad,cadright,cadleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOVALORPARA",36, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TIPOVALORPARA ::= ARRAY 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=val;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOVALORPARA",36, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // TIPOVALORPARA ::= iden 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("id",id,idright,idleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOVALORPARA",36, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TIPOVALORPARA ::= CALCULAR 
            {
              Nodo RESULT =null;
		int calleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int calright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo cal = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=cal;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOVALORPARA",36, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // VALORESPARA ::= TIPOVALORPARA 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		
				RESULT=new Nodo("valorParametros",val.linea-1,val.columna-1);
				RESULT.add(val);
				
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALORESPARA",37, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // VALORESPARA ::= VALORESPARA coma TIPOVALORPARA 
            {
              Nodo RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo para = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=para;
			RESULT.add(val);
			
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALORESPARA",37, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // VALORESSTAR ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALORESSTAR",35, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // VALORESSTAR ::= VALORESPARA 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=val;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALORESSTAR",35, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LLAMADA ::= dolar iden llaveInicio VALORESSTAR llaveFin dolar 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo parametros = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		
		RESULT=new Nodo("llamada",id,idright,idleft);
		RESULT.add(parametros);
		
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LLAMADA",21, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // PARAMETROS ::= iden 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("parametros",idright,idleft);
			Nodo par=new Nodo("id",id,idright,idleft);
			RESULT.add(par);
			
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // PARAMETROS ::= PARAMETROS coma iden 
            {
              Nodo RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo para = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=para;
			Nodo par=new Nodo("id",id,idright,idleft);
			RESULT.add(par);
			
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PARAMETROSTAR ::= 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("PARAMETROSTAR",20, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PARAMETROSTAR ::= PARAMETROS 
            {
              Nodo RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo par = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=par;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("PARAMETROSTAR",20, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // FUNCION ::= iden PARAMETROSTAR igual SENTENCIAS SALTOS end SALTOS 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-6)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-5)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-5)).right;
		Nodo par = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-5)).value;
		int sent1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)).left;
		int sent1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)).right;
		Nodo sent1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)).value;
		
		Nodo funcion=new Nodo("funcion",id,idright,idright);
		funcion.add(par);
		funcion.add(sent1);
		RESULT=funcion;
		
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("FUNCION",18, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SENTENCIA ::= ans 
            {
              Nodo RESULT =null;
		int ansleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int ansright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String ans = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("ans",ans,ansright,ansleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SENTENCIA ::= CONCA 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=sent;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SENTENCIA ::= OPERACIONLISTA2 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=sent;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENTENCIA ::= OPERACIONLISTA 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=sent;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SENTENCIA ::= SIMPLIFICADA 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=sent;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SENTENCIA ::= ACCESO 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=sent;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIA ::= LISTA 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=sent;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIA ::= SELECCIONAR 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=sent;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIA ::= SI 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=sent;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIA ::= LLAMADA 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=sent;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA ::= CALCULAR 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=sent;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIA",11, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIAS ::= SENTENCIA 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("sentencias",sent.linea-1,sent.columna-1);
			RESULT.add(sent);
			
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",10, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIAS ::= SENTENCIAS SALTOS SENTENCIA 
            {
              Nodo RESULT =null;
		int sentsleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int sentsright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo sents = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=sents;
			RESULT.add(sent);
			
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",10, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // INDICE ::= indice numero 
            {
              Nodo RESULT =null;
		int indleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int indright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		String ind = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		
		Nodo indice=new Nodo("numero",num,numright,numleft);
		RESULT=new Nodo("indices",indright,indleft);
		RESULT.add(indice);
		
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("INDICE",13, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // INDICE ::= INDICE indice numero 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=lista;
		Nodo indice=new Nodo("numero",num,numright,numleft);
		RESULT.add(indice);
		
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("INDICE",13, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ACCESO ::= dolar iden INDICE dolar 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int indiceleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int indiceright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo indice = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		
	RESULT=new Nodo("acceso",id,idright,idleft);
	RESULT.add(indice);
	
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("ACCESO",14, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TIPOVALOR ::= caracter 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("caracter",val,valright,valleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOVALOR",34, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TIPOVALOR ::= iden 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("id",id,idright,idleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOVALOR",34, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TIPOVALOR ::= CALCULAR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=val;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOVALOR",34, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VALORES ::= TIPOVALOR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		
		RESULT=new Nodo("valores",val.linea-1,val.columna-1);
		RESULT.add(val);
		
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALORES",7, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VALORES ::= VALORES coma TIPOVALOR 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=lista;
		RESULT.add(val);
		
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALORES",7, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ARRAY2 ::= ARRAY 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		
		RESULT=new Nodo("listaValores",val.linea-1,val.columna-1);
		RESULT.add(val);
		
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("ARRAY2",9, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ARRAY2 ::= ARRAY2 coma ARRAY 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=lista;
		RESULT.add(val);
		
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("ARRAY2",9, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ARRAY ::= corInicio ARRAY2 corFin 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		RESULT=lista;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("ARRAY",8, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ARRAY ::= corInicio VALORES corFin 
            {
              Nodo RESULT =null;
		int listasleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int listasright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo listas = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		RESULT=listas;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("ARRAY",8, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LISTA ::= dolar let iden igual TIPOLISTA dolar 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		
	RESULT=new Nodo("declaracionLista",id,idright,idleft);
	RESULT.add(val);
	
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("LISTA",6, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONCA ::= dolar TIPOLISTA concatenar TIPOLISTA dolar 
            {
              Nodo RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)).right;
		Nodo val1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo val2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		
	RESULT=new Nodo("concatenar",val1.linea-1,val2.columna-1);
	RESULT.add(val1);
	RESULT.add(val2);
	
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CONCA",32, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TIPOLISTA ::= cadena 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("cadena",cad,cadright,cadleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOLISTA",33, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPOLISTA ::= CONCA 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=val;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOLISTA",33, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPOLISTA ::= OPERACIONLISTA2 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=val;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOLISTA",33, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TIPOLISTA ::= ARRAY 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=val;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOLISTA",33, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TIPOLISTA ::= iden 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("id",id,idright,idleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOLISTA",33, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TIPOOPERACIONLISTA2 ::= desc 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("desc",cadright,cadleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOOPERACIONLISTA2",31, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIPOOPERACIONLISTA2 ::= asc 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("asc",cadright,cadleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOOPERACIONLISTA2",31, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIPOOPERACIONLISTA2 ::= par 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("par",cadright,cadleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOOPERACIONLISTA2",31, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIPOOPERACIONLISTA2 ::= impr 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("impr",cadright,cadleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOOPERACIONLISTA2",31, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPOOPERACIONLISTA2 ::= revers 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("revers",cadright,cadleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOOPERACIONLISTA2",31, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPERACIONLISTA2 ::= dolar TIPOOPERACIONLISTA2 TIPOLISTA dolar 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		
	RESULT=new Nodo(tipo.etiqueta,tipo.linea-1,tipo.columna-1);
	RESULT.add(lista);
	
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPERACIONLISTA2",30, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPOOPERACIONLISTA ::= length 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("length",cadright,cadleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOOPERACIONLISTA",29, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPOOPERACIONLISTA ::= product 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("product",cadright,cadleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOOPERACIONLISTA",29, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPOOPERACIONLISTA ::= sum 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("sum",cadright,cadleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOOPERACIONLISTA",29, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPOOPERACIONLISTA ::= max 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("max",cadright,cadleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOOPERACIONLISTA",29, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPOOPERACIONLISTA ::= min 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("min",cadright,cadleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOOPERACIONLISTA",29, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERACIONLISTA ::= dolar TIPOOPERACIONLISTA TIPOLISTA dolar 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		
	RESULT=new Nodo(tipo.etiqueta,tipo.linea-1,tipo.columna-1);
	RESULT.add(lista);
	
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("OPERACIONLISTA",28, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VALOREXP ::= OPERACIONLISTA 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=val;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALOREXP",17, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VALOREXP ::= CALCULAR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=val;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALOREXP",17, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VALOREXP ::= ACCESO 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=val;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALOREXP",17, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VALOREXP ::= SIMPLIFICADA 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=val;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("VALOREXP",17, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPOSIMPLIFICADA ::= decc 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("decc",tiporight,tipoleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOSIMPLIFICADA",16, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPOSIMPLIFICADA ::= succ 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("succ",tiporight,tipoleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("TIPOSIMPLIFICADA",16, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SIMPLIFICADA ::= dolar TIPOSIMPLIFICADA CALCULAR dolar 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int calleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int calright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo cal = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		
		RESULT=new Nodo(tipo.etiqueta,tipo.linea-1,tipo.columna-1);
		RESULT.add(cal); 
		
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SIMPLIFICADA",15, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CALCULAR ::= dolar calcular EXPA dolar 
            {
              Nodo RESULT =null;
		int calleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int calright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		String cal = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		
		RESULT=new Nodo("calcular",calright,calleft);
		RESULT.add(exp);
		
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("CALCULAR",5, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SALTOS ::= salto 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SALTOS",27, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SALTOS ::= SALTOS salto 
            {
              Nodo RESULT =null;

              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("SALTOS",27, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DATO ::= cadena 
            {
              Nodo RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("cadena",dato,datoright,datoleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("DATO",3, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DATO ::= numero 
            {
              Nodo RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("numero",dato,datoright,datoleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("DATO",3, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPL ::= EXPR 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=d1;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPL",1, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPL ::= parenInicio EXPL parenFin 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		RESULT=d1;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPL",1, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPL ::= EXPL or EXPL 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPL",1, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPL ::= EXPL and EXPL 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPL",1, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPR ::= EXPA 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=d1;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPR",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPR ::= EXPC noIgual EXPC 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPR",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPR ::= EXPC menorIgual EXPC 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPR",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPR ::= EXPC mayorIgual EXPC 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPR",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXPR ::= EXPC menor EXPC 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPR",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXPR ::= EXPC mayor EXPC 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPR",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXPR ::= EXPC igualIgual EXPC 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPR",2, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXPC ::= VALOREXP 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=val;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPC",12, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXPC ::= iden 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("id",id,idright,idleft);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPC",12, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXPA ::= iden 
            {
              Nodo RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("id",id1,id1right,id1left);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPA",0, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXPA ::= VALOREXP 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=val;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPA",0, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXPA ::= DATO 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=d1;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPA",0, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXPA ::= menos EXPA 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		int d1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("-",opright,opleft);RESULT.add(d1);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPA",0, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EXPA ::= parenInicio EXPA parenFin 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		RESULT=d1;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPA",0, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // EXPA ::= EXPA mod EXPA 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("mod",opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPA",0, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // EXPA ::= EXPA sqrt EXPA 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("sqrt",opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPA",0, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // EXPA ::= EXPA pot EXPA 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo("^",opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPA",0, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // EXPA ::= EXPA div EXPA 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPA",0, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // EXPA ::= EXPA mul EXPA 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPA",0, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // EXPA ::= EXPA menos EXPA 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPA",0, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // EXPA ::= EXPA mas EXPA 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("EXPA",0, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= SENTENCIA 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		RESULT=val;
	Inicio.raiz=val;
	
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("INICIO",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= FUNCION 
            {
              Nodo RESULT =null;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()).right;
		Nodo funcion = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.peek()).value;
		
	RESULT=funcion;
	Inicio.raiz=funcion;
	
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("INICIO",4, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          return CUP$SintacticoH$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoH$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.elementAt(CUP$SintacticoH$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoH$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoH$parser.done_parsing();
          return CUP$SintacticoH$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

