/* The following code was generated by JFlex 1.6.0 */

package Haskell.Analisis;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>Scanner.jflex</tt>
 */
public class LexicoH implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\62\1\2\1\63\1\62\1\3\22\0\1\62\1\31\1\5"+
    "\1\0\1\36\1\0\1\33\1\14\1\43\1\44\1\4\1\12\1\42"+
    "\1\13\1\7\1\1\12\6\1\41\1\0\1\27\1\30\1\26\2\0"+
    "\1\51\1\10\1\50\1\17\1\46\1\61\1\57\1\60\1\54\2\10"+
    "\1\45\1\15\1\47\1\16\1\20\1\24\1\25\1\23\1\21\1\52"+
    "\1\56\1\10\1\55\2\10\1\34\1\0\1\35\1\0\1\11\1\0"+
    "\1\51\1\10\1\50\1\17\1\46\1\61\1\57\1\60\1\54\2\10"+
    "\1\45\1\15\1\47\1\16\1\20\1\24\1\25\1\23\1\21\1\52"+
    "\1\56\1\10\1\55\2\10\1\37\1\32\1\40\7\0\1\63\53\0"+
    "\1\10\21\0\1\10\154\0\2\53\115\0\1\22\u1e98\0\1\10\17\0"+
    "\1\63\1\63\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\1\4\6\1\1\2\6\1\11\1\12"+
    "\1\13\3\1\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\4\6\1\1\1\6\3\0\1\5"+
    "\1\25\3\0\1\6\1\0\5\6\1\0\2\6\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\4\6\1\0"+
    "\2\6\1\0\1\35\1\6\1\35\1\3\2\0\1\36"+
    "\3\0\1\37\2\40\1\0\3\6\1\41\1\6\1\42"+
    "\1\0\1\42\2\6\1\43\1\6\1\0\1\6\1\44"+
    "\1\0\2\6\2\45\2\46\1\0\1\6\4\0\2\47"+
    "\1\50\1\6\1\51\2\52\2\6\2\53\2\54\1\6"+
    "\2\55\1\56\1\57\1\0\4\6\1\60\1\6\2\61"+
    "\1\62\1\6\1\63\1\6\1\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\64\0\320\0\u0104\0\u0138"+
    "\0\u016c\0\64\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4"+
    "\0\u02d8\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444"+
    "\0\64\0\64\0\64\0\64\0\64\0\64\0\64\0\64"+
    "\0\64\0\u0478\0\u04ac\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0"+
    "\0\u05e4\0\u0618\0\u064c\0\64\0\u0680\0\u06b4\0\u06e8\0\u071c"+
    "\0\u0750\0\u0784\0\u07b8\0\u07ec\0\u0820\0\u0854\0\u0888\0\u08bc"+
    "\0\u08f0\0\64\0\64\0\64\0\64\0\64\0\64\0\64"+
    "\0\u0924\0\u0958\0\u098c\0\u09c0\0\u09f4\0\u0a28\0\u0a5c\0\u0a90"+
    "\0\64\0\u0ac4\0\u0138\0\64\0\u0af8\0\u0b2c\0\64\0\u0b60"+
    "\0\u0b94\0\u0bc8\0\u0138\0\64\0\u0138\0\u0bfc\0\u0c30\0\u0c64"+
    "\0\u0c98\0\u0138\0\u0ccc\0\64\0\u0d00\0\u0138\0\u0d34\0\u0d68"+
    "\0\u0138\0\u0d9c\0\u0dd0\0\u0e04\0\u0138\0\u0e38\0\u0e6c\0\u0ea0"+
    "\0\64\0\u0138\0\64\0\u0138\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70"+
    "\0\u0fa4\0\u0fd8\0\64\0\u0138\0\u0138\0\u100c\0\u0138\0\64"+
    "\0\u0138\0\u1040\0\u1074\0\64\0\u0138\0\64\0\u0138\0\u10a8"+
    "\0\64\0\u0138\0\64\0\64\0\u10dc\0\u1110\0\u1144\0\u1178"+
    "\0\u11ac\0\64\0\u11e0\0\64\0\u0138\0\u0138\0\u1214\0\u0138"+
    "\0\u1248\0\u0138";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\2\1\11\1\12\1\13\1\14\1\10\1\15\1\16"+
    "\1\17\1\20\1\21\1\10\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\10\1\44"+
    "\1\45\1\10\1\46\1\47\5\10\1\4\66\0\1\50"+
    "\2\0\1\51\61\0\2\4\56\0\1\4\1\0\2\52"+
    "\1\0\2\52\1\0\56\52\6\0\1\7\1\53\62\0"+
    "\1\10\1\0\2\10\3\0\5\10\1\0\3\10\17\0"+
    "\6\10\1\0\6\10\14\0\1\54\66\0\1\55\2\0"+
    "\1\56\1\0\2\57\46\0\1\10\1\0\2\10\3\0"+
    "\5\10\1\0\3\10\17\0\4\10\1\60\1\10\1\61"+
    "\1\62\5\10\10\0\1\10\1\0\2\10\3\0\5\10"+
    "\1\0\3\10\17\0\1\10\1\63\4\10\1\0\6\10"+
    "\10\0\1\10\1\0\2\10\3\0\5\10\1\0\2\10"+
    "\1\64\17\0\4\10\1\65\1\10\1\0\6\10\10\0"+
    "\1\10\1\0\2\10\3\0\5\10\1\0\3\10\17\0"+
    "\6\10\1\0\4\10\1\66\1\10\54\0\1\67\17\0"+
    "\1\10\1\0\2\10\3\0\5\10\1\0\3\10\17\0"+
    "\5\10\1\70\1\0\6\10\10\0\1\10\1\0\2\10"+
    "\3\0\5\10\1\0\3\10\17\0\1\10\1\71\4\10"+
    "\1\0\6\10\32\0\1\72\63\0\1\73\63\0\1\74"+
    "\63\0\1\75\1\76\64\0\1\77\64\0\1\100\36\0"+
    "\1\10\1\0\2\10\3\0\5\10\1\0\3\10\17\0"+
    "\1\10\1\101\4\10\1\0\6\10\10\0\1\10\1\0"+
    "\2\10\3\0\5\10\1\0\3\10\17\0\1\102\1\10"+
    "\1\103\3\10\1\0\6\10\10\0\1\10\1\0\2\10"+
    "\3\0\5\10\1\0\3\10\17\0\4\10\1\104\1\10"+
    "\1\0\6\10\10\0\1\10\1\0\2\10\3\0\5\10"+
    "\1\105\1\106\2\10\17\0\2\10\1\107\3\10\1\0"+
    "\6\10\17\0\1\110\43\0\1\111\10\0\1\10\1\0"+
    "\2\10\3\0\1\112\4\10\1\0\3\10\17\0\6\10"+
    "\1\0\5\10\1\113\2\0\2\50\1\0\1\114\60\50"+
    "\4\115\1\116\57\115\2\52\1\117\2\52\1\117\56\52"+
    "\6\0\1\53\73\0\1\120\63\0\1\121\71\0\1\122"+
    "\45\0\1\10\1\0\2\10\3\0\5\10\1\0\3\10"+
    "\17\0\6\10\1\0\1\10\1\123\4\10\51\0\1\124"+
    "\22\0\1\10\1\0\2\10\3\0\5\10\1\0\3\10"+
    "\17\0\2\10\1\125\3\10\1\0\6\10\10\0\1\10"+
    "\1\0\2\10\3\0\5\10\1\126\1\127\2\10\17\0"+
    "\3\10\1\130\2\10\1\0\6\10\10\0\1\10\1\0"+
    "\2\10\3\0\1\10\1\131\3\10\1\0\3\10\17\0"+
    "\6\10\1\0\6\10\10\0\1\10\1\0\2\10\3\0"+
    "\5\10\1\0\2\10\1\132\17\0\6\10\1\0\6\10"+
    "\10\0\1\10\1\0\2\10\3\0\5\10\1\0\3\10"+
    "\17\0\1\10\1\133\4\10\1\0\6\10\17\0\1\134"+
    "\32\0\1\135\21\0\1\10\1\0\2\10\3\0\1\136"+
    "\4\10\1\0\3\10\17\0\3\10\1\137\2\10\1\0"+
    "\6\10\10\0\1\10\1\0\2\10\3\0\5\10\1\0"+
    "\3\10\17\0\6\10\1\0\2\10\1\140\3\10\10\0"+
    "\1\10\1\0\2\10\3\0\4\10\1\141\1\0\3\10"+
    "\17\0\2\10\1\142\3\10\1\0\6\10\10\0\1\10"+
    "\1\0\2\10\3\0\5\10\1\143\1\144\2\10\17\0"+
    "\6\10\1\0\6\10\10\0\1\10\1\0\2\10\3\0"+
    "\2\10\1\145\2\10\1\0\3\10\17\0\6\10\1\0"+
    "\6\10\10\0\1\10\1\0\2\10\3\0\5\10\1\146"+
    "\1\147\2\10\17\0\1\150\5\10\1\0\6\10\52\0"+
    "\1\151\21\0\1\10\1\0\2\10\3\0\5\10\1\0"+
    "\3\10\17\0\3\10\1\152\2\10\1\0\6\10\10\0"+
    "\1\10\1\0\2\10\3\0\5\10\1\153\1\154\2\10"+
    "\17\0\6\10\1\0\6\10\22\0\1\155\51\0\1\10"+
    "\1\0\2\10\3\0\3\10\1\156\1\10\1\0\3\10"+
    "\17\0\6\10\1\0\6\10\2\0\4\115\1\157\57\115"+
    "\1\0\1\114\2\0\1\116\76\0\1\160\65\0\1\161"+
    "\67\0\1\162\106\0\1\163\21\0\1\10\1\0\2\10"+
    "\3\0\5\10\1\0\3\10\17\0\3\10\1\164\2\10"+
    "\1\0\6\10\10\0\1\10\1\0\2\10\3\0\5\10"+
    "\1\0\3\10\17\0\3\10\1\165\2\10\1\0\6\10"+
    "\10\0\1\10\1\0\2\10\3\0\2\10\1\166\2\10"+
    "\1\0\3\10\17\0\6\10\1\0\6\10\10\0\1\10"+
    "\1\0\2\10\3\0\5\10\1\0\3\10\17\0\2\10"+
    "\1\167\3\10\1\0\6\10\52\0\1\170\21\0\1\10"+
    "\1\0\2\10\3\0\5\10\1\0\3\10\17\0\3\10"+
    "\1\171\2\10\1\0\6\10\10\0\1\10\1\0\2\10"+
    "\3\0\5\10\1\0\3\10\17\0\1\10\1\172\4\10"+
    "\1\0\6\10\10\0\1\10\1\0\2\10\3\0\5\10"+
    "\1\0\3\10\17\0\6\10\1\0\3\10\1\173\2\10"+
    "\50\0\1\174\23\0\1\10\1\0\2\10\3\0\5\10"+
    "\1\0\3\10\17\0\1\10\1\175\4\10\1\0\6\10"+
    "\50\0\1\176\23\0\1\10\1\0\2\10\3\0\5\10"+
    "\1\0\3\10\17\0\1\10\1\177\4\10\1\0\6\10"+
    "\10\0\1\10\1\0\2\10\3\0\5\10\1\0\3\10"+
    "\17\0\3\10\1\200\2\10\1\0\6\10\27\0\1\201"+
    "\44\0\1\10\1\0\2\10\3\0\5\10\1\0\2\10"+
    "\1\202\17\0\6\10\1\0\6\10\3\0\1\114\76\0"+
    "\1\203\63\0\1\204\70\0\1\205\50\0\1\10\1\0"+
    "\2\10\3\0\5\10\1\0\3\10\17\0\5\10\1\206"+
    "\1\0\6\10\10\0\1\10\1\0\2\10\3\0\5\10"+
    "\1\0\2\10\1\207\17\0\6\10\1\0\6\10\10\0"+
    "\1\10\1\0\2\10\3\0\4\10\1\210\1\0\3\10"+
    "\17\0\6\10\1\0\6\10\10\0\1\10\1\0\2\10"+
    "\3\0\5\10\1\0\3\10\17\0\5\10\1\211\1\0"+
    "\6\10\16\0\1\212\55\0\1\10\1\0\2\10\3\0"+
    "\5\10\1\0\3\10\17\0\3\10\1\213\2\10\1\0"+
    "\6\10\10\0\1\10\1\0\2\10\3\0\5\10\1\214"+
    "\1\215\2\10\17\0\6\10\1\0\6\10\10\0\1\10"+
    "\1\0\2\10\3\0\5\10\1\0\3\10\17\0\6\10"+
    "\1\0\4\10\1\216\1\10\10\0\1\10\1\0\2\10"+
    "\3\0\5\10\1\0\3\10\17\0\1\217\5\10\1\0"+
    "\6\10\10\0\1\10\1\0\2\10\3\0\4\10\1\220"+
    "\1\0\3\10\17\0\6\10\1\0\6\10\10\0\1\10"+
    "\1\0\2\10\3\0\5\10\1\0\3\10\17\0\4\10"+
    "\1\221\1\10\1\0\6\10\10\0\1\10\1\0\2\10"+
    "\3\0\5\10\1\0\2\10\1\222\17\0\6\10\1\0"+
    "\6\10\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4732];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\4\1\1\11\16\1\11\11"+
    "\6\1\3\0\1\1\1\11\3\0\1\1\1\0\5\1"+
    "\1\0\2\1\7\11\4\1\1\0\2\1\1\0\1\11"+
    "\2\1\1\11\2\0\1\11\3\0\1\1\1\11\1\1"+
    "\1\0\5\1\1\11\1\0\5\1\1\0\2\1\1\0"+
    "\2\1\1\11\1\1\1\11\1\1\1\0\1\1\4\0"+
    "\1\11\4\1\1\11\3\1\1\11\1\1\1\11\2\1"+
    "\1\11\1\1\2\11\1\0\4\1\1\11\1\1\1\11"+
    "\6\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //codigo de java
    String nombre;
    public void imprimir(String dato,String cadena){
    	System.out.println(dato+" : "+cadena);
    }
    public void imprimir(String cadena){
    	System.out.println(cadena+" soy reservada");
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicoH(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 238) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { System.out.println("Error lexico: "+yytext()+ " Linea:"+(yyline+1)+" Columna:"+(yycolumn+1));
          }
        case 53: break;
        case 2: 
          { imprimir(yytext(),"soy /");return new Symbol(Simbolo.div,yycolumn,yyline,yytext());
          }
        case 54: break;
        case 3: 
          { /* Se ignoran */
          }
        case 55: break;
        case 4: 
          { imprimir(yytext(),"soy *");return new Symbol(Simbolo.mul,yycolumn,yyline,yytext());
          }
        case 56: break;
        case 5: 
          { imprimir(yytext(),"soy numero");return new Symbol(Simbolo.numero,yycolumn,yyline,yytext());
          }
        case 57: break;
        case 6: 
          { imprimir(yytext(),"soy iden");return new Symbol(Simbolo.iden,yycolumn,yyline,yytext());
          }
        case 58: break;
        case 7: 
          { imprimir(yytext(),"soy +");return new Symbol(Simbolo.mas,yycolumn,yyline,yytext());
          }
        case 59: break;
        case 8: 
          { imprimir(yytext(),"soy -");return new Symbol(Simbolo.menos,yycolumn,yyline,yytext());
          }
        case 60: break;
        case 9: 
          { imprimir(yytext(),"soy mayor");return new Symbol(Simbolo.mayor,yycolumn,yyline,yytext());
          }
        case 61: break;
        case 10: 
          { imprimir(yytext(),"soy menor");return new Symbol(Simbolo.menor,yycolumn,yyline,yytext());
          }
        case 62: break;
        case 11: 
          { imprimir(yytext());return new Symbol(Simbolo.igual,yycolumn,yyline,yytext());
          }
        case 63: break;
        case 12: 
          { imprimir(yytext(),"soy corInicio");return new Symbol(Simbolo.corInicio,yycolumn,yyline,yytext());
          }
        case 64: break;
        case 13: 
          { imprimir(yytext(),"soy corFin");return new Symbol(Simbolo.corFin,yycolumn,yyline,yytext());
          }
        case 65: break;
        case 14: 
          { imprimir(yytext(),"soy corFin");return new Symbol(Simbolo.dolar,yycolumn,yyline,yytext());
          }
        case 66: break;
        case 15: 
          { imprimir(yytext(),"soy llaveInicio");return new Symbol(Simbolo.llaveInicio,yycolumn,yyline,yytext());
          }
        case 67: break;
        case 16: 
          { imprimir(yytext(),"soy llaveFin");return new Symbol(Simbolo.llaveFin,yycolumn,yyline,yytext());
          }
        case 68: break;
        case 17: 
          { imprimir(yytext(),"soy dosPuntos");return new Symbol(Simbolo.dosPuntos,yycolumn,yyline,yytext());
          }
        case 69: break;
        case 18: 
          { imprimir(yytext(),"soy coma");return new Symbol(Simbolo.coma,yycolumn,yyline,yytext());
          }
        case 70: break;
        case 19: 
          { imprimir(yytext(),"soy parenInicio");return new Symbol(Simbolo.parenInicio,yycolumn,yyline,yytext());
          }
        case 71: break;
        case 20: 
          { imprimir(yytext(),"soy parenFin");return new Symbol(Simbolo.parenFin,yycolumn,yyline,yytext());
          }
        case 72: break;
        case 21: 
          { imprimir(yytext());return new Symbol(Simbolo.concatenar,yycolumn,yyline,yytext());
          }
        case 73: break;
        case 22: 
          { imprimir(yytext(),"soy mayorIgual");return new Symbol(Simbolo.mayorIgual,yycolumn,yyline,yytext());
          }
        case 74: break;
        case 23: 
          { imprimir(yytext(),"soy menorIgual");return new Symbol(Simbolo.menorIgual,yycolumn,yyline,yytext());
          }
        case 75: break;
        case 24: 
          { imprimir(yytext(),"soy igualIgual");return new Symbol(Simbolo.igualIgual,yycolumn,yyline,yytext());
          }
        case 76: break;
        case 25: 
          { imprimir(yytext(),"soy noIgual");return new Symbol(Simbolo.noIgual,yycolumn,yyline,yytext());
          }
        case 77: break;
        case 26: 
          { imprimir(yytext());return new Symbol(Simbolo.indice,yycolumn,yyline,yytext());
          }
        case 78: break;
        case 27: 
          { imprimir(yytext(),"soy or");return new Symbol(Simbolo.or,yycolumn,yyline,yytext());
          }
        case 79: break;
        case 28: 
          { imprimir(yytext(),"soy and");return new Symbol(Simbolo.and,yycolumn,yyline,yytext());
          }
        case 80: break;
        case 29: 
          { imprimir(yytext());return new Symbol(Simbolo.si,yycolumn,yyline,yytext());
          }
        case 81: break;
        case 30: 
          { imprimir(yytext(),"soy cadena");return new Symbol(Simbolo.cadena,yycolumn,yyline,yytext());
          }
        case 82: break;
        case 31: 
          { imprimir(yytext());return new Symbol(Simbolo.max,yycolumn,yyline,yytext());
          }
        case 83: break;
        case 32: 
          { imprimir(yytext());return new Symbol(Simbolo.min,yycolumn,yyline,yytext());
          }
        case 84: break;
        case 33: 
          { imprimir(yytext());return new Symbol(Simbolo.par,yycolumn,yyline,yytext());
          }
        case 85: break;
        case 34: 
          { imprimir(yytext());return new Symbol(Simbolo.sum,yycolumn,yyline,yytext());
          }
        case 86: break;
        case 35: 
          { imprimir(yytext());return new Symbol(Simbolo.let,yycolumn,yyline,yytext());
          }
        case 87: break;
        case 36: 
          { imprimir(yytext());return new Symbol(Simbolo.end,yycolumn,yyline,yytext());
          }
        case 88: break;
        case 37: 
          { imprimir(yytext());return new Symbol(Simbolo.asc,yycolumn,yyline,yytext());
          }
        case 89: break;
        case 38: 
          { imprimir(yytext());return new Symbol(Simbolo.ans,yycolumn,yyline,yytext());
          }
        case 90: break;
        case 39: 
          { imprimir(yytext());return new Symbol(Simbolo.desc,yycolumn,yyline,yytext());
          }
        case 91: break;
        case 40: 
          { imprimir(yytext());return new Symbol(Simbolo.decc,yycolumn,yyline,yytext());
          }
        case 92: break;
        case 41: 
          { imprimir(yytext());return new Symbol(Simbolo.then,yycolumn,yyline,yytext());
          }
        case 93: break;
        case 42: 
          { imprimir(yytext());return new Symbol(Simbolo.succ,yycolumn,yyline,yytext());
          }
        case 94: break;
        case 43: 
          { imprimir(yytext());return new Symbol(Simbolo.sino,yycolumn,yyline,yytext());
          }
        case 95: break;
        case 44: 
          { imprimir(yytext());return new Symbol(Simbolo.caso,yycolumn,yyline,yytext());
          }
        case 96: break;
        case 45: 
          { imprimir(yytext());return new Symbol(Simbolo.impr,yycolumn,yyline,yytext());
          }
        case 97: break;
        case 46: 
          { imprimir(yytext(),"soy %");return new Symbol(Simbolo.mod,yycolumn,yyline,yytext());
          }
        case 98: break;
        case 47: 
          { imprimir(yytext(),"soy ^");return new Symbol(Simbolo.pot,yycolumn,yyline,yytext());
          }
        case 99: break;
        case 48: 
          { imprimir(yytext(),"soy ^");return new Symbol(Simbolo.sqrt,yycolumn,yyline,yytext());
          }
        case 100: break;
        case 49: 
          { imprimir(yytext());return new Symbol(Simbolo.revers,yycolumn,yyline,yytext());
          }
        case 101: break;
        case 50: 
          { imprimir(yytext());return new Symbol(Simbolo.length,yycolumn,yyline,yytext());
          }
        case 102: break;
        case 51: 
          { imprimir(yytext());return new Symbol(Simbolo.product,yycolumn,yyline,yytext());
          }
        case 103: break;
        case 52: 
          { imprimir(yytext());return new Symbol(Simbolo.calcular,yycolumn,yyline,yytext());
          }
        case 104: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(Simbolo.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
