package Haskell.Analisis;
import Graphik.Ast.*;
import Interfaz.Inicio;

import java_cup.runtime.*;

parser code
{:
    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        System.out.println("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "
        +s.value + " no reconocido." );
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error en la Línea " + (s.right+1)+ "Columna "+(s.left+1)+". Identificador " +
        s.value + " no reconocido.");
    }
:}


/*terminales de simbolos reservados*/
terminal String corInicio,corFin,llaveInicio,llaveFin,dosPuntos,igual,coma,parenFin,parenInicio,salto;
terminal String puntoComa;

/*Sentencias de control*/
terminal String si,then,sino,caso,iden,end,dolar,calcular;

/*funciones propias del lenguaje*/
terminal String let,ans,succ,decc,min,max,concatenar,indice,sum,product,revers,impr;
terminal String par,asc,desc,length;

/* simbolos de operaciones aritmeticas. */
terminal String mas, menos, mul, div,mod,pot,sqrt;

/*simbolos de operaciones relacionales*/
terminal String mayor,menor,igualIgual,mayorIgual,menorIgual,noIgual;

/*simbolos de operaciones logicas*/
terminal String or,and;

/*
* Este terminal tiene un valor string. Recuerda que le dábamos el valor
* en el código del analizador léxico, al darle como parámetro un valor
* string al objeto Symbolo.
*/
/*Contiene el valor del tipo de dato especifico*/
terminal String numero,cadena,entero,caracter;

/*
* Aquí están los no terminales
*/

non terminal Nodo EXPA,EXPL,EXPR,DATO;
non terminal Nodo INICIO,CALCULAR,LISTA,VALORES;
non terminal Nodo ARRAY,ARRAY2,SENTENCIAS,SENTENCIA,EXPC;
non terminal Nodo INDICE,ACCESO,SIMPLIFICADA,TIPOSIMPLIFICADA,VALOREXP;
non terminal Nodo FUNCION,PARAMETROS,PARAMETROSTAR,LLAMADA,SI,CASO,CASOS,SELECCIONAR,VALORCASE;
non terminal Nodo SALTOS,OPERACIONLISTA,TIPOOPERACIONLISTA,OPERACIONLISTA2,TIPOOPERACIONLISTA2;
non terminal Nodo CONCA,TIPOLISTA,TIPOVALOR,VALORESSTAR,TIPOVALORPARA,VALORESPARA;

/* Precedences */
precedence left mas, menos;
precedence left mul, div,mod;
precedence left pot,sqrt;
precedence left parenInicio,parenFin;
precedence left igualIgual,mayor,menor,mayorIgual,menorIgual,noIgual;
precedence left or;
precedence left and;

precedence left sum,max,min,product,length,revers,impr,par,asc,desc;
precedence left concatenar;

/* ­­­­­­­­­­­­­­ Declaración de la gramática  ­­­­­­­­­­­ */
start with INICIO; // start with sirve para indicarle al parser con que produccion empezar

INICIO::=FUNCION:funcion {:
	RESULT=funcion;
	Inicio.raiz=funcion;
	:}
	|SENTENCIA:val {:RESULT=val;
	Inicio.raiz=val;
	:};

//expresiones artmeticas---falta llamada metodo,aumento y decremento
EXPA::=EXPA:d1 mas:op EXPA:d2 {:RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);:}
    |EXPA:d1 menos:op EXPA:d2 {:RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);:}
    |EXPA:d1 mul:op EXPA:d2 {:RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);:}
    |EXPA:d1 div:op EXPA:d2 {:RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);:}
    |EXPA:d1 pot:op EXPA:d2 {:RESULT=new Nodo("^",opright,opleft);RESULT.add(d1);RESULT.add(d2);:}
    |EXPA:d1 sqrt:op EXPA:d2 {:RESULT=new Nodo("sqrt",opright,opleft);RESULT.add(d1);RESULT.add(d2);:}
    |EXPA:d1 mod:op EXPA:d2 {:RESULT=new Nodo("mod",opright,opleft);RESULT.add(d1);RESULT.add(d2);:}
    |parenInicio EXPA:d1 parenFin {:RESULT=d1;:}
    |menos:op EXPA:d1 {:RESULT=new Nodo("-",opright,opleft);RESULT.add(d1);:}
    |DATO:d1 {:RESULT=d1;:}  
    |VALOREXP:val {:RESULT=val;:} 
    |iden:id1 {:RESULT=new Nodo("id",id1,id1right,id1left);:};

EXPC::=iden:id {:RESULT=new Nodo("id",id,idright,idleft);:}
	|VALOREXP:val {:RESULT=val;:};
}

EXPR::=EXPC:d1 igualIgual:op EXPC:d2 {:RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);:}
    |EXPC:d1 mayor:op EXPC:d2 {:RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);:}
    |EXPC:d1 menor:op EXPC:d2 {:RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);:}
    |EXPC:d1 mayorIgual:op EXPC:d2 {:RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);:}
    |EXPC:d1 menorIgual:op EXPC:d2 {:RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);:}
    |EXPC:d1 noIgual:op EXPC:d2 {:RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);:}
    |EXPA:d1 {:RESULT=d1;:};

EXPL::=EXPL:d1 and:op EXPL:d2 {:RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);:}
    |EXPL:d1 or:op EXPL:d2 {:RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);:}
    |parenInicio EXPL:d1 parenFin {:RESULT=d1;:}
    |EXPR:d1 {:RESULT=d1;:};

DATO::=numero:dato {:RESULT=new Nodo("numero",dato,datoright,datoleft);:}
    |cadena:dato {:RESULT=new Nodo("cadena",dato,datoright,datoleft);:};


SALTOS::=SALTOS salto
		|salto;

//devuelven un valor numerico
CALCULAR::=dolar calcular:cal EXPA:exp dolar{:
		RESULT=new Nodo("calcular",calright,calleft);
		RESULT.add(exp);
		:};

SIMPLIFICADA::=dolar TIPOSIMPLIFICADA:tipo CALCULAR:cal dolar {:
		RESULT=new Nodo(tipo.etiqueta,tipo.linea-1,tipo.columna-1);
		RESULT.add(cal); 
		:};

TIPOSIMPLIFICADA::=succ:tipo {:RESULT=new Nodo("succ",tiporight,tipoleft);:}
				|decc:tipo {:RESULT=new Nodo("decc",tiporight,tipoleft);:};

VALOREXP::=SIMPLIFICADA:val {:RESULT=val;:} //decc,succ
		|ACCESO:val {:RESULT=val;:} //indice matriz o vector
		|CALCULAR:val {:RESULT=val;:} //calcular
		|OPERACIONLISTA:val {:RESULT=val;:}; //min,max,sum,product,length

//devuelve un valor y es operacion con listas

OPERACIONLISTA::=dolar TIPOOPERACIONLISTA:tipo TIPOLISTA:lista dolar {:
	RESULT=new Nodo(tipo.etiqueta,tipo.linea-1,tipo.columna-1);
	RESULT.add(lista);
	:};


TIPOOPERACIONLISTA::=min:cad {:RESULT=new Nodo("min",cadright,cadleft);:}
					|max:cad {:RESULT=new Nodo("max",cadright,cadleft);:}
					|sum:cad {:RESULT=new Nodo("sum",cadright,cadleft);:}
					|product:cad {:RESULT=new Nodo("product",cadright,cadleft);:}
					|length:cad {:RESULT=new Nodo("length",cadright,cadleft);:};


//----------------------------------------------		

//devuelve una lista y es operacion con listas
OPERACIONLISTA2::=dolar TIPOOPERACIONLISTA2:tipo TIPOLISTA:lista dolar {:
	RESULT=new Nodo(tipo.etiqueta,tipo.linea-1,tipo.columna-1);
	RESULT.add(lista);
	:};

TIPOOPERACIONLISTA2::=revers:cad {:RESULT=new Nodo("revers",cadright,cadleft);:}
					|impr:cad {:RESULT=new Nodo("impr",cadright,cadleft);:}
					|par:cad {:RESULT=new Nodo("par",cadright,cadleft);:}
					|asc:cad {:RESULT=new Nodo("asc",cadright,cadleft);:}
					|desc:cad {:RESULT=new Nodo("desc",cadright,cadleft);:};
					
TIPOLISTA::=iden:id {:RESULT=new Nodo("id",id,idright,idleft);:}
			|ARRAY:val {:RESULT=val;:}
			|OPERACIONLISTA2:val {:RESULT=val;:}
			|CONCA:val {:RESULT=val;:}
			|cadena:cad {:RESULT=new Nodo("cadena",cad,cadright,cadleft);:};

CONCA::=dolar TIPOLISTA:val1 concatenar TIPOLISTA:val2 dolar {:
	RESULT=new Nodo("concatenar",val1.linea-1,val2.columna-1);
	RESULT.add(val1);
	RESULT.add(val2);
	:};

//-----------------------------------------------------
//declaracion de listas
LISTA::= dolar let iden:id igual TIPOLISTA:val dolar {:
	RESULT=new Nodo("declaracionLista",id,idright,idleft);
	RESULT.add(val);
	:}; 

ARRAY::=corInicio VALORES:listas corFin {:RESULT=listas;:}
		|corInicio ARRAY2:lista corFin {:RESULT=lista;:};

ARRAY2::=ARRAY2:lista coma ARRAY:val {:RESULT=lista;
		RESULT.add(val);
		:}
		|ARRAY:val {:
		RESULT=new Nodo("listaValores",val.linea-1,val.columna-1);
		RESULT.add(val);
		:};

VALORES::=VALORES:lista coma TIPOVALOR:val {:RESULT=lista;
		RESULT.add(val);
		:}
		|TIPOVALOR:val {:
		RESULT=new Nodo("valores",val.linea-1,val.columna-1);
		RESULT.add(val);
		:};

TIPOVALOR::=CALCULAR:val {:RESULT=val;:}
			|iden:id {:RESULT=new Nodo("id",id,idright,idleft);:}
			|caracter:val {:RESULT=new Nodo("caracter",val,valright,valleft);:};
//------------fin declaracion listas		


//acceso a listas
ACCESO::=dolar iden:id INDICE:indice dolar {:
	RESULT=new Nodo("acceso",id,idright,idleft);
	RESULT.add(indice);
	:};		

INDICE::=INDICE:lista indice numero:num {:RESULT=lista;
		Nodo indice=new Nodo("numero",num,numright,numleft);
		RESULT.add(indice);
		:}
		|indice:ind numero:num {:
		Nodo indice=new Nodo("numero",num,numright,numleft);
		RESULT=new Nodo("indices",indright,indleft);
		RESULT.add(indice);
		:};
//---------------fin acceso a listas

SENTENCIAS::=SENTENCIAS:sents SALTOS SENTENCIA:sent {:RESULT=sents;
			RESULT.add(sent);
			:}
			|SENTENCIA:sent {:RESULT=new Nodo("sentencias",sent.linea-1,sent.columna-1);
			RESULT.add(sent);
			:};

SENTENCIA::=CALCULAR:sent {:RESULT=sent;:}
			|LLAMADA:sent {:RESULT=sent;:} 
			|SI:sent {:RESULT=sent;:} 
			|SELECCIONAR:sent {:RESULT=sent;:}
			|LISTA:sent {:RESULT=sent;:}
			|ACCESO:sent {:RESULT=sent;:}
			|SIMPLIFICADA:sent {:RESULT=sent;:}
			|OPERACIONLISTA:sent {:RESULT=sent;:}
			|OPERACIONLISTA2:sent {:RESULT=sent;:}
			|CONCA:sent {:RESULT=sent;:}
			|ans:ans {:RESULT=new Nodo("ans",ans,ansright,ansleft);:};

//funcion
FUNCION::=iden:id PARAMETROSTAR:par igual SENTENCIAS:sent1 SALTOS end SALTOS{:
		Nodo funcion=new Nodo("funcion",id,idright,idright);
		funcion.add(par);
		funcion.add(sent1);
		RESULT=funcion;
		:};

PARAMETROSTAR::=PARAMETROS:par {:RESULT=par;:}
			|;

PARAMETROS::=PARAMETROS:para coma iden:id {:RESULT=para;
			Nodo par=new Nodo("id",id,idright,idleft);
			RESULT.add(par);
			:}
			|iden:id {:RESULT=new Nodo("parametros",idright,idleft);
			Nodo par=new Nodo("id",id,idright,idleft);
			RESULT.add(par);
			:};

LLAMADA::=dolar iden:id llaveInicio VALORESSTAR:parametros llaveFin dolar {:
		RESULT=new Nodo("llamada",id,idright,idleft);
		RESULT.add(parametros);
		:};

VALORESSTAR::=VALORESPARA:val {:RESULT=val;:}
			|;

VALORESPARA::=VALORESPARA:para coma TIPOVALORPARA:val {:RESULT=para;
			RESULT.add(val);
			:}
			|TIPOVALORPARA:val {:
				RESULT=new Nodo("valorParametros",val.linea-1,val.columna-1);
				RESULT.add(val);
				:};

TIPOVALORPARA::=CALCULAR:cal {:RESULT=cal;:}
			|iden:id {:RESULT=new Nodo("id",id,idright,idleft);:}
			|ARRAY:val {:RESULT=val;:}
			|cadena:cad {:RESULT=new Nodo("cadena",cad,cadright,cadleft);:};

SI::=si:si EXPL:exp then SALTOS SENTENCIAS:sent SALTOS sino SALTOS SENTENCIAS:sentSino SALTOS end {:
	Nodo sentSi=new Nodo("if",siright,sileft);
	Nodo condicion=new Nodo("condicion",exp.linea-1,exp.columna-1);
	condicion.add(exp);
	sentSi.add(condicion);
	sentSi.add(sent);
	sentSi.add(sentSino);
	RESULT=sentSi;
	:};

SELECCIONAR::= caso:caso EXPA:exp SALTOS CASOS:casos  end {:
	RESULT=new Nodo("switch",casoright,casoleft);
	RESULT.add(exp);
	RESULT.add(casos);
	:};

CASOS::=CASOS:lista CASO:caso {:RESULT=lista;
		RESULT.add(caso);
		:}
		|CASO:caso {:
		RESULT=new Nodo("cases",caso.linea-1,caso.columna-1);
		RESULT.add(caso);
		:};

CASO::=VALORCASE:val dosPuntos SENTENCIAS:sent puntoComa SALTOS {:
	RESULT=new Nodo("case",val.linea-1,val.columna-1);
	RESULT.add(val);
	RESULT.add(sent);
	:};

VALORCASE::=numero:num {:RESULT=new Nodo("numero",num,numright,numleft);:}
		|cadena:cad {:RESULT=new Nodo("cadena",cad,cadright,cadleft);:};