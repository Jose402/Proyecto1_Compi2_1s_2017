/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Servidor.Interfaz;

import Interfaz.Inicio;
import static Interfaz.Inicio.usuario;
import Servidor.Conexion;
import Servidor.Proyecto;
import Servidor.Respuesta;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.awt.Toolkit;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author Jose2
 */
public class VentanaImportar extends javax.swing.JFrame {

    /**
     * Creates new form VentanaImportar
     */
    private ArrayList<Proyecto> proyectos;
    private Inicio inicio;

    public VentanaImportar() {
        initComponents();
    }

    public VentanaImportar(Inicio inicio) {
        initComponents();
        this.inicio = inicio;
        setTitle("Importar/Exportar Proyecto");
        setResizable(false);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/Media/openproject_1078.png")));
        proyectos = new ArrayList();
        listarProyectos();
    }

    private void listarProyectos() {
        comboProyectos.removeAll();
        proyectos.clear();
        Conexion conexion = new Conexion();
        Respuesta respuesta = conexion.enviar("listarProyectos", usuario);

        if (respuesta == null) {
            JOptionPane.showMessageDialog(null, "Surgio un problema al momento de actualizar el repositorio", "", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        if (respuesta.estado) {
            Gson gson = new Gson();
            java.lang.reflect.Type tipo = new TypeToken<List<Proyecto>>() {
            }.getType();
            ArrayList<Proyecto> lista = gson.fromJson(respuesta.dato.toString(), tipo);
            proyectos = lista;
            for (Proyecto proyecto : lista) {
                comboProyectos.addItem(proyecto.nombre);
            }
        } else {
            JOptionPane.showMessageDialog(null, "La aplicacion no pudo conectarse al servidor", "", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        comboProyectos = new javax.swing.JComboBox<>();
        btnImportar = new javax.swing.JButton();
        btnExportar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        comboProyectos.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        comboProyectos.setToolTipText("");

        btnImportar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnImportar.setText("Impotar Proyecto");
        btnImportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportarActionPerformed(evt);
            }
        });

        btnExportar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnExportar.setText("Exportar Proyecto");
        btnExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboProyectos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnImportar, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExportar, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(comboProyectos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnImportar)
                    .addComponent(btnExportar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportarActionPerformed
        // TODO add your handling code here:
        exportar();
    }//GEN-LAST:event_btnExportarActionPerformed

    private void exportar() {
        if (proyectos.size() > 0) {
            Conexion conexion = new Conexion();
            String nombre = comboProyectos.getSelectedItem().toString();
            Proyecto proyecto = getProyecto(nombre);
            if (Inicio.interprete == null) {
                JOptionPane.showMessageDialog(null, "No se han cargado funciones haskell++ a memoria", "", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            proyecto.contenido += Inicio.interprete.contenido;
            Respuesta respuesta = conexion.enviar("exportar", proyecto);
            if (respuesta.estado) {
                JOptionPane.showMessageDialog(null, "Se cargaron las funciones al proyecto " + proyecto.nombre + " correctamente", "", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "Ocurrio un error al momento de cargar las funciones", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Aun no se han creado proyectos", "", JOptionPane.INFORMATION_MESSAGE);
        }

    }

    private void importar() {
        listarProyectos();
        if (proyectos.size() > 0) {
            Conexion conexion = new Conexion();
            String nombre = comboProyectos.getSelectedItem().toString();
            Proyecto proyecto = getProyecto(nombre);
            if (proyecto.contenido.equals("")) {
                JOptionPane.showMessageDialog(null, "El repositorio " + proyecto.nombre + " aun no tiene funciones", "", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            inicio.crearPestania(proyecto.contenido, proyecto.nombre + ".hk", null);
            //crearPestania(String texto, String nombre, File file);
            //System.out.println(proyecto.contenido);
        } else {
            JOptionPane.showMessageDialog(null, "Aun no se han creado proyectos", "", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private Proyecto getProyecto(String nombre) {
        for (Proyecto proyecto : proyectos) {
            if (proyecto.nombre.equals(nombre)) {
                return proyecto;
            }
        }
        return null;
    }

    private void btnImportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportarActionPerformed
        // TODO add your handling code here:
        importar();
    }//GEN-LAST:event_btnImportarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaImportar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaImportar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaImportar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaImportar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaImportar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExportar;
    private javax.swing.JButton btnImportar;
    private javax.swing.JComboBox<String> comboProyectos;
    // End of variables declaration//GEN-END:variables
}
