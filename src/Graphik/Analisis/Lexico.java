/* The following code was generated by JFlex 1.6.1 */
package Graphik.Analisis;

import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1 from the specification file
 * <tt>src/Graphik/Analisis/Scanner.jflex</tt>
 */
public class Lexico implements java_cup.runtime.Scanner {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l at the
     * beginning of a line l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
        0, 0
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED
            = "\11\0\1\70\1\7\1\71\1\70\1\2\22\0\1\70\1\40\1\6"
            + "\1\1\1\0\1\33\1\42\1\15\1\46\1\47\1\32\1\30\1\45"
            + "\1\31\1\5\1\3\1\4\1\4\10\4\1\43\1\44\1\36\1\37"
            + "\1\35\1\55\1\0\1\22\1\65\1\64\1\21\1\17\1\24\1\12"
            + "\1\67\1\57\1\10\1\14\1\25\1\60\1\63\1\23\1\61\1\10"
            + "\1\20\1\27\1\62\1\66\1\16\4\10\1\50\1\0\1\51\1\34"
            + "\1\11\1\0\1\22\1\65\1\64\1\21\1\17\1\24\1\12\1\67"
            + "\1\57\1\10\1\14\1\25\1\60\1\63\1\23\1\61\1\10\1\20"
            + "\1\27\1\62\1\66\1\16\4\10\1\52\1\41\1\53\7\0\1\71"
            + "\71\0\1\54\21\0\1\10\37\0\1\10\76\0\2\56\115\0\1\26"
            + "\u1ea8\0\1\71\1\71\u0100\0\1\13\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0
            = "\1\0\2\1\1\2\1\3\1\4\1\5\1\1\2\6"
            + "\1\1\7\6\1\1\1\6\1\7\1\10\1\11\1\12"
            + "\1\13\1\14\1\15\1\16\1\17\2\1\1\20\1\21"
            + "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"
            + "\1\32\1\1\10\6\2\2\1\33\1\0\1\34\1\0"
            + "\1\6\1\0\12\6\1\0\1\35\1\6\1\35\1\36"
            + "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"
            + "\2\0\2\6\1\0\13\6\1\2\2\0\1\6\1\47"
            + "\1\6\1\50\7\6\2\51\2\6\2\0\2\6\3\0"
            + "\3\6\1\0\2\6\1\0\7\6\1\0\6\6\1\2"
            + "\1\0\1\52\2\6\1\0\4\6\1\0\3\6\1\0"
            + "\2\6\1\0\1\53\1\6\1\53\4\0\4\6\1\0"
            + "\3\6\1\0\1\6\1\54\5\6\2\55\2\6\1\56"
            + "\2\6\1\2\2\6\2\57\3\6\1\0\1\6\2\60"
            + "\1\61\2\62\1\6\1\0\1\6\4\0\4\6\1\0"
            + "\3\6\1\0\1\6\1\0\1\6\1\0\1\6\1\63"
            + "\3\6\1\0\2\6\1\64\1\0\2\6\1\65\2\6"
            + "\1\0\3\6\1\66\1\0\1\6\2\0\1\67\1\0"
            + "\2\6\1\67\1\6\1\0\2\6\1\0\1\6\1\0"
            + "\1\6\1\0\1\6\1\0\2\6\1\70\1\6\1\0"
            + "\1\6\1\71\1\0\3\6\1\72\2\73\3\6\1\0"
            + "\1\6\3\0\3\6\1\0\1\6\1\0\1\6\1\0"
            + "\1\6\2\74\2\75\1\0\2\6\1\76\1\0\1\6"
            + "\1\0\1\6\1\77\2\6\2\100\1\0\1\6\1\101"
            + "\1\102\1\0\1\101\1\102\1\6\2\103\1\0\1\6"
            + "\2\104\2\105\1\106\1\0\1\6\1\0\1\6\1\107"
            + "\1\110\2\111\1\0\1\6\2\112\2\113\1\0\1\6"
            + "\2\114\1\0\1\6\1\0\1\6\1\0\1\6\1\0"
            + "\1\6\1\0\1\6\1\0\1\6\2\115";

    private static int[] zzUnpackAction() {
        int[] result = new int[364];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0
            = "\0\0\0\72\0\164\0\256\0\72\0\350\0\72\0\u0122"
            + "\0\u015c\0\u0196\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2"
            + "\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\72\0\72"
            + "\0\72\0\u0488\0\u04c2\0\u04fc\0\u0536\0\u0570\0\u05aa\0\72"
            + "\0\72\0\72\0\72\0\72\0\72\0\72\0\72\0\72"
            + "\0\72\0\72\0\u05e4\0\u061e\0\u0658\0\u0692\0\u06cc\0\u0706"
            + "\0\u0740\0\u077a\0\u07b4\0\u07ee\0\u0828\0\u0862\0\u0122\0\72"
            + "\0\u089c\0\u08d6\0\u0910\0\u094a\0\u0984\0\u09be\0\u09f8\0\u0a32"
            + "\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02"
            + "\0\u0c3c\0\72\0\72\0\72\0\72\0\72\0\72\0\72"
            + "\0\72\0\72\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e\0\u0d98"
            + "\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68"
            + "\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a\0\u10c4\0\72\0\u10fe"
            + "\0\u015c\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u125a\0\u1294"
            + "\0\72\0\u015c\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0"
            + "\0\u142a\0\u1464\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586\0\u15c0"
            + "\0\u15fa\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756\0\u1790"
            + "\0\u17ca\0\u1804\0\u183e\0\u1878\0\u18b2\0\u18ec\0\u1926\0\u1960"
            + "\0\u199a\0\u19d4\0\72\0\u1a0e\0\u1a48\0\u1a82\0\u1abc\0\u1af6"
            + "\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18\0\u1c52\0\u1c8c\0\u1cc6"
            + "\0\u1d00\0\u1d3a\0\72\0\u1d74\0\u015c\0\u1dae\0\u1de8\0\u1e22"
            + "\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8\0\u1ff2"
            + "\0\u202c\0\u2066\0\u20a0\0\u015c\0\u20da\0\u2114\0\u214e\0\u2188"
            + "\0\u21c2\0\72\0\u015c\0\u21fc\0\u2236\0\u015c\0\u2270\0\u22aa"
            + "\0\72\0\u22e4\0\u231e\0\72\0\u015c\0\u2358\0\u2392\0\u23cc"
            + "\0\u2406\0\u2440\0\72\0\u015c\0\u247a\0\72\0\u015c\0\u24b4"
            + "\0\u24ee\0\u2528\0\u2562\0\u259c\0\u25d6\0\u2610\0\u264a\0\u2684"
            + "\0\u26be\0\u26f8\0\u2732\0\u276c\0\u27a6\0\u27e0\0\u281a\0\u2854"
            + "\0\u288e\0\u28c8\0\u2902\0\u293c\0\u015c\0\u2976\0\u29b0\0\u29ea"
            + "\0\u2a24\0\u2a5e\0\u2a98\0\u015c\0\u2ad2\0\u2b0c\0\u2b46\0\u015c"
            + "\0\u2b80\0\u2bba\0\u2bf4\0\u2c2e\0\u2c68\0\u2ca2\0\u2cdc\0\u2d16"
            + "\0\u2d50\0\u2d8a\0\u2dc4\0\72\0\u2dfe\0\u2e38\0\u2e72\0\u015c"
            + "\0\u2eac\0\u2ee6\0\u2f20\0\u2f5a\0\u2f94\0\u2fce\0\u3008\0\u3042"
            + "\0\u307c\0\u30b6\0\u30f0\0\u312a\0\u3164\0\u015c\0\u319e\0\u31d8"
            + "\0\u3212\0\u015c\0\u324c\0\u3286\0\u32c0\0\u32fa\0\u015c\0\72"
            + "\0\u015c\0\u3334\0\u336e\0\u33a8\0\u33e2\0\u341c\0\u3456\0\u3490"
            + "\0\u34ca\0\u3504\0\u353e\0\u3578\0\u35b2\0\u35ec\0\u3626\0\u3660"
            + "\0\u369a\0\u36d4\0\72\0\u015c\0\72\0\u015c\0\u370e\0\u3748"
            + "\0\u3782\0\u015c\0\u37bc\0\u37f6\0\u3830\0\u386a\0\u015c\0\u38a4"
            + "\0\u38de\0\72\0\u015c\0\u3918\0\u3952\0\72\0\72\0\u398c"
            + "\0\u015c\0\u015c\0\u39c6\0\72\0\u015c\0\u3a00\0\u3a3a\0\72"
            + "\0\u015c\0\72\0\u015c\0\u015c\0\u3a74\0\u3aae\0\u3ae8\0\u3b22"
            + "\0\u015c\0\u015c\0\72\0\u015c\0\u3b5c\0\u3b96\0\72\0\u015c"
            + "\0\72\0\u015c\0\u3bd0\0\u3c0a\0\72\0\u015c\0\u3c44\0\u3c7e"
            + "\0\u3cb8\0\u3cf2\0\u3d2c\0\u3d66\0\u3da0\0\u3dda\0\u3e14\0\u3e4e"
            + "\0\u3e88\0\u3ec2\0\72\0\u015c";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[364];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0
            = "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\4"
            + "\1\11\1\2\1\12\1\2\1\11\1\13\1\14\1\15"
            + "\1\16\1\17\1\20\1\11\1\21\1\22\1\23\1\24"
            + "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"
            + "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"
            + "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"
            + "\1\55\1\56\1\57\1\60\1\61\1\62\1\11\1\63"
            + "\1\4\73\0\2\64\1\0\1\65\3\64\1\0\62\64"
            + "\2\0\1\4\4\0\1\4\60\0\1\4\5\0\1\6"
            + "\1\66\64\0\6\67\2\70\62\67\4\0\1\11\1\71"
            + "\2\0\3\11\1\0\1\11\1\0\10\11\1\0\1\11"
            + "\27\0\11\11\6\0\1\11\1\71\2\0\3\11\1\0"
            + "\1\11\1\0\2\11\1\72\5\11\1\0\1\11\27\0"
            + "\11\11\2\0\72\73\4\0\1\11\1\71\2\0\3\11"
            + "\1\0\1\11\1\0\1\11\1\74\2\11\1\75\3\11"
            + "\1\0\1\11\27\0\11\11\6\0\1\11\1\71\2\0"
            + "\3\11\1\0\1\11\1\0\10\11\1\0\1\11\27\0"
            + "\4\11\1\76\4\11\6\0\1\11\1\71\2\0\3\11"
            + "\1\0\1\11\1\0\1\11\1\77\6\11\1\0\1\11"
            + "\27\0\11\11\6\0\1\11\1\71\2\0\3\11\1\0"
            + "\1\11\1\0\1\11\1\100\2\11\1\101\1\102\2\11"
            + "\1\0\1\11\27\0\11\11\6\0\1\11\1\71\2\0"
            + "\3\11\1\0\1\11\1\0\7\11\1\103\1\0\1\11"
            + "\27\0\11\11\6\0\1\11\1\71\2\0\3\11\1\0"
            + "\1\11\1\0\4\11\1\104\3\11\1\0\1\11\27\0"
            + "\11\11\6\0\1\11\1\71\2\0\3\11\1\0\1\11"
            + "\1\0\7\11\1\105\1\0\1\11\27\0\11\11\21\0"
            + "\1\106\36\0\2\107\16\0\1\11\1\71\2\0\3\11"
            + "\1\0\1\11\1\0\1\11\1\110\6\11\1\0\1\11"
            + "\26\0\1\107\1\111\10\11\32\0\1\112\72\0\1\113"
            + "\77\0\1\114\71\0\1\115\71\0\1\116\71\0\1\117"
            + "\73\0\1\120\71\0\1\121\1\122\107\0\1\123\2\0"
            + "\1\124\12\0\1\11\1\71\2\0\3\11\1\0\1\11"
            + "\1\0\10\11\1\0\1\11\27\0\1\11\1\125\2\11"
            + "\1\126\4\11\6\0\1\11\1\71\2\0\3\11\1\0"
            + "\1\11\1\0\10\11\1\0\1\11\26\0\1\127\1\130"
            + "\10\11\6\0\1\11\1\71\2\0\3\11\1\0\1\11"
            + "\1\0\2\11\1\131\1\11\1\132\3\11\1\0\1\11"
            + "\27\0\7\11\1\133\1\11\6\0\1\11\1\71\2\0"
            + "\3\11\1\0\1\11\1\0\1\11\1\134\6\11\1\0"
            + "\1\11\27\0\11\11\6\0\1\11\1\71\2\0\3\11"
            + "\1\0\1\11\1\0\10\11\1\0\1\11\27\0\7\11"
            + "\1\135\1\11\6\0\1\11\1\71\2\0\3\11\1\0"
            + "\1\11\1\0\4\11\1\136\1\137\2\11\1\0\1\11"
            + "\27\0\11\11\6\0\1\11\1\71\2\0\3\11\1\0"
            + "\1\11\1\0\5\11\1\140\2\11\1\0\1\11\27\0"
            + "\11\11\6\0\1\11\1\71\2\0\3\11\1\0\1\11"
            + "\1\0\1\11\1\141\2\11\1\142\3\11\1\0\1\11"
            + "\27\0\11\11\2\0\2\64\1\0\4\64\1\0\62\64"
            + "\2\143\1\144\1\64\3\143\1\144\62\143\4\0\1\66"
            + "\77\0\1\145\63\0\1\11\1\71\2\0\3\11\1\0"
            + "\1\11\1\0\4\11\1\146\3\11\1\0\1\11\27\0"
            + "\11\11\17\0\1\147\60\0\1\11\1\71\2\0\3\11"
            + "\1\0\1\11\1\0\2\11\1\150\5\11\1\0\1\11"
            + "\27\0\11\11\6\0\1\11\1\71\2\0\3\11\1\0"
            + "\1\11\1\0\2\11\1\151\5\11\1\0\1\11\27\0"
            + "\5\11\1\152\3\11\6\0\1\11\1\71\2\0\3\11"
            + "\1\0\1\11\1\0\10\11\1\0\1\11\27\0\3\11"
            + "\1\153\5\11\6\0\1\11\1\71\2\0\3\11\1\0"
            + "\1\11\1\0\10\11\1\0\1\11\27\0\3\11\1\154"
            + "\5\11\6\0\1\11\1\71\2\0\3\11\1\0\1\11"
            + "\1\0\6\11\1\155\1\11\1\0\1\11\27\0\5\11"
            + "\1\156\3\11\6\0\1\11\1\71\2\0\3\11\1\0"
            + "\1\11\1\0\10\11\1\0\1\11\27\0\3\11\1\157"
            + "\5\11\6\0\1\11\1\71\2\0\3\11\1\0\1\11"
            + "\1\0\10\11\1\0\1\11\27\0\4\11\1\160\4\11"
            + "\6\0\1\11\1\71\2\0\3\11\1\0\1\11\1\0"
            + "\10\11\1\161\1\162\27\0\11\11\6\0\1\11\1\71"
            + "\2\0\3\11\1\0\1\11\1\0\7\11\1\163\1\0"
            + "\1\11\27\0\11\11\6\0\1\11\1\71\2\0\3\11"
            + "\1\0\1\11\1\0\4\11\1\164\3\11\1\0\1\11"
            + "\27\0\11\11\27\0\1\165\127\0\1\166\12\0\1\11"
            + "\1\71\2\0\3\11\1\0\1\11\1\0\7\11\1\167"
            + "\1\0\1\11\27\0\11\11\6\0\1\11\1\71\2\0"
            + "\3\11\1\0\1\11\1\0\10\11\1\0\1\11\27\0"
            + "\4\11\1\170\4\11\63\0\1\171\66\0\2\172\4\0"
            + "\1\173\11\0\1\11\1\71\2\0\3\11\1\0\1\11"
            + "\1\0\10\11\1\0\1\11\27\0\2\11\1\174\6\11"
            + "\6\0\1\11\1\71\2\0\3\11\1\0\1\11\1\0"
            + "\10\11\1\0\1\11\26\0\1\172\1\175\4\11\1\176"
            + "\3\11\21\0\1\177\56\0\1\11\1\71\2\0\3\11"
            + "\1\0\1\11\1\0\1\11\1\200\6\11\1\0\1\11"
            + "\27\0\11\11\6\0\1\11\1\71\2\0\3\11\1\0"
            + "\1\11\1\0\5\11\1\201\2\11\1\0\1\11\26\0"
            + "\1\202\1\203\10\11\6\0\1\11\1\71\2\0\3\11"
            + "\1\0\1\11\1\0\2\11\1\204\5\11\1\0\1\11"
            + "\27\0\11\11\6\0\1\11\1\71\2\0\3\11\1\0"
            + "\1\11\1\0\10\11\1\0\1\11\27\0\6\11\1\205"
            + "\2\11\6\0\1\11\1\71\2\0\3\11\1\0\1\11"
            + "\1\0\2\11\1\206\5\11\1\0\1\11\27\0\11\11"
            + "\6\0\1\11\1\71\2\0\3\11\1\0\1\11\1\0"
            + "\1\11\1\207\6\11\1\0\1\11\27\0\11\11\6\0"
            + "\1\11\1\71\2\0\3\11\1\0\1\11\1\0\2\11"
            + "\1\210\1\211\4\11\1\212\1\213\27\0\11\11\6\0"
            + "\1\11\1\71\2\0\3\11\1\0\1\11\1\0\7\11"
            + "\1\214\1\0\1\11\27\0\4\11\1\215\4\11\6\0"
            + "\1\11\1\71\2\0\3\11\1\0\1\11\1\0\5\11"
            + "\1\216\2\11\1\0\1\11\27\0\11\11\6\0\1\11"
            + "\1\71\2\0\3\11\1\0\1\11\1\0\2\11\1\217"
            + "\5\11\1\0\1\11\27\0\11\11\6\0\1\11\1\71"
            + "\2\0\3\11\1\0\1\11\1\0\10\11\1\0\1\11"
            + "\27\0\5\11\1\220\3\11\2\0\2\143\1\144\1\221"
            + "\3\143\1\144\62\143\3\144\1\222\66\144\13\0\2\223"
            + "\61\0\1\11\1\71\2\0\3\11\1\0\1\11\1\0"
            + "\10\11\1\0\1\11\27\0\2\11\1\224\6\11\6\0"
            + "\1\11\1\71\2\0\3\11\1\0\1\11\1\0\3\11"
            + "\1\225\4\11\1\0\1\11\27\0\11\11\6\0\1\11"
            + "\1\71\2\0\3\11\1\0\1\11\1\0\10\11\1\0"
            + "\1\11\26\0\1\226\1\227\10\11\6\0\1\11\1\71"
            + "\2\0\3\11\1\0\1\11\1\0\1\11\1\230\6\11"
            + "\1\0\1\11\27\0\11\11\6\0\1\11\1\71\2\0"
            + "\3\11\1\0\1\11\1\0\5\11\1\231\2\11\1\0"
            + "\1\11\27\0\11\11\6\0\1\11\1\71\2\0\3\11"
            + "\1\0\1\11\1\0\1\11\1\232\6\11\1\0\1\11"
            + "\27\0\11\11\6\0\1\11\1\71\2\0\3\11\1\0"
            + "\1\11\1\0\10\11\1\0\1\11\26\0\1\233\1\234"
            + "\10\11\6\0\1\11\1\71\2\0\3\11\1\0\1\11"
            + "\1\0\5\11\1\235\2\11\1\0\1\11\27\0\11\11"
            + "\6\0\1\11\1\71\2\0\3\11\1\0\1\11\1\0"
            + "\3\11\1\236\4\11\1\0\1\11\27\0\11\11\6\0"
            + "\1\11\1\71\2\0\3\11\1\0\1\11\1\0\10\11"
            + "\1\237\1\240\27\0\11\11\6\0\1\11\1\71\2\0"
            + "\3\11\1\0\1\11\1\0\10\11\1\0\1\11\27\0"
            + "\1\11\1\241\7\11\21\0\1\242\75\0\1\243\52\0"
            + "\1\11\1\71\2\0\3\11\1\0\1\11\1\0\1\11"
            + "\1\244\6\11\1\0\1\11\27\0\11\11\6\0\1\11"
            + "\1\71\2\0\3\11\1\0\1\11\1\0\5\11\1\245"
            + "\2\11\1\0\1\11\27\0\11\11\22\0\1\246\2\0"
            + "\1\247\132\0\1\250\32\0\1\251\50\0\1\11\1\71"
            + "\2\0\3\11\1\0\1\11\1\0\2\11\1\252\2\11"
            + "\1\253\2\11\1\0\1\11\27\0\11\11\6\0\1\11"
            + "\1\71\2\0\3\11\1\0\1\11\1\0\10\11\1\0"
            + "\1\11\27\0\5\11\1\254\3\11\6\0\1\11\1\71"
            + "\2\0\3\11\1\0\1\11\1\0\7\11\1\255\1\0"
            + "\1\11\27\0\11\11\65\0\1\256\12\0\1\11\1\71"
            + "\2\0\3\11\1\0\1\11\1\0\10\11\1\0\1\11"
            + "\27\0\4\11\1\257\4\11\6\0\1\11\1\71\2\0"
            + "\3\11\1\0\1\11\1\0\10\11\1\0\1\11\27\0"
            + "\3\11\1\260\1\11\1\261\3\11\20\0\1\262\57\0"
            + "\1\11\1\71\2\0\3\11\1\0\1\11\1\0\1\263"
            + "\7\11\1\0\1\11\27\0\11\11\6\0\1\11\1\71"
            + "\2\0\3\11\1\0\1\11\1\0\4\11\1\264\3\11"
            + "\1\0\1\11\27\0\11\11\6\0\1\11\1\71\2\0"
            + "\3\11\1\0\1\11\1\0\7\11\1\265\1\0\1\11"
            + "\27\0\11\11\6\0\1\11\1\71\2\0\3\11\1\0"
            + "\1\11\1\0\10\11\1\0\1\11\27\0\1\11\1\266"
            + "\7\11\6\0\1\11\1\71\2\0\3\11\1\0\1\11"
            + "\1\0\1\267\7\11\1\0\1\11\27\0\11\11\6\0"
            + "\1\11\1\71\2\0\3\11\1\0\1\11\1\0\4\11"
            + "\1\270\3\11\1\0\1\11\27\0\11\11\6\0\1\11"
            + "\1\71\2\0\3\11\1\0\1\11\1\0\1\11\1\271"
            + "\6\11\1\0\1\11\27\0\11\11\25\0\1\272\52\0"
            + "\1\11\1\71\2\0\3\11\1\0\1\11\1\0\5\11"
            + "\1\273\2\11\1\0\1\11\27\0\11\11\6\0\1\11"
            + "\1\71\2\0\3\11\1\0\1\11\1\0\10\11\1\0"
            + "\1\11\27\0\7\11\1\274\1\11\6\0\1\11\1\71"
            + "\2\0\3\11\1\0\1\11\1\0\10\11\1\0\1\11"
            + "\27\0\3\11\1\275\5\11\6\0\1\11\1\71\2\0"
            + "\3\11\1\0\1\11\1\0\7\11\1\276\1\0\1\11"
            + "\27\0\11\11\6\0\1\11\1\71\2\0\3\11\1\0"
            + "\1\11\1\0\1\11\1\277\6\11\1\0\1\11\27\0"
            + "\11\11\6\0\1\11\1\71\2\0\3\11\1\0\1\11"
            + "\1\0\1\11\1\300\6\11\1\0\1\11\27\0\11\11"
            + "\2\0\1\143\1\64\1\144\1\221\3\143\1\144\62\143"
            + "\1\144\1\301\1\144\1\222\66\144\4\0\1\11\1\71"
            + "\2\0\3\11\1\0\1\11\1\0\10\11\1\0\1\11"
            + "\27\0\10\11\1\302\6\0\1\11\1\71\2\0\3\11"
            + "\1\0\1\11\1\0\4\11\1\303\3\11\1\0\1\11"
            + "\27\0\11\11\25\0\1\304\52\0\1\11\1\71\2\0"
            + "\3\11\1\0\1\11\1\0\5\11\1\305\2\11\1\0"
            + "\1\11\27\0\11\11\6\0\1\11\1\71\2\0\3\11"
            + "\1\0\1\11\1\0\2\11\1\306\5\11\1\0\1\11"
            + "\27\0\11\11\6\0\1\11\1\71\2\0\3\11\1\0"
            + "\1\11\1\0\2\11\1\307\5\11\1\0\1\11\27\0"
            + "\11\11\6\0\1\11\1\71\2\0\3\11\1\0\1\11"
            + "\1\0\10\11\1\0\1\11\27\0\5\11\1\310\3\11"
            + "\62\0\1\311\15\0\1\11\1\71\2\0\3\11\1\0"
            + "\1\11\1\0\10\11\1\0\1\11\27\0\1\11\1\312"
            + "\7\11\6\0\1\11\1\71\2\0\3\11\1\0\1\11"
            + "\1\0\10\11\1\313\1\314\27\0\11\11\6\0\1\11"
            + "\1\71\2\0\3\11\1\0\1\11\1\0\1\11\1\315"
            + "\6\11\1\0\1\11\27\0\11\11\25\0\1\316\52\0"
            + "\1\11\1\71\2\0\3\11\1\0\1\11\1\0\5\11"
            + "\1\317\2\11\1\0\1\11\27\0\11\11\6\0\1\11"
            + "\1\71\2\0\3\11\1\0\1\11\1\0\4\11\1\320"
            + "\3\11\1\0\1\11\27\0\11\11\66\0\1\321\11\0"
            + "\1\11\1\71\2\0\3\11\1\0\1\11\1\0\10\11"
            + "\1\0\1\11\27\0\5\11\1\322\3\11\60\0\2\323"
            + "\32\0\1\324\127\0\2\325\100\0\1\326\7\0\1\11"
            + "\1\71\2\0\3\11\1\0\1\11\1\0\10\11\1\0"
            + "\1\11\26\0\1\323\1\327\10\11\6\0\1\11\1\71"
            + "\2\0\3\11\1\0\1\11\1\0\2\11\1\330\5\11"
            + "\1\0\1\11\27\0\11\11\6\0\1\11\1\71\2\0"
            + "\3\11\1\0\1\11\1\0\10\11\1\0\1\11\26\0"
            + "\1\325\1\331\10\11\6\0\1\11\1\71\2\0\3\11"
            + "\1\0\1\11\1\0\10\11\1\0\1\11\27\0\7\11"
            + "\1\332\1\11\64\0\1\333\13\0\1\11\1\71\2\0"
            + "\3\11\1\0\1\11\1\0\10\11\1\0\1\11\27\0"
            + "\3\11\1\334\5\11\6\0\1\11\1\71\2\0\3\11"
            + "\1\0\1\11\1\0\1\11\1\335\6\11\1\0\1\11"
            + "\27\0\11\11\6\0\1\11\1\71\2\0\3\11\1\0"
            + "\1\11\1\0\1\11\1\336\6\11\1\0\1\11\27\0"
            + "\11\11\24\0\1\337\53\0\1\11\1\71\2\0\3\11"
            + "\1\0\1\11\1\0\4\11\1\340\3\11\1\0\1\11"
            + "\27\0\11\11\6\0\1\11\1\71\2\0\3\11\1\0"
            + "\1\11\1\0\10\11\1\0\1\11\26\0\1\341\1\342"
            + "\10\11\6\0\1\11\1\71\2\0\3\11\1\0\1\11"
            + "\1\0\10\11\1\0\1\11\26\0\1\343\1\344\10\11"
            + "\6\0\1\11\1\71\2\0\3\11\1\0\1\11\1\0"
            + "\5\11\1\345\2\11\1\0\1\11\27\0\11\11\6\0"
            + "\1\11\1\71\2\0\3\11\1\0\1\11\1\0\10\11"
            + "\1\0\1\11\27\0\5\11\1\346\3\11\6\0\1\11"
            + "\1\71\2\0\3\11\1\0\1\11\1\0\10\11\1\0"
            + "\1\11\27\0\4\11\1\347\4\11\6\0\1\11\1\71"
            + "\2\0\3\11\1\0\1\11\1\0\10\11\1\0\1\11"
            + "\27\0\1\11\1\350\7\11\6\0\1\11\1\71\2\0"
            + "\3\11\1\0\1\11\1\0\10\11\1\0\1\11\26\0"
            + "\1\351\1\352\10\11\6\0\1\11\1\71\2\0\3\11"
            + "\1\0\1\11\1\0\3\11\1\353\4\11\1\0\1\11"
            + "\27\0\11\11\6\0\1\11\1\71\2\0\3\11\1\0"
            + "\1\11\1\0\2\11\1\354\5\11\1\0\1\11\27\0"
            + "\11\11\6\0\1\11\1\71\2\0\3\11\1\0\1\11"
            + "\1\0\10\11\1\0\1\11\26\0\1\355\1\356\10\11"
            + "\6\0\1\11\1\71\2\0\3\11\1\0\1\11\1\0"
            + "\3\11\1\357\4\11\1\0\1\11\27\0\11\11\6\0"
            + "\1\11\1\71\2\0\3\11\1\0\1\11\1\0\5\11"
            + "\1\360\2\11\1\0\1\11\27\0\11\11\6\0\1\11"
            + "\1\71\2\0\3\11\1\0\1\11\1\0\10\11\1\0"
            + "\1\11\27\0\4\11\1\361\4\11\6\0\1\11\1\71"
            + "\2\0\3\11\1\0\1\11\1\0\10\11\1\0\1\11"
            + "\27\0\3\11\1\362\5\11\24\0\1\363\53\0\1\11"
            + "\1\71\2\0\3\11\1\0\1\11\1\0\4\11\1\364"
            + "\3\11\1\0\1\11\27\0\11\11\6\0\1\11\1\71"
            + "\2\0\3\11\1\0\1\11\1\0\10\11\1\0\1\11"
            + "\27\0\3\11\1\365\1\11\1\366\3\11\6\0\1\11"
            + "\1\71\2\0\3\11\1\0\1\11\1\0\2\11\1\367"
            + "\5\11\1\0\1\11\27\0\11\11\66\0\1\370\11\0"
            + "\1\11\1\71\2\0\3\11\1\0\1\11\1\0\10\11"
            + "\1\0\1\11\27\0\5\11\1\371\3\11\62\0\1\372"
            + "\73\0\1\373\32\0\1\374\124\0\2\375\16\0\1\11"
            + "\1\71\2\0\3\11\1\0\1\11\1\0\10\11\1\0"
            + "\1\11\27\0\1\11\1\376\7\11\6\0\1\11\1\71"
            + "\2\0\3\11\1\0\1\11\1\0\10\11\1\0\1\11"
            + "\27\0\3\11\1\377\5\11\6\0\1\11\1\71\2\0"
            + "\3\11\1\0\1\11\1\0\5\11\1\u0100\2\11\1\0"
            + "\1\11\27\0\11\11\6\0\1\11\1\71\2\0\3\11"
            + "\1\0\1\11\1\0\10\11\1\0\1\11\26\0\1\375"
            + "\1\u0101\10\11\22\0\1\u0102\55\0\1\11\1\71\2\0"
            + "\3\11\1\0\1\11\1\0\2\11\1\u0103\5\11\1\0"
            + "\1\11\27\0\11\11\6\0\1\11\1\71\2\0\2\11"
            + "\1\u0104\1\0\1\11\1\0\10\11\1\0\1\11\27\0"
            + "\11\11\6\0\1\11\1\71\2\0\3\11\1\0\1\11"
            + "\1\0\10\11\1\u0105\1\u0106\27\0\11\11\23\0\1\u0107"
            + "\54\0\1\11\1\71\2\0\3\11\1\0\1\11\1\0"
            + "\3\11\1\u0108\4\11\1\0\1\11\27\0\11\11\66\0"
            + "\1\u0109\11\0\1\11\1\71\2\0\3\11\1\0\1\11"
            + "\1\0\10\11\1\0\1\11\27\0\5\11\1\u010a\3\11"
            + "\65\0\1\u010b\12\0\1\11\1\71\2\0\3\11\1\0"
            + "\1\11\1\0\10\11\1\0\1\11\27\0\4\11\1\u010c"
            + "\4\11\6\0\1\11\1\71\2\0\3\11\1\0\1\11"
            + "\1\0\10\11\1\0\1\11\27\0\3\11\1\u010d\5\11"
            + "\6\0\1\11\1\71\2\0\3\11\1\0\1\11\1\0"
            + "\4\11\1\u010e\3\11\1\0\1\11\27\0\11\11\6\0"
            + "\1\11\1\71\2\0\3\11\1\0\1\11\1\0\10\11"
            + "\1\0\1\11\27\0\4\11\1\u010f\4\11\65\0\1\u0110"
            + "\12\0\1\11\1\71\2\0\3\11\1\0\1\11\1\0"
            + "\10\11\1\0\1\11\27\0\4\11\1\u0111\4\11\6\0"
            + "\1\11\1\71\2\0\3\11\1\0\1\11\1\0\4\11"
            + "\1\u0112\3\11\1\0\1\11\27\0\11\11\15\0\2\u0113"
            + "\61\0\1\11\1\71\2\0\3\11\1\u0113\1\u0114\1\0"
            + "\10\11\1\0\1\11\27\0\11\11\6\0\1\11\1\71"
            + "\2\0\3\11\1\0\1\11\1\0\1\11\1\u0115\6\11"
            + "\1\0\1\11\27\0\11\11\6\0\1\11\1\71\2\0"
            + "\3\11\1\0\1\11\1\0\4\11\1\u0116\3\11\1\0"
            + "\1\11\27\0\11\11\6\0\1\11\1\71\2\0\3\11"
            + "\1\0\1\11\1\0\5\11\1\u0117\2\11\1\0\1\11"
            + "\27\0\11\11\27\0\1\u0118\50\0\1\11\1\71\2\0"
            + "\3\11\1\0\1\11\1\0\7\11\1\u0119\1\0\1\11"
            + "\27\0\11\11\6\0\1\11\1\71\2\0\3\11\1\0"
            + "\1\11\1\0\5\11\1\u011a\2\11\1\0\1\11\27\0"
            + "\11\11\6\0\1\11\1\71\2\0\3\11\1\0\1\11"
            + "\1\0\4\11\1\u011b\3\11\1\0\1\11\27\0\11\11"
            + "\6\0\1\11\1\71\2\0\3\11\1\0\1\11\1\0"
            + "\10\11\1\0\1\11\27\0\10\11\1\u011c\60\0\2\u011d"
            + "\16\0\1\11\1\71\2\0\3\11\1\0\1\11\1\0"
            + "\10\11\1\0\1\11\26\0\1\u011d\1\u011e\10\11\60\0"
            + "\2\u011f\34\0\1\u0120\67\0\1\u0121\55\0\1\11\1\71"
            + "\2\0\3\11\1\0\1\11\1\0\10\11\1\0\1\11"
            + "\26\0\1\u011f\1\u0122\10\11\6\0\1\11\1\71\2\0"
            + "\3\11\1\0\1\11\1\0\4\11\1\u0123\3\11\1\0"
            + "\1\11\27\0\11\11\6\0\1\11\1\71\2\0\3\11"
            + "\1\0\1\11\1\0\2\11\1\u0124\5\11\1\0\1\11"
            + "\27\0\11\11\24\0\1\u0125\53\0\1\11\1\71\2\0"
            + "\3\11\1\0\1\11\1\0\4\11\1\u0126\3\11\1\0"
            + "\1\11\27\0\11\11\6\0\1\11\1\71\2\0\3\11"
            + "\1\0\1\11\1\0\10\11\1\0\1\11\26\0\1\u0127"
            + "\1\u0128\10\11\24\0\1\u0129\53\0\1\11\1\71\2\0"
            + "\3\11\1\0\1\11\1\0\4\11\1\u012a\3\11\1\0"
            + "\1\11\27\0\11\11\25\0\1\u012b\52\0\1\11\1\71"
            + "\2\0\3\11\1\0\1\11\1\0\5\11\1\u012c\2\11"
            + "\1\0\1\11\27\0\11\11\25\0\1\u012d\52\0\1\11"
            + "\1\71\2\0\3\11\1\0\1\11\1\0\5\11\1\u012e"
            + "\2\11\1\0\1\11\27\0\11\11\24\0\1\u012f\53\0"
            + "\1\11\1\71\2\0\3\11\1\0\1\11\1\0\4\11"
            + "\1\u0130\3\11\1\0\1\11\27\0\11\11\6\0\1\11"
            + "\1\71\2\0\3\11\1\0\1\11\1\0\1\11\1\u0131"
            + "\6\11\1\0\1\11\27\0\11\11\6\0\1\11\1\71"
            + "\2\0\3\11\1\0\1\11\1\0\4\11\1\u0132\3\11"
            + "\1\0\1\11\27\0\11\11\70\0\1\u0133\7\0\1\11"
            + "\1\71\2\0\3\11\1\0\1\11\1\0\10\11\1\0"
            + "\1\11\27\0\7\11\1\u0134\1\11\24\0\1\u0135\53\0"
            + "\1\11\1\71\2\0\3\11\1\0\1\11\1\0\4\11"
            + "\1\u0136\3\11\1\0\1\11\27\0\11\11\6\0\1\11"
            + "\1\71\2\0\3\11\1\0\1\11\1\0\2\11\1\240"
            + "\5\11\1\0\1\11\27\0\11\11\6\0\1\11\1\71"
            + "\2\0\3\11\1\0\1\11\1\0\2\11\1\u0137\5\11"
            + "\1\0\1\11\27\0\11\11\6\0\1\11\1\71\2\0"
            + "\3\11\1\0\1\11\1\0\3\11\1\u0138\4\11\1\0"
            + "\1\11\27\0\11\11\6\0\1\11\1\71\2\0\3\11"
            + "\1\0\1\11\1\0\3\11\1\u0139\4\11\1\0\1\11"
            + "\27\0\11\11\6\0\1\11\1\71\2\0\3\11\1\u013a"
            + "\1\u013b\1\0\10\11\1\0\1\11\27\0\11\11\25\0"
            + "\1\u013c\52\0\1\11\1\71\2\0\3\11\1\0\1\11"
            + "\1\0\5\11\1\u013d\2\11\1\0\1\11\27\0\11\11"
            + "\22\0\1\u013e\71\0\1\u013f\62\0\1\u0140\64\0\1\11"
            + "\1\71\2\0\3\11\1\0\1\11\1\0\2\11\1\u0141"
            + "\5\11\1\0\1\11\27\0\11\11\6\0\1\11\1\71"
            + "\2\0\3\11\1\0\1\11\1\0\2\11\1\u0142\5\11"
            + "\1\0\1\11\27\0\11\11\6\0\1\11\1\71\2\0"
            + "\1\11\1\u0143\1\11\1\0\1\11\1\0\10\11\1\0"
            + "\1\11\27\0\11\11\30\0\2\u0144\46\0\1\11\1\71"
            + "\2\0\3\11\1\0\1\11\1\0\10\11\1\u0144\1\u0145"
            + "\27\0\11\11\23\0\1\u0146\54\0\1\11\1\71\2\0"
            + "\3\11\1\0\1\11\1\0\3\11\1\u0147\4\11\1\0"
            + "\1\11\27\0\11\11\22\0\1\u0148\55\0\1\11\1\71"
            + "\2\0\3\11\1\0\1\11\1\0\2\11\1\u0149\5\11"
            + "\1\0\1\11\27\0\11\11\22\0\1\u014a\55\0\1\11"
            + "\1\71\2\0\3\11\1\0\1\11\1\0\2\11\1\u014b"
            + "\5\11\1\0\1\11\27\0\11\11\6\0\1\11\1\71"
            + "\2\0\3\11\1\0\1\11\1\0\2\11\1\u014c\5\11"
            + "\1\0\1\11\27\0\11\11\24\0\1\u014d\53\0\1\11"
            + "\1\71\2\0\3\11\1\0\1\11\1\0\4\11\1\u014e"
            + "\3\11\1\0\1\11\27\0\11\11\22\0\1\u014f\55\0"
            + "\1\11\1\71\2\0\3\11\1\0\1\11\1\0\2\11"
            + "\1\u0150\5\11\1\0\1\11\27\0\11\11\6\0\1\11"
            + "\1\71\2\0\3\11\1\0\1\11\1\0\5\11\1\u0151"
            + "\2\11\1\0\1\11\27\0\11\11\6\0\1\11\1\71"
            + "\2\0\3\11\1\0\1\11\1\0\4\11\1\u0152\3\11"
            + "\1\0\1\11\27\0\11\11\65\0\1\u0153\12\0\1\11"
            + "\1\71\2\0\3\11\1\0\1\11\1\0\10\11\1\0"
            + "\1\11\27\0\4\11\1\u0154\4\11\71\0\1\u0155\6\0"
            + "\1\11\1\71\2\0\3\11\1\0\1\11\1\0\10\11"
            + "\1\0\1\11\27\0\10\11\1\u0156\25\0\1\u0157\52\0"
            + "\1\11\1\71\2\0\3\11\1\0\1\11\1\0\5\11"
            + "\1\u0158\2\11\1\0\1\11\27\0\11\11\22\0\1\u0159"
            + "\55\0\1\11\1\71\2\0\3\11\1\0\1\11\1\0"
            + "\2\11\1\u015a\5\11\1\0\1\11\27\0\11\11\13\0"
            + "\1\u015b\64\0\1\11\1\71\2\0\1\11\1\u015c\1\11"
            + "\1\0\1\11\1\0\10\11\1\0\1\11\27\0\11\11"
            + "\15\0\2\u015d\61\0\1\11\1\71\2\0\3\11\1\u015d"
            + "\1\u015e\1\0\10\11\1\0\1\11\27\0\11\11\26\0"
            + "\1\u015f\51\0\1\11\1\71\2\0\3\11\1\0\1\11"
            + "\1\0\6\11\1\u0160\1\11\1\0\1\11\27\0\11\11"
            + "\70\0\1\u0161\7\0\1\11\1\71\2\0\3\11\1\0"
            + "\1\11\1\0\10\11\1\0\1\11\27\0\7\11\1\u0162"
            + "\1\11\65\0\1\u0163\12\0\1\11\1\71\2\0\3\11"
            + "\1\0\1\11\1\0\10\11\1\0\1\11\27\0\4\11"
            + "\1\u0164\4\11\66\0\1\u0165\11\0\1\11\1\71\2\0"
            + "\3\11\1\0\1\11\1\0\10\11\1\0\1\11\27\0"
            + "\5\11\1\u0166\3\11\60\0\2\u0167\16\0\1\11\1\71"
            + "\2\0\3\11\1\0\1\11\1\0\10\11\1\0\1\11"
            + "\26\0\1\u0167\1\u0168\10\11\25\0\1\u0169\52\0\1\11"
            + "\1\71\2\0\3\11\1\0\1\11\1\0\5\11\1\u016a"
            + "\2\11\1\0\1\11\27\0\11\11\65\0\1\u016b\12\0"
            + "\1\11\1\71\2\0\3\11\1\0\1\11\1\0\10\11"
            + "\1\0\1\11\27\0\4\11\1\u016c\4\11\2\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[16124];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
        "Unknown internal scanner error",
        "Error: could not match input",
        "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0
            = "\1\0\1\11\2\1\1\11\1\1\1\11\17\1\3\11"
            + "\6\1\13\11\14\1\1\0\1\11\1\0\1\1\1\0"
            + "\12\1\1\0\3\1\11\11\2\0\2\1\1\0\14\1"
            + "\2\0\1\1\1\11\11\1\1\11\3\1\2\0\2\1"
            + "\3\0\3\1\1\0\2\1\1\0\7\1\1\0\7\1"
            + "\1\0\1\11\2\1\1\0\4\1\1\0\3\1\1\0"
            + "\2\1\1\0\1\11\2\1\4\0\4\1\1\0\3\1"
            + "\1\0\7\1\1\11\6\1\1\11\2\1\1\11\4\1"
            + "\1\0\1\1\1\11\2\1\1\11\2\1\1\0\1\1"
            + "\4\0\4\1\1\0\3\1\1\0\1\1\1\0\1\1"
            + "\1\0\5\1\1\0\3\1\1\0\5\1\1\0\4\1"
            + "\1\0\1\1\2\0\1\11\1\0\4\1\1\0\2\1"
            + "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\4\1"
            + "\1\0\2\1\1\0\4\1\1\11\4\1\1\0\1\1"
            + "\3\0\3\1\1\0\1\1\1\0\1\1\1\0\1\1"
            + "\1\11\1\1\1\11\1\1\1\0\3\1\1\0\1\1"
            + "\1\0\4\1\1\11\1\1\1\0\1\1\2\11\1\0"
            + "\3\1\1\11\1\1\1\0\1\1\1\11\1\1\1\11"
            + "\2\1\1\0\1\1\1\0\3\1\1\11\1\1\1\0"
            + "\1\1\1\11\1\1\1\11\1\1\1\0\1\1\1\11"
            + "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"
            + "\1\1\1\0\1\1\1\0\1\1\1\11\1\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[364];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is the source of
     * the yytext() string
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read from
     * input
     */
    private int zzEndRead;

    /**
     * number of newlines encountered up to the start of the matched text
     */
    private int yyline;

    /**
     * the number of characters up to the start of the matched text
     */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /**
     * The number of occupied positions in zzBuffer beyond zzEndRead. When a
     * lead/high surrogate has been read from the input stream into the final
     * zzBuffer position, this will have a value of 1; otherwise, it will have a
     * value of 0.
     */
    private int zzFinalHighSurrogate = 0;

    /* user code: */
    //codigo de java
    String nombre;

    public void imprimir(String dato, String cadena) {
        //System.out.println(dato+" : "+cadena);
    }

    public void imprimir(String cadena) {
        //System.out.println(cadena+" soy reservada");
    }

    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public Lexico(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x110000];
        int i = 0;
        /* index in packed string  */
        int j = 0;
        /* index in unpacked array */
        while (i < 244) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do {
                map[j++] = value;
            } while (--count > 0);
        }
        return map;
    }

    /**
     * Refills the input buffer.
     *
     * @return      <code>false</code>, iff there was new input.
     *
     * @exception java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

        /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead - zzStartRead);

            /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

        /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
            /* if not: blow it up */
            char newBuffer[] = new char[zzBuffer.length * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

        /* fill the buffer with new input */
        int requested = zzBuffer.length - zzEndRead;
        int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

        /* not supposed to occur according to specification of java.io.Reader */
        if (numRead == 0) {
            throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
        }
        if (numRead > 0) {
            zzEndRead += numRead;
            /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
            if (numRead == requested) {
                if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                }
            }
            /* potentially more input available */
            return false;
        }

        /* numRead < 0 ==> end of stream */
        return true;
    }

    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;
        /* indicate end of file */
        zzEndRead = zzStartRead;
        /* invalidate buffer    */

        if (zzReader != null) {
            zzReader.close();
        }
    }

    /**
     * Resets the scanner to read from a new input stream. Does not close the
     * old reader.
     *
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost). Lexical
     * state is set to <tt>ZZ_INITIAL</tt>.
     *
     * Internal scan buffer is resized down to its initial length, if it has
     * grown.
     *
     * @param reader the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        zzFinalHighSurrogate = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE) {
            zzBuffer = new char[ZZ_BUFFERSIZE];
        }
    }

    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }

    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }

    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }

    /**
     * Returns the character at position <tt>pos</tt> from the matched text.
     *
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch. A value from 0 to
     * yylength()-1.
     *
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }

    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }

    /**
     * Reports an error that occured while scanning.
     *
     * In a wellformed scanner (no or only correct usage of yypushback(int) and
     * a match-all fallback rule) this method will only be called with things
     * that "Can't Possibly Happen". If this method is called, something is
     * seriously wrong (e.g. a JFlex bug producing a faulty scanner etc.).
     *
     * Usual syntax/scanner level error handling should be done in error
     * fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }

    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again. This number must
     * not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength()) {
            zzScanError(ZZ_PUSHBACK_2BIG);
        }

        zzMarkedPos -= number;
    }

    /**
     * Contains user EOF-code, which will be executed exactly once, when the end
     * of file is reached
     */
    private void zzDoEOF() throws java.io.IOException {
        if (!zzEOFDone) {
            zzEOFDone = true;
            yyclose();
        }
    }

    /**
     * Resumes scanning until the next regular expression is matched, the end of
     * input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @exception java.io.IOException if any I/O-Error occurs
     */
    public java_cup.runtime.Symbol next_token() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            yychar += zzMarkedPosL - zzStartRead;

            boolean zzR = false;
            int zzCh;
            int zzCharCount;
            for (zzCurrentPosL = zzStartRead;
                    zzCurrentPosL < zzMarkedPosL;
                    zzCurrentPosL += zzCharCount) {
                zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
                zzCharCount = Character.charCount(zzCh);
                switch (zzCh) {
                    case '\u000B':
                    case '\u000C':
                    case '\u0085':
                    case '\u2028':
                    case '\u2029':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR) {
                            zzR = false;
                        } else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn += zzCharCount;
                }
            }

            if (zzR) {
                // peek one character ahead if it is \n (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL) {
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                } else if (zzAtEOF) {
                    zzPeek = false;
                } else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof) {
                        zzPeek = false;
                    } else {
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                    }
                }
                if (zzPeek) {
                    yyline--;
                }
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }

            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) {
                        break zzForAction;
                    }
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) {
                            break zzForAction;
                        }
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                zzDoEOF();
                {
                    return new java_cup.runtime.Symbol(sym.EOF);
                }
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        System.out.println("Error lexico: " + yytext() + " Linea:" + (yyline + 1) + " Columna:" + (yycolumn + 1));
                    }
                    case 78:
                        break;
                    case 2: {
                        /* Se ignoran */
                    }
                    case 79:
                        break;
                    case 3: {
                        imprimir(yytext(), "soy /");
                        return new Symbol(sym.div, yycolumn, yyline, yytext());
                    }
                    case 80:
                        break;
                    case 4: {
                        imprimir(yytext(), "soy entero");
                        return new Symbol(sym.entero, yycolumn, yyline, yytext());
                    }
                    case 81:
                        break;
                    case 5: {
                        imprimir(yytext(), "soy punto");
                        return new Symbol(sym.punto, yycolumn, yyline, yytext());
                    }
                    case 82:
                        break;
                    case 6: {
                        imprimir(yytext(), "soy iden");
                        return new Symbol(sym.iden, yycolumn, yyline, yytext());
                    }
                    case 83:
                        break;
                    case 7: {
                        imprimir(yytext(), "soy +");
                        return new Symbol(sym.mas, yycolumn, yyline, yytext());
                    }
                    case 84:
                        break;
                    case 8: {
                        imprimir(yytext(), "soy -");
                        return new Symbol(sym.menos, yycolumn, yyline, yytext());
                    }
                    case 85:
                        break;
                    case 9: {
                        imprimir(yytext(), "soy *");
                        return new Symbol(sym.mul, yycolumn, yyline, yytext());
                    }
                    case 86:
                        break;
                    case 10: {
                        imprimir(yytext(), "soy %");
                        return new Symbol(sym.mod, yycolumn, yyline, yytext());
                    }
                    case 87:
                        break;
                    case 11: {
                        imprimir(yytext(), "soy ^");
                        return new Symbol(sym.pot, yycolumn, yyline, yytext());
                    }
                    case 88:
                        break;
                    case 12: {
                        imprimir(yytext(), "soy mayor");
                        return new Symbol(sym.mayor, yycolumn, yyline, yytext());
                    }
                    case 89:
                        break;
                    case 13: {
                        imprimir(yytext(), "soy menor");
                        return new Symbol(sym.menor, yycolumn, yyline, yytext());
                    }
                    case 90:
                        break;
                    case 14: {
                        imprimir(yytext(), "soy igual");
                        return new Symbol(sym.igual, yycolumn, yyline, yytext());
                    }
                    case 91:
                        break;
                    case 15: {
                        imprimir(yytext(), "soy not");
                        return new Symbol(sym.not, yycolumn, yyline, yytext());
                    }
                    case 92:
                        break;
                    case 16: {
                        imprimir(yytext(), "soy dosPuntos");
                        return new Symbol(sym.dosPuntos, yycolumn, yyline, yytext());
                    }
                    case 93:
                        break;
                    case 17: {
                        imprimir(yytext(), "soy puntocoma");
                        return new Symbol(sym.puntoComa, yycolumn, yyline, yytext());
                    }
                    case 94:
                        break;
                    case 18: {
                        imprimir(yytext(), "soy coma");
                        return new Symbol(sym.coma, yycolumn, yyline, yytext());
                    }
                    case 95:
                        break;
                    case 19: {
                        imprimir(yytext(), "soy parenInicio");
                        return new Symbol(sym.parenInicio, yycolumn, yyline, yytext());
                    }
                    case 96:
                        break;
                    case 20: {
                        imprimir(yytext(), "soy parenFin");
                        return new Symbol(sym.parenFin, yycolumn, yyline, yytext());
                    }
                    case 97:
                        break;
                    case 21: {
                        imprimir(yytext(), "soy corInicio");
                        return new Symbol(sym.corInicio, yycolumn, yyline, yytext());
                    }
                    case 98:
                        break;
                    case 22: {
                        imprimir(yytext(), "soy corFin");
                        return new Symbol(sym.corFin, yycolumn, yyline, yytext());
                    }
                    case 99:
                        break;
                    case 23: {
                        imprimir(yytext(), "soy llaveInicio");
                        return new Symbol(sym.llaveInicio, yycolumn, yyline, yytext());
                    }
                    case 100:
                        break;
                    case 24: {
                        imprimir(yytext(), "soy llaveFin");
                        return new Symbol(sym.llaveFin, yycolumn, yyline, yytext());
                    }
                    case 101:
                        break;
                    case 25: {
                        imprimir(yytext(), "soy inteInicio");
                        return new Symbol(sym.inteInicio, yycolumn, yyline, yytext());
                    }
                    case 102:
                        break;
                    case 26: {
                        imprimir(yytext(), "soy inteFin");
                        return new Symbol(sym.inteFin, yycolumn, yyline, yytext());
                    }
                    case 103:
                        break;
                    case 27: {
                        imprimir(yytext(), "soy decimal");
                        return new Symbol(sym.decimal, yycolumn, yyline, yytext());
                    }
                    case 104:
                        break;
                    case 28: {
                        imprimir(yytext(), "soy cadena");
                        return new Symbol(sym.cadena, yycolumn, yyline, yytext());
                    }
                    case 105:
                        break;
                    case 29: {
                        imprimir(yytext());
                        return new Symbol(sym.si, yycolumn, yyline, yytext());
                    }
                    case 106:
                        break;
                    case 30: {
                        imprimir(yytext(), "soy aumento");
                        return new Symbol(sym.aumento, yycolumn, yyline, yytext());
                    }
                    case 107:
                        break;
                    case 31: {
                        imprimir(yytext(), "soy disminucion");
                        return new Symbol(sym.disminucion, yycolumn, yyline, yytext());
                    }
                    case 108:
                        break;
                    case 32: {
                        imprimir(yytext(), "soy mayorIgual");
                        return new Symbol(sym.mayorIgual, yycolumn, yyline, yytext());
                    }
                    case 109:
                        break;
                    case 33: {
                        imprimir(yytext(), "soy menorIgual");
                        return new Symbol(sym.menorIgual, yycolumn, yyline, yytext());
                    }
                    case 110:
                        break;
                    case 34: {
                        imprimir(yytext(), "soy igualIgual");
                        return new Symbol(sym.igualIgual, yycolumn, yyline, yytext());
                    }
                    case 111:
                        break;
                    case 35: {
                        imprimir(yytext(), "soy noIgual");
                        return new Symbol(sym.noIgual, yycolumn, yyline, yytext());
                    }
                    case 112:
                        break;
                    case 36: {
                        imprimir(yytext(), "soy or");
                        return new Symbol(sym.or, yycolumn, yyline, yytext());
                    }
                    case 113:
                        break;
                    case 37: {
                        imprimir(yytext(), "soy xor");
                        return new Symbol(sym.xor, yycolumn, yyline, yytext());
                    }
                    case 114:
                        break;
                    case 38: {
                        imprimir(yytext(), "soy and");
                        return new Symbol(sym.and, yycolumn, yyline, yytext());
                    }
                    case 115:
                        break;
                    case 39: {
                        imprimir(yytext(), "soy caracter");
                        return new Symbol(sym.caracter, yycolumn, yyline, yytext());
                    }
                    case 116:
                        break;
                    case 40: {
                        imprimir(yytext());
                        return new Symbol(sym.var, yycolumn, yyline, yytext());
                    }
                    case 117:
                        break;
                    case 41: {
                        imprimir(yytext());
                        return new Symbol(sym.als, yycolumn, yyline, yytext());
                    }
                    case 118:
                        break;
                    case 42: {
                        imprimir(yytext());
                        return new Symbol(sym.idenImportar, yycolumn, yyline, yytext());
                    }
                    case 119:
                        break;
                    case 43: {
                        imprimir(yytext());
                        return new Symbol(sym.sino, yycolumn, yyline, yytext());
                    }
                    case 120:
                        break;
                    case 44: {
                        imprimir(yytext());
                        return new Symbol(sym.para, yycolumn, yyline, yytext());
                    }
                    case 121:
                        break;
                    case 45: {
                        imprimir(yytext());
                        return new Symbol(sym.caso, yycolumn, yyline, yytext());
                    }
                    case 122:
                        break;
                    case 46: {
                        imprimir(yytext());
                        return new Symbol(sym.resBool, yycolumn, yyline, yytext());
                    }
                    case 123:
                        break;
                    case 47: {
                        imprimir(yytext());
                        return new Symbol(sym.vacio, yycolumn, yyline, yytext());
                    }
                    case 124:
                        break;
                    case 48: {
                        imprimir(yytext());
                        return new Symbol(sym.datos, yycolumn, yyline, yytext());
                    }
                    case 125:
                        break;
                    case 49: {
                        imprimir(yytext());
                        return new Symbol(sym.donde, yycolumn, yyline, yytext());
                    }
                    case 126:
                        break;
                    case 50: {
                        imprimir(yytext(), "soy bool");
                        return new Symbol(sym.bool, yycolumn, yyline, yytext());
                    }
                    case 127:
                        break;
                    case 51: {
                        imprimir(yytext());
                        return new Symbol(sym.nuevo, yycolumn, yyline, yytext());
                    }
                    case 128:
                        break;
                    case 52: {
                        imprimir(yytext());
                        return new Symbol(sym.hacer, yycolumn, yyline, yytext());
                    }
                    case 129:
                        break;
                    case 53: {
                        imprimir(yytext());
                        return new Symbol(sym.resEntero, yycolumn, yyline, yytext());
                    }
                    case 130:
                        break;
                    case 54: {
                        imprimir(yytext());
                        return new Symbol(sym.llamar, yycolumn, yyline, yytext());
                    }
                    case 131:
                        break;
                    case 55: {
                        imprimir(yytext());
                        return new Symbol(sym.inicio, yycolumn, yyline, yytext());
                    }
                    case 132:
                        break;
                    case 56: {
                        imprimir(yytext());
                        return new Symbol(sym.resCadena, yycolumn, yyline, yytext());
                    }
                    case 133:
                        break;
                    case 57: {
                        imprimir(yytext());
                        return new Symbol(sym.hereda, yycolumn, yyline, yytext());
                    }
                    case 134:
                        break;
                    case 58: {
                        imprimir(yytext());
                        return new Symbol(sym.defecto, yycolumn, yyline, yytext());
                    }
                    case 135:
                        break;
                    case 59: {
                        imprimir(yytext());
                        return new Symbol(sym.resDecimal, yycolumn, yyline, yytext());
                    }
                    case 136:
                        break;
                    case 60: {
                        imprimir(yytext());
                        return new Symbol(sym.privado, yycolumn, yyline, yytext());
                    }
                    case 137:
                        break;
                    case 61: {
                        imprimir(yytext());
                        return new Symbol(sym.publico, yycolumn, yyline, yytext());
                    }
                    case 138:
                        break;
                    case 62: {
                        imprimir(yytext());
                        return new Symbol(sym.columna, yycolumn, yyline, yytext());
                    }
                    case 139:
                        break;
                    case 63: {
                        imprimir(yytext());
                        return new Symbol(sym.retornar, yycolumn, yyline, yytext());
                    }
                    case 140:
                        break;
                    case 64: {
                        imprimir(yytext());
                        return new Symbol(sym.llamarHK, yycolumn, yyline, yytext());
                    }
                    case 141:
                        break;
                    case 65: {
                        imprimir(yytext());
                        return new Symbol(sym.imprimir, yycolumn, yyline, yytext());
                    }
                    case 142:
                        break;
                    case 66: {
                        imprimir(yytext());
                        return new Symbol(sym.importar, yycolumn, yyline, yytext());
                    }
                    case 143:
                        break;
                    case 67: {
                        imprimir(yytext());
                        return new Symbol(sym.mientras, yycolumn, yyline, yytext());
                    }
                    case 144:
                        break;
                    case 68: {
                        imprimir(yytext());
                        return new Symbol(sym.procesar, yychar, yycolumn, yyline);
                    }
                    case 145:
                        break;
                    case 69: {
                        imprimir(yytext());
                        return new Symbol(sym.terminar, yycolumn, yyline, yytext());
                    }
                    case 146:
                        break;
                    case 70: {
                        imprimir(yytext());
                        return new Symbol(sym.resCaracter, yycolumn, yyline, yytext());
                    }
                    case 147:
                        break;
                    case 71: {
                        imprimir(yytext());
                        return new Symbol(sym.dondeTodo, yycolumn, yyline, yytext());
                    }
                    case 148:
                        break;
                    case 72: {
                        imprimir(yytext());
                        return new Symbol(sym.dondeCada, yycolumn, yyline, yytext());
                    }
                    case 149:
                        break;
                    case 73: {
                        imprimir(yytext());
                        return new Symbol(sym.seleccion, yycolumn, yyline, yytext());
                    }
                    case 150:
                        break;
                    case 74: {
                        imprimir(yytext());
                        return new Symbol(sym.protegido, yycolumn, yyline, yytext());
                    }
                    case 151:
                        break;
                    case 75: {
                        imprimir(yytext());
                        return new Symbol(sym.continuar, yycolumn, yyline, yytext());
                    }
                    case 152:
                        break;
                    case 76: {
                        imprimir(yytext());
                        return new Symbol(sym.incluir_HK, yycolumn, yyline, yytext());
                    }
                    case 153:
                        break;
                    case 77: {
                        imprimir(yytext());
                        return new Symbol(sym.graphikar_funcion, yycolumn, yyline, yytext());
                    }
                    case 154:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }

}
