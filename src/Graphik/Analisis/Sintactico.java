//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 21 21:03:49 GMT-12:00 2017
//----------------------------------------------------
package Graphik.Analisis;

import Ast.*;
import Interfaz.Inicio;
import java_cup.runtime.*;

/**
 * CUP v0.11a beta 20060608 generated parser.
 *
 * @version Tue Mar 21 21:03:49 GMT-12:00 2017
 */
public class Sintactico extends java_cup.runtime.lr_parser {

    /**
     * Default constructor.
     */
    public Sintactico() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    public Sintactico(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][]
            = unpackFromStrings(new String[]{
        "\000\246\000\002\002\004\000\002\002\005\000\002\005"
        + "\003\000\002\005\002\000\002\004\006\000\002\004\005"
        + "\000\002\006\003\000\002\006\002\000\002\007\006\000"
        + "\002\007\005\000\002\007\003\000\002\003\004\000\002"
        + "\003\003\000\002\010\010\000\002\010\012\000\002\024"
        + "\004\000\002\024\004\000\002\024\004\000\002\024\002"
        + "\000\002\025\003\000\002\025\003\000\002\025\003\000"
        + "\002\025\003\000\002\025\003\000\002\027\003\000\002"
        + "\027\003\000\002\027\003\000\002\027\003\000\002\027"
        + "\003\000\002\027\003\000\002\027\003\000\002\012\006"
        + "\000\002\012\014\000\002\012\011\000\002\011\006\000"
        + "\002\011\011\000\002\047\010\000\002\047\012\000\002"
        + "\047\012\000\002\043\006\000\002\043\005\000\002\044"
        + "\005\000\002\044\005\000\002\045\005\000\002\045\003"
        + "\000\002\046\005\000\002\046\003\000\002\013\006\000"
        + "\002\013\004\000\002\016\004\000\002\016\003\000\002"
        + "\015\003\000\002\015\003\000\002\015\003\000\002\015"
        + "\003\000\002\020\003\000\002\020\002\000\002\021\005"
        + "\000\002\021\005\000\002\021\005\000\002\021\005\000"
        + "\002\021\005\000\002\021\005\000\002\021\005\000\002"
        + "\021\004\000\002\021\003\000\002\021\003\000\002\021"
        + "\003\000\002\021\003\000\002\021\003\000\002\023\005"
        + "\000\002\023\005\000\002\023\005\000\002\023\005\000"
        + "\002\023\005\000\002\023\005\000\002\023\003\000\002"
        + "\022\005\000\002\022\005\000\002\022\005\000\002\022"
        + "\004\000\002\022\003\000\002\030\003\000\002\030\003"
        + "\000\002\030\003\000\002\030\003\000\002\030\003\000"
        + "\002\017\013\000\002\017\011\000\002\017\011\000\002"
        + "\042\003\000\002\042\002\000\002\041\005\000\002\041"
        + "\003\000\002\026\003\000\002\026\003\000\002\040\005"
        + "\000\002\040\006\000\002\050\005\000\002\050\004\000"
        + "\002\032\005\000\002\032\003\000\002\034\004\000\002"
        + "\034\003\000\002\033\003\000\002\033\002\000\002\035"
        + "\004\000\002\035\004\000\002\035\004\000\002\035\004"
        + "\000\002\035\004\000\002\035\003\000\002\035\003\000"
        + "\002\035\003\000\002\035\003\000\002\035\004\000\002"
        + "\035\004\000\002\035\004\000\002\035\004\000\002\035"
        + "\004\000\002\035\004\000\002\014\005\000\002\014\003"
        + "\000\002\036\005\000\002\036\007\000\002\036\005\000"
        + "\002\036\012\000\002\036\007\000\002\036\006\000\002"
        + "\036\010\000\002\036\010\000\002\037\005\000\002\037"
        + "\005\000\002\037\010\000\002\055\011\000\002\055\015"
        + "\000\002\056\011\000\002\056\012\000\002\066\004\000"
        + "\002\066\003\000\002\065\006\000\002\067\005\000\002"
        + "\070\004\000\002\070\004\000\002\057\015\000\002\071"
        + "\007\000\002\071\005\000\002\060\011\000\002\061\012"
        + "\000\002\063\003\000\002\063\004\000\002\062\003\000"
        + "\002\064\003\000\002\072\010\000\002\054\006\000\002"
        + "\073\007\000\002\073\006\000\002\074\004\000\002\052"
        + "\005\000\002\052\003\000\002\031\006\000\002\031\005"
        + "\000\002\051\003\000\002\051\003\000\002\051\003\000"
        + "\002\053\004"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table
            = unpackFromStrings(new String[]{
        "\000\u015f\000\012\003\ufffe\004\ufffe\006\007\025\ufffe\001"
        + "\002\000\010\003\017\004\ufffa\025\020\001\002\000\012"
        + "\003\uffff\004\uffff\006\013\025\uffff\001\002\000\004\002"
        + "\012\001\002\000\004\051\010\001\002\000\004\060\011"
        + "\001\002\000\012\003\ufffc\004\ufffc\006\ufffc\025\ufffc\001"
        + "\002\000\004\002\001\001\002\000\004\051\014\001\002"
        + "\000\004\060\015\001\002\000\012\003\ufffd\004\ufffd\006"
        + "\ufffd\025\ufffd\001\002\000\004\004\031\001\002\000\006"
        + "\004\ufff7\025\ufff7\001\002\000\004\116\025\001\002\000"
        + "\006\004\ufffb\025\022\001\002\000\004\116\023\001\002"
        + "\000\004\060\024\001\002\000\006\004\ufff9\025\ufff9\001"
        + "\002\000\004\060\026\001\002\000\006\004\ufff8\025\ufff8"
        + "\001\002\000\006\002\000\004\031\001\002\000\006\002"
        + "\ufff5\004\ufff5\001\002\000\004\116\032\001\002\000\010"
        + "\020\uffef\055\uffef\064\033\001\002\000\010\015\u0160\016"
        + "\u015e\017\u015f\001\002\000\006\020\036\055\035\001\002"
        + "\000\024\005\060\007\046\010\043\011\054\012\041\013"
        + "\051\014\053\056\uffc9\116\050\001\002\000\004\116\037"
        + "\001\002\000\004\055\040\001\002\000\024\005\060\007"
        + "\046\010\043\011\054\012\041\013\051\014\053\056\uffc9"
        + "\116\050\001\002\000\004\116\uffe6\001\002\000\024\005"
        + "\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb"
        + "\056\uffcb\116\uffcb\001\002\000\004\116\uffe8\001\002\000"
        + "\024\005\060\007\046\010\043\011\054\012\041\013\051"
        + "\014\053\056\uffca\116\050\001\002\000\024\005\uffce\007"
        + "\uffce\010\uffce\011\uffce\012\uffce\013\uffce\014\uffce\056\uffce"
        + "\116\uffce\001\002\000\004\116\uffe9\001\002\000\004\116"
        + "\u0145\001\002\000\004\116\uffe4\001\002\000\004\116\uffe5"
        + "\001\002\000\024\005\uffcf\007\uffcf\010\uffcf\011\uffcf\012"
        + "\uffcf\013\uffcf\014\uffcf\056\uffcf\116\uffcf\001\002\000\010"
        + "\024\262\030\261\116\uffe3\001\002\000\004\116\uffe7\001"
        + "\002\000\004\056\260\001\002\000\024\005\uffcc\007\uffcc"
        + "\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\056\uffcc\116"
        + "\uffcc\001\002\000\024\005\uffcd\007\uffcd\010\uffcd\011\uffcd"
        + "\012\uffcd\013\uffcd\014\uffcd\056\uffcd\116\uffcd\001\002\000"
        + "\016\007\061\010\063\011\067\012\062\013\066\116\064"
        + "\001\002\000\004\116\uffee\001\002\000\004\116\uffeb\001"
        + "\002\000\004\116\uffed\001\002\000\004\116\244\001\002"
        + "\000\004\116\070\001\002\000\004\116\uffea\001\002\000"
        + "\004\116\uffec\001\002\000\014\060\uffef\061\uffef\062\uffef"
        + "\064\033\065\076\001\002\000\006\060\072\061\073\001"
        + "\002\000\024\005\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf"
        + "\013\uffdf\014\uffdf\056\uffdf\116\uffdf\001\002\000\004\116"
        + "\074\001\002\000\010\060\uffef\061\uffef\064\033\001\002"
        + "\000\006\060\uffd2\061\uffd2\001\002\000\030\023\107\026"
        + "\115\053\110\070\116\110\106\111\105\112\123\113\102"
        + "\114\117\115\113\116\127\001\002\000\012\060\uffef\062"
        + "\uffef\064\033\065\132\001\002\000\010\060\uffd1\061\uffd1"
        + "\062\101\001\002\000\030\023\107\026\115\053\110\070"
        + "\116\110\106\111\105\112\123\113\102\114\117\115\113"
        + "\116\127\001\002\000\062\052\uffac\054\uffac\056\uffac\060"
        + "\uffac\061\uffac\064\uffac\066\uffac\067\uffac\070\uffac\071\uffac"
        + "\072\uffac\073\uffac\074\uffac\075\uffac\076\uffac\077\uffac\100"
        + "\uffac\101\uffac\102\uffac\103\uffac\104\uffac\105\uffac\106\uffac"
        + "\107\uffac\001\002\000\066\052\uff62\054\uff62\056\uff62\060"
        + "\uff62\061\uff62\062\uff62\063\uff62\064\uff62\066\uff62\067\uff62"
        + "\070\uff62\071\uff62\072\uff62\073\uff62\074\uff62\075\uff62\076"
        + "\uff62\077\uff62\100\uff62\101\uff62\102\uff62\103\uff62\104\uff62"
        + "\105\uff62\106\uff62\107\uff62\001\002\000\066\052\uff5f\054"
        + "\uff5f\056\uff5f\060\uff5f\061\uff5f\062\uff5f\063\uff5f\064\uff5f"
        + "\066\uff5f\067\uff5f\070\uff5f\071\uff5f\072\uff5f\073\uff5f\074"
        + "\uff5f\075\uff5f\076\uff5f\077\uff5f\100\uff5f\101\uff5f\102\uff5f"
        + "\103\uff5f\104\uff5f\105\uff5f\106\uff5f\107\uff5f\001\002\000"
        + "\062\052\uffae\054\uffae\056\uffae\060\uffae\061\uffae\064\uffae"
        + "\066\uffae\067\uffae\070\uffae\071\uffae\072\uffae\073\uffae\074"
        + "\uffae\075\uffae\076\uffae\077\uffae\100\uffae\101\uffae\102\uffae"
        + "\103\uffae\104\uffae\105\uffae\106\uffae\107\uffae\001\002\000"
        + "\030\023\107\026\115\053\110\070\116\110\106\111\105"
        + "\112\123\113\102\114\117\115\113\116\127\001\002\000"
        + "\004\116\127\001\002\000\030\023\107\026\115\053\110"
        + "\070\116\110\106\111\105\112\123\113\102\114\117\115"
        + "\113\116\127\001\002\000\062\052\uffbe\054\uffbe\056\uffbe"
        + "\060\uffbe\061\uffbe\064\uffbe\066\uffbe\067\uffbe\070\uffbe\071"
        + "\uffbe\072\uffbe\073\uffbe\074\uffbe\075\uffbe\076\uffbe\077\uffbe"
        + "\100\uffbe\101\uffbe\102\uffbe\103\uffbe\104\uffbe\105\uffbe\106"
        + "\uffbe\107\uffbe\001\002\000\064\052\uffbf\054\uffbf\056\uffbf"
        + "\060\uffbf\061\uffbf\063\212\064\uffbf\066\uffbf\067\uffbf\070"
        + "\uffbf\071\uffbf\072\uffbf\073\uffbf\074\uffbf\075\uffbf\076\uffbf"
        + "\077\uffbf\100\uffbf\101\uffbf\102\uffbf\103\uffbf\104\uffbf\105"
        + "\uffbf\106\uffbf\107\uffbf\001\002\000\062\052\uffad\054\uffad"
        + "\056\uffad\060\uffad\061\uffad\064\uffad\066\uffad\067\uffad\070"
        + "\uffad\071\uffad\072\uffad\073\uffad\074\uffad\075\uffad\076\uffad"
        + "\077\uffad\100\uffad\101\uffad\102\uffad\103\uffad\104\uffad\105"
        + "\uffad\106\uffad\107\uffad\001\002\000\026\052\uffb0\054\uffb0"
        + "\056\uffb0\060\uffb0\061\uffb0\064\uffb0\066\uffb0\105\uffb0\106"
        + "\uffb0\107\uffb0\001\002\000\004\116\205\001\002\000\026"
        + "\023\107\026\115\053\110\070\116\111\105\112\123\113"
        + "\102\114\117\115\113\116\127\001\002\000\062\052\uffab"
        + "\054\uffab\056\uffab\060\uffab\061\uffab\064\uffab\066\uffab\067"
        + "\uffab\070\uffab\071\uffab\072\uffab\073\uffab\074\uffab\075\uffab"
        + "\076\uffab\077\uffab\100\uffab\101\uffab\102\uffab\103\uffab\104"
        + "\uffab\105\uffab\106\uffab\107\uffab\001\002\000\012\060\203"
        + "\105\137\106\134\107\136\001\002\000\062\052\uffbc\054"
        + "\uffbc\056\uffbc\060\uffbc\061\uffbc\064\uffbc\066\uffbc\067\uffbc"
        + "\070\uffbc\071\uffbc\072\uffbc\073\uffbc\074\uffbc\075\uffbc\076"
        + "\uffbc\077\uffbc\100\uffbc\101\uffbc\102\uffbc\103\uffbc\104\uffbc"
        + "\105\uffbc\106\uffbc\107\uffbc\001\002\000\066\052\uff5d\054"
        + "\uff5d\056\uff5d\060\uff5d\061\uff5d\062\uff5d\063\uff5d\064\uff5d"
        + "\066\uff5d\067\uff5d\070\uff5d\071\uff5d\072\uff5d\073\uff5d\074"
        + "\uff5d\075\uff5d\076\uff5d\077\uff5d\100\uff5d\101\uff5d\102\uff5d"
        + "\103\uff5d\104\uff5d\105\uff5d\106\uff5d\107\uff5d\001\002\000"
        + "\062\052\uffaf\054\uffaf\056\uffaf\060\uffaf\061\uffaf\064\uffaf"
        + "\066\uffaf\067\uffaf\070\uffaf\071\uffaf\072\uffaf\073\uffaf\074"
        + "\uffaf\075\uffaf\076\uffaf\077\uffaf\100\uffaf\101\uffaf\102\uffaf"
        + "\103\uffaf\104\uffaf\105\uffaf\106\uffaf\107\uffaf\001\002\000"
        + "\062\052\uffb5\054\uffb5\056\uffb5\060\uffb5\061\uffb5\064\uffb5"
        + "\066\uffb5\067\166\070\160\071\154\072\151\073\164\074"
        + "\163\075\157\076\155\077\165\100\161\101\153\102\152"
        + "\103\162\104\156\105\uffb5\106\uffb5\107\uffb5\001\002\000"
        + "\062\052\uffbd\054\uffbd\056\uffbd\060\uffbd\061\uffbd\064\uffbd"
        + "\066\uffbd\067\uffbd\070\uffbd\071\uffbd\072\uffbd\073\uffbd\074"
        + "\uffbd\075\uffbd\076\uffbd\077\uffbd\100\uffbd\101\uffbd\102\uffbd"
        + "\103\uffbd\104\uffbd\105\uffbd\106\uffbd\107\uffbd\001\002\000"
        + "\062\052\uffc0\054\uffc0\056\uffc0\060\uffc0\061\uffc0\064\uffc0"
        + "\066\uffc0\067\uffc0\070\uffc0\071\uffc0\072\uffc0\073\uffc0\074"
        + "\uffc0\075\uffc0\076\uffc0\077\uffc0\100\uffc0\101\uffc0\102\uffc0"
        + "\103\uffc0\104\uffc0\105\uffc0\106\uffc0\107\uffc0\001\002\000"
        + "\072\052\uff5e\053\130\054\uff5e\056\uff5e\060\uff5e\061\uff5e"
        + "\062\uff5e\063\uff5e\064\uff5e\065\076\066\uff5e\067\uff5e\070"
        + "\uff5e\071\uff5e\072\uff5e\073\uff5e\074\uff5e\075\uff5e\076\uff5e"
        + "\077\uff5e\100\uff5e\101\uff5e\102\uff5e\103\uff5e\104\uff5e\105"
        + "\uff5e\106\uff5e\107\uff5e\001\002\000\032\023\107\026\115"
        + "\053\110\054\145\070\116\110\106\111\105\112\123\113"
        + "\102\114\117\115\113\116\127\001\002\000\070\052\uff5c"
        + "\054\uff5c\056\uff5c\060\uff5c\061\uff5c\062\uff5c\063\uff5c\064"
        + "\uff5c\065\132\066\uff5c\067\uff5c\070\uff5c\071\uff5c\072\uff5c"
        + "\073\uff5c\074\uff5c\075\uff5c\076\uff5c\077\uff5c\100\uff5c\101"
        + "\uff5c\102\uff5c\103\uff5c\104\uff5c\105\uff5c\106\uff5c\107\uff5c"
        + "\001\002\000\030\023\107\026\115\053\110\070\116\110"
        + "\106\111\105\112\123\113\102\114\117\115\113\116\127"
        + "\001\002\000\012\066\135\105\137\106\134\107\136\001"
        + "\002\000\030\023\107\026\115\053\110\070\116\110\106"
        + "\111\105\112\123\113\102\114\117\115\113\116\127\001"
        + "\002\000\070\052\uffda\054\uffda\056\uffda\060\uffda\061\uffda"
        + "\062\uffda\063\uffda\064\uffda\065\uffda\066\uffda\067\uffda\070"
        + "\uffda\071\uffda\072\uffda\073\uffda\074\uffda\075\uffda\076\uffda"
        + "\077\uffda\100\uffda\101\uffda\102\uffda\103\uffda\104\uffda\105"
        + "\uffda\106\uffda\107\uffda\001\002\000\030\023\107\026\115"
        + "\053\110\070\116\110\106\111\105\112\123\113\102\114"
        + "\117\115\113\116\127\001\002\000\030\023\107\026\115"
        + "\053\110\070\116\110\106\111\105\112\123\113\102\114"
        + "\117\115\113\116\127\001\002\000\026\052\uffb3\054\uffb3"
        + "\056\uffb3\060\uffb3\061\uffb3\064\uffb3\066\uffb3\105\uffb3\106"
        + "\uffb3\107\136\001\002\000\026\052\uffb4\054\uffb4\056\uffb4"
        + "\060\uffb4\061\uffb4\064\uffb4\066\uffb4\105\uffb4\106\uffb4\107"
        + "\uffb4\001\002\000\026\052\uffb2\054\uffb2\056\uffb2\060\uffb2"
        + "\061\uffb2\064\uffb2\066\uffb2\105\uffb2\106\uffb2\107\136\001"
        + "\002\000\006\054\147\061\146\001\002\000\014\054\uff9c"
        + "\061\uff9c\105\137\106\134\107\136\001\002\000\066\052"
        + "\uff60\054\uff60\056\uff60\060\uff60\061\uff60\062\uff60\063\uff60"
        + "\064\uff60\066\uff60\067\uff60\070\uff60\071\uff60\072\uff60\073"
        + "\uff60\074\uff60\075\uff60\076\uff60\077\uff60\100\uff60\101\uff60"
        + "\102\uff60\103\uff60\104\uff60\105\uff60\106\uff60\107\uff60\001"
        + "\002\000\030\023\107\026\115\053\110\070\116\110\106"
        + "\111\105\112\123\113\102\114\117\115\113\116\127\001"
        + "\002\000\066\052\uff61\054\uff61\056\uff61\060\uff61\061\uff61"
        + "\062\uff61\063\uff61\064\uff61\066\uff61\067\uff61\070\uff61\071"
        + "\uff61\072\uff61\073\uff61\074\uff61\075\uff61\076\uff61\077\uff61"
        + "\100\uff61\101\uff61\102\uff61\103\uff61\104\uff61\105\uff61\106"
        + "\uff61\107\uff61\001\002\000\014\054\uff9d\061\uff9d\105\137"
        + "\106\134\107\136\001\002\000\026\023\107\026\115\053"
        + "\110\070\116\111\105\112\123\113\102\114\117\115\113"
        + "\116\127\001\002\000\026\023\107\026\115\053\110\070"
        + "\116\111\105\112\123\113\102\114\117\115\113\116\127"
        + "\001\002\000\026\023\107\026\115\053\110\070\116\111"
        + "\105\112\123\113\102\114\117\115\113\116\127\001\002"
        + "\000\026\023\107\026\115\053\110\070\116\111\105\112"
        + "\123\113\102\114\117\115\113\116\127\001\002\000\062"
        + "\052\uff72\054\uff72\056\uff72\060\uff72\061\uff72\064\uff72\066"
        + "\uff72\067\uff72\070\uff72\071\uff72\072\uff72\073\uff72\074\uff72"
        + "\075\uff72\076\uff72\077\uff72\100\uff72\101\uff72\102\uff72\103"
        + "\uff72\104\uff72\105\uff72\106\uff72\107\uff72\001\002\000\026"
        + "\023\107\026\115\053\110\070\116\111\105\112\123\113"
        + "\102\114\117\115\113\116\127\001\002\000\062\052\uff73"
        + "\054\uff73\056\uff73\060\uff73\061\uff73\064\uff73\066\uff73\067"
        + "\uff73\070\uff73\071\uff73\072\uff73\073\uff73\074\uff73\075\uff73"
        + "\076\uff73\077\uff73\100\uff73\101\uff73\102\uff73\103\uff73\104"
        + "\uff73\105\uff73\106\uff73\107\uff73\001\002\000\026\023\107"
        + "\026\115\053\110\070\116\111\105\112\123\113\102\114"
        + "\117\115\113\116\127\001\002\000\026\023\107\026\115"
        + "\053\110\070\116\111\105\112\123\113\102\114\117\115"
        + "\113\116\127\001\002\000\026\023\107\026\115\053\110"
        + "\070\116\111\105\112\123\113\102\114\117\115\113\116"
        + "\127\001\002\000\026\023\107\026\115\053\110\070\116"
        + "\111\105\112\123\113\102\114\117\115\113\116\127\001"
        + "\002\000\026\023\107\026\115\053\110\070\116\111\105"
        + "\112\123\113\102\114\117\115\113\116\127\001\002\000"
        + "\026\023\107\026\115\053\110\070\116\111\105\112\123"
        + "\113\102\114\117\115\113\116\127\001\002\000\026\023"
        + "\107\026\115\053\110\070\116\111\105\112\123\113\102"
        + "\114\117\115\113\116\127\001\002\000\062\052\uffc8\054"
        + "\uffc8\056\uffc8\060\uffc8\061\uffc8\064\uffc8\066\uffc8\067\uffc8"
        + "\070\uffc8\071\154\072\151\073\164\074\163\075\157\076"
        + "\155\077\uffc8\100\uffc8\101\uffc8\102\uffc8\103\uffc8\104\uffc8"
        + "\105\uffc8\106\uffc8\107\uffc8\001\002\000\046\052\uffba\054"
        + "\uffba\056\uffba\060\uffba\061\uffba\064\uffba\066\uffba\067\166"
        + "\070\160\071\154\072\151\073\164\074\163\075\157\076"
        + "\155\105\uffba\106\uffba\107\uffba\001\002\000\062\052\uffc3"
        + "\054\uffc3\056\uffc3\060\uffc3\061\uffc3\064\uffc3\066\uffc3\067"
        + "\uffc3\070\uffc3\071\uffc3\072\uffc3\073\uffc3\074\163\075\157"
        + "\076\155\077\uffc3\100\uffc3\101\uffc3\102\uffc3\103\uffc3\104"
        + "\uffc3\105\uffc3\106\uffc3\107\uffc3\001\002\000\062\052\uffc4"
        + "\054\uffc4\056\uffc4\060\uffc4\061\uffc4\064\uffc4\066\uffc4\067"
        + "\uffc4\070\uffc4\071\uffc4\072\uffc4\073\uffc4\074\uffc4\075\157"
        + "\076\155\077\uffc4\100\uffc4\101\uffc4\102\uffc4\103\uffc4\104"
        + "\uffc4\105\uffc4\106\uffc4\107\uffc4\001\002\000\046\052\uffb7"
        + "\054\uffb7\056\uffb7\060\uffb7\061\uffb7\064\uffb7\066\uffb7\067"
        + "\166\070\160\071\154\072\151\073\164\074\163\075\157"
        + "\076\155\105\uffb7\106\uffb7\107\uffb7\001\002\000\046\052"
        + "\uffb9\054\uffb9\056\uffb9\060\uffb9\061\uffb9\064\uffb9\066\uffb9"
        + "\067\166\070\160\071\154\072\151\073\164\074\163\075"
        + "\157\076\155\105\uffb9\106\uffb9\107\uffb9\001\002\000\062"
        + "\052\uffc7\054\uffc7\056\uffc7\060\uffc7\061\uffc7\064\uffc7\066"
        + "\uffc7\067\uffc7\070\uffc7\071\154\072\151\073\164\074\163"
        + "\075\157\076\155\077\uffc7\100\uffc7\101\uffc7\102\uffc7\103"
        + "\uffc7\104\uffc7\105\uffc7\106\uffc7\107\uffc7\001\002\000\046"
        + "\052\uffb6\054\uffb6\056\uffb6\060\uffb6\061\uffb6\064\uffb6\066"
        + "\uffb6\067\166\070\160\071\154\072\151\073\164\074\163"
        + "\075\157\076\155\105\uffb6\106\uffb6\107\uffb6\001\002\000"
        + "\062\052\uffc6\054\uffc6\056\uffc6\060\uffc6\061\uffc6\064\uffc6"
        + "\066\uffc6\067\uffc6\070\uffc6\071\uffc6\072\uffc6\073\uffc6\074"
        + "\163\075\157\076\155\077\uffc6\100\uffc6\101\uffc6\102\uffc6"
        + "\103\uffc6\104\uffc6\105\uffc6\106\uffc6\107\uffc6\001\002\000"
        + "\046\052\uffbb\054\uffbb\056\uffbb\060\uffbb\061\uffbb\064\uffbb"
        + "\066\uffbb\067\166\070\160\071\154\072\151\073\164\074"
        + "\163\075\157\076\155\105\uffbb\106\uffbb\107\uffbb\001\002"
        + "\000\046\052\uffb8\054\uffb8\056\uffb8\060\uffb8\061\uffb8\064"
        + "\uffb8\066\uffb8\067\166\070\160\071\154\072\151\073\164"
        + "\074\163\075\157\076\155\105\uffb8\106\uffb8\107\uffb8\001"
        + "\002\000\062\052\uffc5\054\uffc5\056\uffc5\060\uffc5\061\uffc5"
        + "\064\uffc5\066\uffc5\067\uffc5\070\uffc5\071\uffc5\072\uffc5\073"
        + "\uffc5\074\163\075\157\076\155\077\uffc5\100\uffc5\101\uffc5"
        + "\102\uffc5\103\uffc5\104\uffc5\105\uffc5\106\uffc5\107\uffc5\001"
        + "\002\000\024\005\uffde\007\uffde\010\uffde\011\uffde\012\uffde"
        + "\013\uffde\014\uffde\056\uffde\116\uffde\001\002\000\062\052"
        + "\uffc1\054\uffc1\056\uffc1\060\uffc1\061\uffc1\064\uffc1\066\uffc1"
        + "\067\uffc1\070\uffc1\071\154\072\151\073\164\074\163\075"
        + "\157\076\155\077\uffc1\100\uffc1\101\uffc1\102\uffc1\103\uffc1"
        + "\104\uffc1\105\uffc1\106\uffc1\107\uffc1\001\002\000\004\053"
        + "\206\001\002\000\032\023\107\026\115\053\110\054\210"
        + "\070\116\110\106\111\105\112\123\113\102\114\117\115"
        + "\113\116\127\001\002\000\006\054\211\061\146\001\002"
        + "\000\062\052\uff65\054\uff65\056\uff65\060\uff65\061\uff65\064"
        + "\uff65\066\uff65\067\uff65\070\uff65\071\uff65\072\uff65\073\uff65"
        + "\074\uff65\075\uff65\076\uff65\077\uff65\100\uff65\101\uff65\102"
        + "\uff65\103\uff65\104\uff65\105\uff65\106\uff65\107\uff65\001\002"
        + "\000\062\052\uff66\054\uff66\056\uff66\060\uff66\061\uff66\064"
        + "\uff66\066\uff66\067\uff66\070\uff66\071\uff66\072\uff66\073\uff66"
        + "\074\uff66\075\uff66\076\uff66\077\uff66\100\uff66\101\uff66\102"
        + "\uff66\103\uff66\104\uff66\105\uff66\106\uff66\107\uff66\001\002"
        + "\000\004\116\127\001\002\000\066\052\uff63\054\uff63\056"
        + "\uff63\060\uff63\061\uff63\062\uff63\063\uff63\064\uff63\066\uff63"
        + "\067\uff63\070\uff63\071\uff63\072\uff63\073\uff63\074\uff63\075"
        + "\uff63\076\uff63\077\uff63\100\uff63\101\uff63\102\uff63\103\uff63"
        + "\104\uff63\105\uff63\106\uff63\107\uff63\001\002\000\012\054"
        + "\215\105\137\106\134\107\136\001\002\000\062\052\uffc2"
        + "\054\uffc2\056\uffc2\060\uffc2\061\uffc2\064\uffc2\066\uffc2\067"
        + "\uffc2\070\uffc2\071\uffc2\072\uffc2\073\uffc2\074\uffc2\075\uffc2"
        + "\076\uffc2\077\uffc2\100\uffc2\101\uffc2\102\uffc2\103\uffc2\104"
        + "\uffc2\105\uffc2\106\uffc2\107\uffc2\001\002\000\064\052\uff64"
        + "\054\uff64\056\uff64\060\uff64\061\uff64\063\212\064\uff64\066"
        + "\uff64\067\uff64\070\uff64\071\uff64\072\uff64\073\uff64\074\uff64"
        + "\075\uff64\076\uff64\077\uff64\100\uff64\101\uff64\102\uff64\103"
        + "\uff64\104\uff64\105\uff64\106\uff64\107\uff64\001\002\000\026"
        + "\052\uffb1\054\uffb1\056\uffb1\060\uffb1\061\uffb1\064\uffb1\066"
        + "\uffb1\105\uffb1\106\uffb1\107\uffb1\001\002\000\006\060\221"
        + "\062\222\001\002\000\024\005\uffdd\007\uffdd\010\uffdd\011"
        + "\uffdd\012\uffdd\013\uffdd\014\uffdd\056\uffdd\116\uffdd\001\002"
        + "\000\032\023\107\026\115\053\110\055\224\070\116\110"
        + "\106\111\105\112\123\113\102\114\117\115\113\116\127"
        + "\001\002\000\004\060\241\001\002\000\032\023\107\026"
        + "\115\053\110\055\224\070\116\110\106\111\105\112\123"
        + "\113\102\114\117\115\113\116\127\001\002\000\012\060"
        + "\226\105\137\106\134\107\136\001\002\000\024\005\uffdb"
        + "\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\056"
        + "\uffdb\116\uffdb\001\002\000\006\056\uffd5\061\uffd5\001\002"
        + "\000\014\056\uffd3\061\uffd3\105\137\106\134\107\136\001"
        + "\002\000\006\056\237\061\236\001\002\000\006\056\234"
        + "\061\233\001\002\000\004\055\224\001\002\000\010\056"
        + "\uffd7\060\uffd7\061\uffd7\001\002\000\006\056\uffd6\061\uffd6"
        + "\001\002\000\030\023\107\026\115\053\110\070\116\110"
        + "\106\111\105\112\123\113\102\114\117\115\113\116\127"
        + "\001\002\000\010\056\uffd8\060\uffd8\061\uffd8\001\002\000"
        + "\014\056\uffd4\061\uffd4\105\137\106\134\107\136\001\002"
        + "\000\024\005\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013"
        + "\uffdc\014\uffdc\056\uffdc\116\uffdc\001\002\000\012\066\243"
        + "\105\137\106\134\107\136\001\002\000\070\052\uffd9\054"
        + "\uffd9\056\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9"
        + "\065\uffd9\066\uffd9\067\uffd9\070\uffd9\071\uffd9\072\uffd9\073"
        + "\uffd9\074\uffd9\075\uffd9\076\uffd9\077\uffd9\100\uffd9\101\uffd9"
        + "\102\uffd9\103\uffd9\104\uffd9\105\uffd9\106\uffd9\107\uffd9\001"
        + "\002\000\012\060\uffef\061\uffef\062\uffef\064\033\001\002"
        + "\000\006\060\246\061\073\001\002\000\024\005\uffe2\007"
        + "\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\056\uffe2"
        + "\116\uffe2\001\002\000\010\060\uffd1\061\uffd1\062\250\001"
        + "\002\000\032\021\252\023\107\026\115\053\110\070\116"
        + "\110\106\111\105\112\123\113\102\114\117\115\113\116"
        + "\127\001\002\000\012\060\257\105\137\106\134\107\136"
        + "\001\002\000\004\116\253\001\002\000\004\053\254\001"
        + "\002\000\004\054\255\001\002\000\004\060\256\001\002"
        + "\000\024\005\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013"
        + "\uffe1\014\uffe1\056\uffe1\116\uffe1\001\002\000\024\005\uffe0"
        + "\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\056"
        + "\uffe0\116\uffe0\001\002\000\006\002\ufff3\004\ufff3\001\002"
        + "\000\004\053\u0140\001\002\000\004\053\263\001\002\000"
        + "\004\054\264\001\002\000\004\055\265\001\002\000\056"
        + "\005\306\022\323\023\107\026\115\027\316\036\270\037"
        + "\300\041\276\044\310\045\302\046\315\047\266\050\322"
        + "\053\110\056\uff98\070\116\111\105\112\123\113\102\114"
        + "\117\115\113\116\127\001\002\000\004\060\uff6a\001\002"
        + "\000\024\060\u013f\067\uffbc\070\uffbc\071\uffbc\072\uffbc\073"
        + "\uffbc\074\uffbc\075\uffbc\076\uffbc\001\002\000\004\053\u013c"
        + "\001\002\000\004\060\u013b\001\002\000\062\005\uff92\022"
        + "\uff92\023\uff92\026\uff92\027\uff92\036\uff92\037\uff92\041\uff92"
        + "\042\uff92\043\uff92\044\uff92\045\uff92\046\uff92\047\uff92\050"
        + "\uff92\053\uff92\056\uff92\070\uff92\111\uff92\112\uff92\113\uff92"
        + "\114\uff92\115\uff92\116\uff92\001\002\000\062\005\uff9a\022"
        + "\uff9a\023\uff9a\026\uff9a\027\uff9a\036\uff9a\037\uff9a\041\uff9a"
        + "\042\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a\050"
        + "\uff9a\053\uff9a\056\uff9a\070\uff9a\111\uff9a\112\uff9a\113\uff9a"
        + "\114\uff9a\115\uff9a\116\uff9a\001\002\000\004\056\u013a\001"
        + "\002\000\062\005\306\022\323\023\107\026\115\027\316"
        + "\036\270\037\300\041\276\042\uff99\043\uff99\044\310\045"
        + "\302\046\315\047\266\050\322\053\110\056\uff99\070\116"
        + "\111\105\112\123\113\102\114\117\115\113\116\127\001"
        + "\002\000\004\053\u0128\001\002\000\022\067\166\070\160"
        + "\071\154\072\151\073\164\074\163\075\157\076\155\001"
        + "\002\000\004\053\u011e\001\002\000\062\005\uff8f\022\uff8f"
        + "\023\uff8f\026\uff8f\027\uff8f\036\uff8f\037\uff8f\041\uff8f\042"
        + "\uff8f\043\uff8f\044\uff8f\045\uff8f\046\uff8f\047\uff8f\050\uff8f"
        + "\053\uff8f\056\uff8f\070\uff8f\111\uff8f\112\uff8f\113\uff8f\114"
        + "\uff8f\115\uff8f\116\uff8f\001\002\000\004\053\u0118\001\002"
        + "\000\004\060\u0117\001\002\000\004\060\u0116\001\002\000"
        + "\004\060\u0115\001\002\000\016\007\061\010\063\011\067"
        + "\012\062\013\066\116\u0101\001\002\000\024\060\u0100\067"
        + "\uffbe\070\uffbe\071\uffbe\072\uffbe\073\uffbe\074\uffbe\075\uffbe"
        + "\076\uffbe\001\002\000\004\053\356\001\002\000\004\060"
        + "\355\001\002\000\004\060\354\001\002\000\062\005\uff91"
        + "\022\uff91\023\uff91\026\uff91\027\uff91\036\uff91\037\uff91\041"
        + "\uff91\042\uff91\043\uff91\044\uff91\045\uff91\046\uff91\047\uff91"
        + "\050\uff91\053\uff91\056\uff91\070\uff91\111\uff91\112\uff91\113"
        + "\uff91\114\uff91\115\uff91\116\uff91\001\002\000\004\060\353"
        + "\001\002\000\004\055\344\001\002\000\004\053\337\001"
        + "\002\000\026\062\330\063\212\067\uffbf\070\uffbf\071\uffbf"
        + "\072\uffbf\073\uffbf\074\uffbf\075\uffbf\076\uffbf\001\002\000"
        + "\024\060\327\067\uffbd\070\uffbd\071\uffbd\072\uffbd\073\uffbd"
        + "\074\uffbd\075\uffbd\076\uffbd\001\002\000\004\060\326\001"
        + "\002\000\004\060\uff69\001\002\000\032\023\107\026\115"
        + "\053\110\060\uff6c\070\116\110\106\111\105\112\123\113"
        + "\102\114\117\115\113\116\127\001\002\000\062\005\uff90"
        + "\022\uff90\023\uff90\026\uff90\027\uff90\036\uff90\037\uff90\041"
        + "\uff90\042\uff90\043\uff90\044\uff90\045\uff90\046\uff90\047\uff90"
        + "\050\uff90\053\uff90\056\uff90\070\uff90\111\uff90\112\uff90\113"
        + "\uff90\114\uff90\115\uff90\116\uff90\001\002\000\012\060\uff6b"
        + "\105\137\106\134\107\136\001\002\000\062\005\uff8c\022"
        + "\uff8c\023\uff8c\026\uff8c\027\uff8c\036\uff8c\037\uff8c\041\uff8c"
        + "\042\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c\047\uff8c\050"
        + "\uff8c\053\uff8c\056\uff8c\070\uff8c\111\uff8c\112\uff8c\113\uff8c"
        + "\114\uff8c\115\uff8c\116\uff8c\001\002\000\062\005\uff96\022"
        + "\uff96\023\uff96\026\uff96\027\uff96\036\uff96\037\uff96\041\uff96"
        + "\042\uff96\043\uff96\044\uff96\045\uff96\046\uff96\047\uff96\050"
        + "\uff96\053\uff96\056\uff96\070\uff96\111\uff96\112\uff96\113\uff96"
        + "\114\uff96\115\uff96\116\uff96\001\002\000\034\021\333\023"
        + "\107\026\115\053\110\055\224\070\116\110\106\111\105"
        + "\112\123\113\102\114\117\115\113\116\127\001\002\000"
        + "\004\060\uff7d\001\002\000\012\060\uff7e\105\137\106\134"
        + "\107\136\001\002\000\004\116\334\001\002\000\004\053"
        + "\335\001\002\000\004\054\336\001\002\000\004\060\uff7c"
        + "\001\002\000\004\116\127\001\002\000\006\061\341\063"
        + "\212\001\002\000\004\116\127\001\002\000\006\054\343"
        + "\063\212\001\002\000\004\060\uff68\001\002\000\056\005"
        + "\306\022\323\023\107\026\115\027\316\036\270\037\300"
        + "\041\276\044\310\045\302\046\315\047\266\050\322\053"
        + "\110\056\uff98\070\116\111\105\112\123\113\102\114\117"
        + "\115\113\116\127\001\002\000\004\056\346\001\002\000"
        + "\004\045\347\001\002\000\004\053\350\001\002\000\030"
        + "\023\107\026\115\053\110\070\116\110\106\111\105\112"
        + "\123\113\102\114\117\115\113\116\127\001\002\000\012"
        + "\054\352\105\137\106\134\107\136\001\002\000\004\060"
        + "\uff6d\001\002\000\062\005\uff95\022\uff95\023\uff95\026\uff95"
        + "\027\uff95\036\uff95\037\uff95\041\uff95\042\uff95\043\uff95\044"
        + "\uff95\045\uff95\046\uff95\047\uff95\050\uff95\053\uff95\056\uff95"
        + "\070\uff95\111\uff95\112\uff95\113\uff95\114\uff95\115\uff95\116"
        + "\uff95\001\002\000\062\005\uff94\022\uff94\023\uff94\026\uff94"
        + "\027\uff94\036\uff94\037\uff94\041\uff94\042\uff94\043\uff94\044"
        + "\uff94\045\uff94\046\uff94\047\uff94\050\uff94\053\uff94\056\uff94"
        + "\070\uff94\111\uff94\112\uff94\113\uff94\114\uff94\115\uff94\116"
        + "\uff94\001\002\000\062\005\uff8a\022\uff8a\023\uff8a\026\uff8a"
        + "\027\uff8a\036\uff8a\037\uff8a\041\uff8a\042\uff8a\043\uff8a\044"
        + "\uff8a\045\uff8a\046\uff8a\047\uff8a\050\uff8a\053\uff8a\056\uff8a"
        + "\070\uff8a\111\uff8a\112\uff8a\113\uff8a\114\uff8a\115\uff8a\116"
        + "\uff8a\001\002\000\006\005\360\116\127\001\002\000\006"
        + "\062\376\063\212\001\002\000\004\007\372\001\002\000"
        + "\004\052\362\001\002\000\030\023\107\026\115\053\110"
        + "\070\116\110\106\111\105\112\123\113\102\114\117\115"
        + "\113\116\127\001\002\000\012\052\364\105\137\106\134"
        + "\107\136\001\002\000\026\023\107\026\115\053\110\070"
        + "\116\111\105\112\123\113\102\114\117\115\113\116\127"
        + "\001\002\000\024\054\366\067\uffbc\070\uffbc\071\uffbc\072"
        + "\uffbc\073\uffbc\074\uffbc\075\uffbc\076\uffbc\001\002\000\004"
        + "\055\367\001\002\000\056\005\306\022\323\023\107\026"
        + "\115\027\316\036\270\037\300\041\276\044\310\045\302"
        + "\046\315\047\266\050\322\053\110\056\uff98\070\116\111"
        + "\105\112\123\113\102\114\117\115\113\116\127\001\002"
        + "\000\004\056\371\001\002\000\062\005\uff71\022\uff71\023"
        + "\uff71\026\uff71\027\uff71\036\uff71\037\uff71\041\uff71\042\uff71"
        + "\043\uff71\044\uff71\045\uff71\046\uff71\047\uff71\050\uff71\053"
        + "\uff71\056\uff71\070\uff71\111\uff71\112\uff71\113\uff71\114\uff71"
        + "\115\uff71\116\uff71\001\002\000\004\116\373\001\002\000"
        + "\004\062\374\001\002\000\030\023\107\026\115\053\110"
        + "\070\116\110\106\111\105\112\123\113\102\114\117\115"
        + "\113\116\127\001\002\000\012\052\uff70\105\137\106\134"
        + "\107\136\001\002\000\030\023\107\026\115\053\110\070"
        + "\116\110\106\111\105\112\123\113\102\114\117\115\113"
        + "\116\127\001\002\000\012\052\uff6f\105\137\106\134\107"
        + "\136\001\002\000\062\005\uff97\022\uff97\023\uff97\026\uff97"
        + "\027\uff97\036\uff97\037\uff97\041\uff97\042\uff97\043\uff97\044"
        + "\uff97\045\uff97\046\uff97\047\uff97\050\uff97\053\uff97\056\uff97"
        + "\070\uff97\111\uff97\112\uff97\113\uff97\114\uff97\115\uff97\116"
        + "\uff97\001\002\000\004\116\u010d\001\002\000\004\116\u0103"
        + "\001\002\000\012\060\uff87\061\uff87\062\u0107\065\076\001"
        + "\002\000\006\060\uff86\061\u0105\001\002\000\004\116\u0106"
        + "\001\002\000\006\060\uff88\061\uff88\001\002\000\030\023"
        + "\107\026\115\053\110\070\116\110\106\111\105\112\123"
        + "\113\102\114\117\115\113\116\127\001\002\000\010\060"
        + "\uff81\062\u0109\065\132\001\002\000\032\023\107\026\115"
        + "\053\110\055\224\070\116\110\106\111\105\112\123\113"
        + "\102\114\117\115\113\116\127\001\002\000\004\060\uff80"
        + "\001\002\000\012\060\uff7f\105\137\106\134\107\136\001"
        + "\002\000\012\060\uff85\105\137\106\134\107\136\001\002"
        + "\000\010\060\uff87\061\uff87\062\u010f\001\002\000\006\060"
        + "\uff84\061\u0105\001\002\000\032\021\u0111\023\107\026\115"
        + "\053\110\070\116\110\106\111\105\112\123\113\102\114"
        + "\117\115\113\116\127\001\002\000\012\060\uff82\105\137"
        + "\106\134\107\136\001\002\000\004\116\u0112\001\002\000"
        + "\004\053\u0113\001\002\000\004\054\u0114\001\002\000\004"
        + "\060\uff83\001\002\000\062\005\uff8d\022\uff8d\023\uff8d\026"
        + "\uff8d\027\uff8d\036\uff8d\037\uff8d\041\uff8d\042\uff8d\043\uff8d"
        + "\044\uff8d\045\uff8d\046\uff8d\047\uff8d\050\uff8d\053\uff8d\056"
        + "\uff8d\070\uff8d\111\uff8d\112\uff8d\113\uff8d\114\uff8d\115\uff8d"
        + "\116\uff8d\001\002\000\062\005\uff8b\022\uff8b\023\uff8b\026"
        + "\uff8b\027\uff8b\036\uff8b\037\uff8b\041\uff8b\042\uff8b\043\uff8b"
        + "\044\uff8b\045\uff8b\046\uff8b\047\uff8b\050\uff8b\053\uff8b\056"
        + "\uff8b\070\uff8b\111\uff8b\112\uff8b\113\uff8b\114\uff8b\115\uff8b"
        + "\116\uff8b\001\002\000\062\005\uff8e\022\uff8e\023\uff8e\026"
        + "\uff8e\027\uff8e\036\uff8e\037\uff8e\041\uff8e\042\uff8e\043\uff8e"
        + "\044\uff8e\045\uff8e\046\uff8e\047\uff8e\050\uff8e\053\uff8e\056"
        + "\uff8e\070\uff8e\111\uff8e\112\uff8e\113\uff8e\114\uff8e\115\uff8e"
        + "\116\uff8e\001\002\000\030\023\107\026\115\053\110\070"
        + "\116\110\106\111\105\112\123\113\102\114\117\115\113"
        + "\116\127\001\002\000\012\054\u011a\105\137\106\134\107"
        + "\136\001\002\000\004\055\u011b\001\002\000\056\005\306"
        + "\022\323\023\107\026\115\027\316\036\270\037\300\041"
        + "\276\044\310\045\302\046\315\047\266\050\322\053\110"
        + "\056\uff98\070\116\111\105\112\123\113\102\114\117\115"
        + "\113\116\127\001\002\000\004\056\u011d\001\002\000\062"
        + "\005\uff6e\022\uff6e\023\uff6e\026\uff6e\027\uff6e\036\uff6e\037"
        + "\uff6e\041\uff6e\042\uff6e\043\uff6e\044\uff6e\045\uff6e\046\uff6e"
        + "\047\uff6e\050\uff6e\053\uff6e\056\uff6e\070\uff6e\111\uff6e\112"
        + "\uff6e\113\uff6e\114\uff6e\115\uff6e\116\uff6e\001\002\000\030"
        + "\023\107\026\115\053\110\070\116\110\106\111\105\112"
        + "\123\113\102\114\117\115\113\116\127\001\002\000\012"
        + "\054\u0120\105\137\106\134\107\136\001\002\000\004\055"
        + "\u0121\001\002\000\056\005\306\022\323\023\107\026\115"
        + "\027\316\036\270\037\300\041\276\044\310\045\302\046"
        + "\315\047\266\050\322\053\110\056\uff98\070\116\111\105"
        + "\112\123\113\102\114\117\115\113\116\127\001\002\000"
        + "\004\056\u0123\001\002\000\064\005\uff7b\022\uff7b\023\uff7b"
        + "\026\uff7b\027\uff7b\036\uff7b\037\uff7b\040\u0124\041\uff7b\042"
        + "\uff7b\043\uff7b\044\uff7b\045\uff7b\046\uff7b\047\uff7b\050\uff7b"
        + "\053\uff7b\056\uff7b\070\uff7b\111\uff7b\112\uff7b\113\uff7b\114"
        + "\uff7b\115\uff7b\116\uff7b\001\002\000\004\055\u0125\001\002"
        + "\000\056\005\306\022\323\023\107\026\115\027\316\036"
        + "\270\037\300\041\276\044\310\045\302\046\315\047\266"
        + "\050\322\053\110\056\uff98\070\116\111\105\112\123\113"
        + "\102\114\117\115\113\116\127\001\002\000\004\056\u0127"
        + "\001\002\000\062\005\uff7a\022\uff7a\023\uff7a\026\uff7a\027"
        + "\uff7a\036\uff7a\037\uff7a\041\uff7a\042\uff7a\043\uff7a\044\uff7a"
        + "\045\uff7a\046\uff7a\047\uff7a\050\uff7a\053\uff7a\056\uff7a\070"
        + "\uff7a\111\uff7a\112\uff7a\113\uff7a\114\uff7a\115\uff7a\116\uff7a"
        + "\001\002\000\004\116\127\001\002\000\006\054\u012a\063"
        + "\212\001\002\000\004\055\u012b\001\002\000\004\042\u012d"
        + "\001\002\000\010\042\u012d\043\u0133\056\u0134\001\002\000"
        + "\030\023\107\026\115\053\110\070\116\110\106\111\105"
        + "\112\123\113\102\114\117\115\113\116\127\001\002\000"
        + "\010\042\uff76\043\uff76\056\uff76\001\002\000\012\064\u0130"
        + "\105\137\106\134\107\136\001\002\000\062\005\306\022"
        + "\323\023\107\026\115\027\316\036\270\037\300\041\276"
        + "\042\uff98\043\uff98\044\310\045\302\046\315\047\266\050"
        + "\322\053\110\056\uff98\070\116\111\105\112\123\113\102"
        + "\114\117\115\113\116\127\001\002\000\010\042\uff75\043"
        + "\uff75\056\uff75\001\002\000\004\056\u0138\001\002\000\004"
        + "\064\u0136\001\002\000\062\005\uff79\022\uff79\023\uff79\026"
        + "\uff79\027\uff79\036\uff79\037\uff79\041\uff79\042\uff79\043\uff79"
        + "\044\uff79\045\uff79\046\uff79\047\uff79\050\uff79\053\uff79\056"
        + "\uff79\070\uff79\111\uff79\112\uff79\113\uff79\114\uff79\115\uff79"
        + "\116\uff79\001\002\000\010\042\uff77\043\uff77\056\uff77\001"
        + "\002\000\056\005\306\022\323\023\107\026\115\027\316"
        + "\036\270\037\300\041\276\044\310\045\302\046\315\047"
        + "\266\050\322\053\110\056\uff98\070\116\111\105\112\123"
        + "\113\102\114\117\115\113\116\127\001\002\000\004\056"
        + "\uff74\001\002\000\062\005\uff78\022\uff78\023\uff78\026\uff78"
        + "\027\uff78\036\uff78\037\uff78\041\uff78\042\uff78\043\uff78\044"
        + "\uff78\045\uff78\046\uff78\047\uff78\050\uff78\053\uff78\056\uff78"
        + "\070\uff78\111\uff78\112\uff78\113\uff78\114\uff78\115\uff78\116"
        + "\uff78\001\002\000\062\005\uff9b\022\uff9b\023\uff9b\026\uff9b"
        + "\027\uff9b\036\uff9b\037\uff9b\041\uff9b\042\uff9b\043\uff9b\044"
        + "\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b\053\uff9b\056\uff9b"
        + "\070\uff9b\111\uff9b\112\uff9b\113\uff9b\114\uff9b\115\uff9b\116"
        + "\uff9b\001\002\000\024\005\uffa9\007\uffa9\010\uffa9\011\uffa9"
        + "\012\uffa9\013\uffa9\014\uffa9\056\uffa9\116\uffa9\001\002\000"
        + "\062\005\uff89\022\uff89\023\uff89\026\uff89\027\uff89\036\uff89"
        + "\037\uff89\041\uff89\042\uff89\043\uff89\044\uff89\045\uff89\046"
        + "\uff89\047\uff89\050\uff89\053\uff89\056\uff89\070\uff89\111\uff89"
        + "\112\uff89\113\uff89\114\uff89\115\uff89\116\uff89\001\002\000"
        + "\030\023\107\026\115\053\110\070\116\110\106\111\105"
        + "\112\123\113\102\114\117\115\113\116\127\001\002\000"
        + "\012\054\u013e\105\137\106\134\107\136\001\002\000\004"
        + "\060\uff67\001\002\000\062\005\uff93\022\uff93\023\uff93\026"
        + "\uff93\027\uff93\036\uff93\037\uff93\041\uff93\042\uff93\043\uff93"
        + "\044\uff93\045\uff93\046\uff93\047\uff93\050\uff93\053\uff93\056"
        + "\uff93\070\uff93\111\uff93\112\uff93\113\uff93\114\uff93\115\uff93"
        + "\116\uff93\001\002\000\004\054\u0141\001\002\000\004\055"
        + "\u0142\001\002\000\056\005\306\022\323\023\107\026\115"
        + "\027\316\036\270\037\300\041\276\044\310\045\302\046"
        + "\315\047\266\050\322\053\110\056\uff98\070\116\111\105"
        + "\112\123\113\102\114\117\115\113\116\127\001\002\000"
        + "\004\056\u0144\001\002\000\024\005\uffa8\007\uffa8\010\uffa8"
        + "\011\uffa8\012\uffa8\013\uffa8\014\uffa8\056\uffa8\116\uffa8\001"
        + "\002\000\004\053\u0146\001\002\000\006\005\u0147\054\uffa6"
        + "\001\002\000\016\007\061\010\063\011\067\012\062\013"
        + "\066\116\u0152\001\002\000\006\054\uffa4\061\uffa4\001\002"
        + "\000\006\054\uffa7\061\u0150\001\002\000\004\054\u014b\001"
        + "\002\000\006\055\uffef\064\033\001\002\000\004\055\u014d"
        + "\001\002\000\056\005\306\022\323\023\107\026\115\027"
        + "\316\036\270\037\300\041\276\044\310\045\302\046\315"
        + "\047\266\050\322\053\110\056\uff98\070\116\111\105\112"
        + "\123\113\102\114\117\115\113\116\127\001\002\000\004"
        + "\056\u014f\001\002\000\024\005\uffaa\007\uffaa\010\uffaa\011"
        + "\uffaa\012\uffaa\013\uffaa\014\uffaa\056\uffaa\116\uffaa\001\002"
        + "\000\004\005\u0147\001\002\000\006\054\uffa5\061\uffa5\001"
        + "\002\000\004\116\uffa2\001\002\000\004\116\u0155\001\002"
        + "\000\004\116\uffa3\001\002\000\010\054\uffa1\061\uffa1\065"
        + "\u0156\001\002\000\004\066\u015a\001\002\000\010\054\uffa0"
        + "\061\uffa0\065\u0158\001\002\000\004\066\u0159\001\002\000"
        + "\010\054\uff9f\061\uff9f\065\uff9f\001\002\000\010\054\uff9e"
        + "\061\uff9e\065\uff9e\001\002\000\024\005\uffd0\007\uffd0\010"
        + "\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\056\uffd0\116\uffd0"
        + "\001\002\000\004\056\u015d\001\002\000\006\002\ufff4\004"
        + "\ufff4\001\002\000\014\020\ufff1\055\ufff1\060\ufff1\061\ufff1"
        + "\062\ufff1\001\002\000\014\020\ufff0\055\ufff0\060\ufff0\061"
        + "\ufff0\062\ufff0\001\002\000\014\020\ufff2\055\ufff2\060\ufff2"
        + "\061\ufff2\062\ufff2\001\002\000\006\002\ufff6\004\ufff6\001"
        + "\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /**
     * <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table
            = unpackFromStrings(new String[]{
        "\000\u015f\000\010\002\005\004\004\005\003\001\001\000"
        + "\006\006\015\007\020\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\006\003\026\010\027\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\004\010\u0160\001\001\000\002"
        + "\001\001\000\002\001\001\000\004\024\033\001\001\000"
        + "\002\001\001\000\002\001\001\000\022\011\044\012\055"
        + "\015\051\016\043\017\056\020\u015b\027\046\047\041\001"
        + "\001\000\002\001\001\000\002\001\001\000\022\011\044"
        + "\012\055\015\051\016\043\017\056\020\054\027\046\047"
        + "\041\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\016\011\044\012\055\015\u015a\017\056\027"
        + "\046\047\041\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\004\025"
        + "\064\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\004\013\244\001\001\000\004\013\070\001"
        + "\001\000\002\001\001\000\002\001\001\000\006\024\077"
        + "\043\076\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\004\024\074\001\001\000\002\001\001"
        + "\000\030\021\123\022\241\023\113\030\125\031\103\051"
        + "\102\052\111\053\121\070\120\073\110\074\124\001\001"
        + "\000\004\024\217\001\001\000\002\001\001\000\030\021"
        + "\123\022\117\023\113\030\125\031\103\051\102\052\111"
        + "\053\121\070\120\073\110\074\124\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\030\021\123\022\216\023\113\030\125\031\103\051"
        + "\102\052\111\053\121\070\120\073\110\074\124\001\001"
        + "\000\012\031\103\051\102\052\215\053\121\001\001\000"
        + "\030\021\123\022\213\023\113\030\125\031\103\051\102"
        + "\052\111\053\121\070\120\073\110\074\124\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\024\021\203\030\125\031"
        + "\103\051\102\052\111\053\121\070\120\073\110\074\124"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\004\043\130\001"
        + "\001\000\032\021\123\022\143\023\113\030\125\031\103"
        + "\032\142\051\102\052\111\053\121\070\120\073\110\074"
        + "\124\001\001\000\002\001\001\000\030\021\123\022\132"
        + "\023\113\030\125\031\103\051\102\052\111\053\121\070"
        + "\120\073\110\074\124\001\001\000\002\001\001\000\030"
        + "\021\123\022\141\023\113\030\125\031\103\051\102\052"
        + "\111\053\121\070\120\073\110\074\124\001\001\000\002"
        + "\001\001\000\030\021\123\022\140\023\113\030\125\031"
        + "\103\051\102\052\111\053\121\070\120\073\110\074\124"
        + "\001\001\000\030\021\123\022\137\023\113\030\125\031"
        + "\103\051\102\052\111\053\121\070\120\073\110\074\124"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\030\021\123\022\147\023\113\030\125\031\103\051"
        + "\102\052\111\053\121\070\120\073\110\074\124\001\001"
        + "\000\002\001\001\000\002\001\001\000\024\021\201\030"
        + "\125\031\103\051\102\052\111\053\121\070\120\073\110"
        + "\074\124\001\001\000\024\021\200\030\125\031\103\051"
        + "\102\052\111\053\121\070\120\073\110\074\124\001\001"
        + "\000\024\021\177\030\125\031\103\051\102\052\111\053"
        + "\121\070\120\073\110\074\124\001\001\000\024\021\176"
        + "\030\125\031\103\051\102\052\111\053\121\070\120\073"
        + "\110\074\124\001\001\000\002\001\001\000\024\021\175"
        + "\030\125\031\103\051\102\052\111\053\121\070\120\073"
        + "\110\074\124\001\001\000\002\001\001\000\024\021\174"
        + "\030\125\031\103\051\102\052\111\053\121\070\120\073"
        + "\110\074\124\001\001\000\024\021\173\030\125\031\103"
        + "\051\102\052\111\053\121\070\120\073\110\074\124\001"
        + "\001\000\024\021\172\030\125\031\103\051\102\052\111"
        + "\053\121\070\120\073\110\074\124\001\001\000\024\021"
        + "\171\030\125\031\103\051\102\052\111\053\121\070\120"
        + "\073\110\074\124\001\001\000\024\021\170\030\125\031"
        + "\103\051\102\052\111\053\121\070\120\073\110\074\124"
        + "\001\001\000\024\021\167\030\125\031\103\051\102\052"
        + "\111\053\121\070\120\073\110\074\124\001\001\000\024"
        + "\021\166\030\125\031\103\051\102\052\111\053\121\070"
        + "\120\073\110\074\124\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\032\021\123\022\143\023\113\030\125\031"
        + "\103\032\206\051\102\052\111\053\121\070\120\073\110"
        + "\074\124\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\010\031\103\051\212\053\121\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\032\021\123\022\224\023\113\030\125\031"
        + "\103\044\222\051\102\052\111\053\121\070\120\073\110"
        + "\074\124\001\001\000\002\001\001\000\036\021\123\022"
        + "\227\023\113\030\125\031\103\044\226\045\231\046\230"
        + "\051\102\052\111\053\121\070\120\073\110\074\124\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\004\044\234\001\001\000\002\001\001\000\002\001\001"
        + "\000\030\021\123\022\237\023\113\030\125\031\103\051"
        + "\102\052\111\053\121\070\120\073\110\074\124\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\004\024\246\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\030\021\123\022\250\023\113\030\125\031\103\051\102"
        + "\052\111\053\121\070\120\073\110\074\124\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\062\021\276\030"
        + "\125\031\103\033\273\034\274\035\272\036\313\037\311"
        + "\051\102\052\316\053\121\054\270\055\271\056\312\057"
        + "\323\060\300\061\302\062\303\063\304\064\320\070\266"
        + "\072\310\073\306\074\317\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\056\021"
        + "\276\030\125\031\103\035\u0138\036\313\037\311\051\102"
        + "\052\316\053\121\054\270\055\271\056\312\057\323\060"
        + "\300\061\302\062\303\063\304\064\320\070\266\072\310"
        + "\073\306\074\317\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\004\025\u0101\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\030\021\123\022\324\023\113\030\125\031\103"
        + "\051\102\052\111\053\121\070\120\073\110\074\124\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\032\021\123\022\331\023\113\030"
        + "\125\031\103\044\330\051\102\052\111\053\121\070\120"
        + "\073\110\074\124\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\012\031\103\051\102\052\337\053"
        + "\121\001\001\000\002\001\001\000\012\031\103\051\102"
        + "\052\341\053\121\001\001\000\002\001\001\000\002\001"
        + "\001\000\062\021\276\030\125\031\103\033\344\034\274"
        + "\035\272\036\313\037\311\051\102\052\316\053\121\054"
        + "\270\055\271\056\312\057\323\060\300\061\302\062\303"
        + "\063\304\064\320\070\266\072\310\073\306\074\317\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\030\021\123\022\350\023\113\030\125\031\103\051"
        + "\102\052\111\053\121\070\120\073\110\074\124\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\014\031\103\051\102"
        + "\052\356\053\121\071\360\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\030\021\123\022\362"
        + "\023\113\030\125\031\103\051\102\052\111\053\121\070"
        + "\120\073\110\074\124\001\001\000\002\001\001\000\024"
        + "\021\276\030\125\031\103\051\102\052\111\053\121\070"
        + "\364\073\110\074\124\001\001\000\002\001\001\000\002"
        + "\001\001\000\062\021\276\030\125\031\103\033\367\034"
        + "\274\035\272\036\313\037\311\051\102\052\316\053\121"
        + "\054\270\055\271\056\312\057\323\060\300\061\302\062"
        + "\303\063\304\064\320\070\266\072\310\073\306\074\317"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\030\021\123\022\374\023\113"
        + "\030\125\031\103\051\102\052\111\053\121\070\120\073"
        + "\110\074\124\001\001\000\002\001\001\000\030\021\123"
        + "\022\376\023\113\030\125\031\103\051\102\052\111\053"
        + "\121\070\120\073\110\074\124\001\001\000\002\001\001"
        + "\000\002\001\001\000\004\014\u010d\001\001\000\004\014"
        + "\u0103\001\001\000\004\043\u0107\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\030\021\123\022"
        + "\u010b\023\113\030\125\031\103\051\102\052\111\053\121"
        + "\070\120\073\110\074\124\001\001\000\002\001\001\000"
        + "\032\021\123\022\u010a\023\113\030\125\031\103\044\u0109"
        + "\051\102\052\111\053\121\070\120\073\110\074\124\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\030\021\123\022"
        + "\u010f\023\113\030\125\031\103\051\102\052\111\053\121"
        + "\070\120\073\110\074\124\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\030\021\123\022\u0118\023\113\030\125\031\103"
        + "\051\102\052\111\053\121\070\120\073\110\074\124\001"
        + "\001\000\002\001\001\000\002\001\001\000\062\021\276"
        + "\030\125\031\103\033\u011b\034\274\035\272\036\313\037"
        + "\311\051\102\052\316\053\121\054\270\055\271\056\312"
        + "\057\323\060\300\061\302\062\303\063\304\064\320\070"
        + "\266\072\310\073\306\074\317\001\001\000\002\001\001"
        + "\000\002\001\001\000\030\021\123\022\u011e\023\113\030"
        + "\125\031\103\051\102\052\111\053\121\070\120\073\110"
        + "\074\124\001\001\000\002\001\001\000\002\001\001\000"
        + "\062\021\276\030\125\031\103\033\u0121\034\274\035\272"
        + "\036\313\037\311\051\102\052\316\053\121\054\270\055"
        + "\271\056\312\057\323\060\300\061\302\062\303\063\304"
        + "\064\320\070\266\072\310\073\306\074\317\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\062"
        + "\021\276\030\125\031\103\033\u0125\034\274\035\272\036"
        + "\313\037\311\051\102\052\316\053\121\054\270\055\271"
        + "\056\312\057\323\060\300\061\302\062\303\063\304\064"
        + "\320\070\266\072\310\073\306\074\317\001\001\000\002"
        + "\001\001\000\002\001\001\000\012\031\103\051\102\052"
        + "\u0128\053\121\001\001\000\002\001\001\000\002\001\001"
        + "\000\006\065\u012d\066\u012b\001\001\000\006\065\u0134\067"
        + "\u0131\001\001\000\030\021\123\022\u012e\023\113\030\125"
        + "\031\103\051\102\052\111\053\121\070\120\073\110\074"
        + "\124\001\001\000\002\001\001\000\002\001\001\000\062"
        + "\021\276\030\125\031\103\033\u0130\034\274\035\272\036"
        + "\313\037\311\051\102\052\316\053\121\054\270\055\271"
        + "\056\312\057\323\060\300\061\302\062\303\063\304\064"
        + "\320\070\266\072\310\073\306\074\317\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\062\021\276\030\125\031\103"
        + "\033\u0136\034\274\035\272\036\313\037\311\051\102\052"
        + "\316\053\121\054\270\055\271\056\312\057\323\060\300"
        + "\061\302\062\303\063\304\064\320\070\266\072\310\073"
        + "\306\074\317\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\030\021\123\022\u013c\023\113\030\125\031\103\051\102"
        + "\052\111\053\121\070\120\073\110\074\124\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\062\021\276\030\125\031"
        + "\103\033\u0142\034\274\035\272\036\313\037\311\051\102"
        + "\052\316\053\121\054\270\055\271\056\312\057\323\060"
        + "\300\061\302\062\303\063\304\064\320\070\266\072\310"
        + "\073\306\074\317\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\010\040\u0147\041\u0148\042\u0149"
        + "\001\001\000\006\025\u0153\026\u0152\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\004\024\u014b"
        + "\001\001\000\002\001\001\000\062\021\276\030\125\031"
        + "\103\033\u014d\034\274\035\272\036\313\037\311\051\102"
        + "\052\316\053\121\054\270\055\271\056\312\057\323\060"
        + "\300\061\302\062\303\063\304\064\320\070\266\072\310"
        + "\073\306\074\317\001\001\000\002\001\001\000\002\001"
        + "\001\000\004\040\u0150\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\004\050"
        + "\u0156\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$Sintactico$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$Sintactico$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 0;
    }

    /**
     * <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /**
     * <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }

    /**
     * Metodo al que se llama automáticamente ante algún error sintactico.
     */
    public void syntax_error(Symbol s) {
        System.out.println("Error en la Línea " + (s.right + 1) + " Columna " + (s.left + 1) + ". Identificador "
                + s.value + " no reconocido.");
    }

    /**
     * Metodo al que se llama en el momento en que ya no es posible una
     * recuperación de errores.
     */
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        System.out.println("Error en la Línea " + (s.right + 1) + "Columna " + (s.left + 1) + ". Identificador "
                + s.value + " no reconocido.");
    }

}

/**
 * Cup generated class to encapsulate user supplied action code.
 */
class CUP$Sintactico$actions {

    private final Sintactico parser;

    /**
     * Constructor
     */
    CUP$Sintactico$actions(Sintactico parser) {
        this.parser = parser;
    }

    /**
     * Method with the actual generated action code.
     */
    public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
            int CUP$Sintactico$act_num,
            java_cup.runtime.lr_parser CUP$Sintactico$parser,
            java.util.Stack CUP$Sintactico$stack,
            int CUP$Sintactico$top)
            throws java.lang.Exception {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$Sintactico$result;

        /* select the action based on the action number */
        switch (CUP$Sintactico$act_num) {
            /*. . . . . . . . . . . . . . . . . . . .*/
            case 165: // ACCESOAR ::= iden INDICES 
            {
                Nodo RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("accesoAr", id, idright, idleft);
                RESULT.add(lista);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOAR", 41, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 164: // ACCESOVAR ::= ACCESOAR 
            {
                Nodo RESULT = null;
                int llaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int llaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo lla = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = lla;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVAR", 39, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 163: // ACCESOVAR ::= iden 
            {
                Nodo RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("id", id, idright, idleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVAR", 39, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 162: // ACCESOVAR ::= LLAMADAMETODO 
            {
                Nodo RESULT = null;
                int llaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int llaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo lla = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = lla;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVAR", 39, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 161: // LLAMADAMETODO ::= iden parenInicio parenFin 
            {
                Nodo RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;

                RESULT = new Nodo("llamadaMetodo", id, idright, idleft);
                Nodo n1 = new Nodo("valorParametros", 0, 0);
                RESULT.add(n1);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADAMETODO", 23, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 160: // LLAMADAMETODO ::= iden parenInicio VALORPARAMETROS parenFin 
            {
                Nodo RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("llamadaMetodo", id, idright, idleft);
                RESULT.add(lista);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADAMETODO", 23, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 159: // ACCESO ::= ACCESOVAR 
            {
                Nodo RESULT = null;
                int accleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int accright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo acc = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("acceso", acc.linea - 1, acc.columna - 1);
                RESULT.add(acc);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO", 40, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 158: // ACCESO ::= ACCESO punto ACCESOVAR 
            {
                Nodo RESULT = null;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int accleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int accright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo acc = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = lista;
                RESULT.add(acc);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO", 40, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 157: // LLAMARGK ::= llamar ACCESO 
            {
                Nodo RESULT = null;
                int accleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int accright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo acc = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = acc;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMARGK", 58, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 156: // LLAMARHK ::= llamarHK iden parenInicio parenFin 
            {
                Nodo RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;

                RESULT = new Nodo("llamadaMetodoHK", id, idright, idleft);
                Nodo n1 = new Nodo("valorParametros", 0, 0);
                RESULT.add(n1);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMARHK", 57, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 155: // LLAMARHK ::= llamarHK iden parenInicio VALORPARAMETROS parenFin 
            {
                Nodo RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("llamadaMetodoHK", id, idright, idleft);
                RESULT.add(lista);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMARHK", 57, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 154: // IMPRIMIR ::= imprimir parenInicio EXPL parenFin 
            {
                Nodo RESULT = null;
                int impleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int impright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                String imp = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("imprimir", impright, impleft);
                RESULT.add(exp);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR", 42, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 153: // GRAFICARFUNCION ::= graphikar_funcion parenInicio ACCESO coma ACCESO parenFin 
            {
                Nodo RESULT = null;
                int gleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).left;
                int gright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).right;
                String g = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).value;
                int acc1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int acc1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                Nodo acc1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int acc2left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int acc2right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo acc2 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("graficarFuncion", gright, gleft);
                RESULT.add(acc1);
                RESULT.add(acc2);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GRAFICARFUNCION", 56, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 152: // TERMINAR ::= terminar 
            {
                Nodo RESULT = null;
                int terleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int terright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String ter = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("terminar", terright, terleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TERMINAR", 50, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 151: // CONTINUAR ::= continuar 
            {
                Nodo RESULT = null;
                int conleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int conright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String con = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("continuar", conright, conleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTINUAR", 48, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 150: // RETORNO ::= retornar EXPL 
            {
                Nodo RESULT = null;
                int retleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int retright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String ret = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("retorno", retright, retleft);
                RESULT.add(exp);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO", 49, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 149: // RETORNO ::= retornar 
            {
                Nodo RESULT = null;
                int retleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int retright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String ret = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("retorno", retright, retleft);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO", 49, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 148: // HACERMIENTRAS ::= hacer llaveInicio SENTENCIAS llaveFin mientras parenInicio EXPL parenFin 
            {
                Nodo RESULT = null;
                int hacerleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 7)).left;
                int hacerright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 7)).right;
                String hacer = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 7)).value;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).value;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("hacerMientras", hacerright, hacerleft);
                RESULT.add(exp);
                RESULT.add(sent);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("HACERMIENTRAS", 47, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 7)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 147: // MIENTRAS ::= mientras parenInicio EXPL parenFin llaveInicio SENTENCIAS llaveFin 
            {
                Nodo RESULT = null;
                int mileft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).left;
                int miright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).right;
                String mi = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).value;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).value;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("mientras", miright, mileft);
                RESULT.add(exp);
                RESULT.add(sent);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MIENTRAS", 46, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 146: // VARIABLEPARA ::= ACCESO igual EXPL 
            {
                Nodo RESULT = null;
                int accleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int accright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo acc = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("asignacion", acc.linea - 1, acc.columna - 1);
                RESULT.add(acc);
                RESULT.add(exp);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLEPARA", 55, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 145: // VARIABLEPARA ::= var resEntero iden igual EXPL 
            {
                Nodo RESULT = null;
                int varleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).left;
                int varright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).right;
                String var = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).value;
                int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int tiporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                String tipo = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("varLocalDA", varright, varleft);
                Nodo id1 = new Nodo("id", id, idright, idleft);
                Nodo t = new Nodo("tipo", tipo, tiporight, tipoleft);
                RESULT.add(t);
                RESULT.add(id1);
                RESULT.add(exp);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLEPARA", 55, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 144: // PARA ::= para parenInicio VARIABLEPARA puntoComa EXPL puntoComa SIMPLIFICADA parenFin llaveInicio SENTENCIAS llaveFin 
            {
                Nodo RESULT = null;
                int paraleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 10)).left;
                int pararight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 10)).right;
                String para = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 10)).value;
                int varleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 8)).left;
                int varright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 8)).right;
                Nodo var = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 8)).value;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).right;
                Nodo op = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).value;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("para", pararight, paraleft);
                RESULT.add(var);
                RESULT.add(exp);
                RESULT.add(op);
                RESULT.add(sent);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARA", 45, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 10)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 143: // SIMPLIFICADA ::= EXPA disminucion 
            {
                Nodo RESULT = null;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                RESULT = new Nodo("--", exp.linea - 1, exp.columna - 1);
                RESULT.add(exp);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIMPLIFICADA", 54, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 142: // SIMPLIFICADA ::= EXPA aumento 
            {
                Nodo RESULT = null;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                RESULT = new Nodo("++", exp.linea - 1, exp.columna - 1);
                RESULT.add(exp);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIMPLIFICADA", 54, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 141: // DEFECTO ::= defecto dosPuntos SENTENCIAS 
            {
                Nodo RESULT = null;
                int defleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int defright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                String def = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("defecto", defright, defleft);
                RESULT.add(sent);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFECTO", 53, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 140: // CASO ::= caso EXPL dosPuntos SENTENCIAS 
            {
                Nodo RESULT = null;
                int caleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int caright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                String ca = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("caso", caright, caleft);
                RESULT.add(exp);
                RESULT.add(sent);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASO", 51, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 139: // CASOS ::= CASO 
            {
                Nodo RESULT = null;
                int casoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int casoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo caso = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("casos", caso.linea - 1, caso.columna - 1);
                RESULT.add(caso);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASOS", 52, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 138: // CASOS ::= CASOS CASO 
            {
                Nodo RESULT = null;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int casoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int casoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo caso = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = lista;
                RESULT.add(caso);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASOS", 52, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 137: // SELECCION ::= seleccion parenInicio ACCESO parenFin llaveInicio CASOS DEFECTO llaveFin 
            {
                Nodo RESULT = null;
                int selleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 7)).left;
                int selright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 7)).right;
                String sel = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 7)).value;
                int accleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).left;
                int accright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).right;
                Nodo acc = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).value;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int defleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int defright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo def = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("seleccion", selright, selleft);
                RESULT.add(acc);
                lista.add(def);
                RESULT.add(lista);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SELECCION", 44, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 7)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 136: // SELECCION ::= seleccion parenInicio ACCESO parenFin llaveInicio CASOS llaveFin 
            {
                Nodo RESULT = null;
                int selleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).left;
                int selright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).right;
                String sel = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).value;
                int accleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).left;
                int accright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).right;
                Nodo acc = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).value;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("seleccion", selright, selleft);
                RESULT.add(acc);
                Nodo defecto = new Nodo("defecto", 0, 0);
                Nodo sent2 = new Nodo("sentencias", 0, 0);
                defecto.add(sent2);
                lista.add(defecto);
                RESULT.add(lista);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SELECCION", 44, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 135: // SI ::= si parenInicio EXPL parenFin llaveInicio SENTENCIAS llaveFin sino llaveInicio SENTENCIAS llaveFin 
            {
                Nodo RESULT = null;
                int sileft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 10)).left;
                int siright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 10)).right;
                String si = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 10)).value;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 8)).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 8)).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 8)).value;
                int sent1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).left;
                int sent1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).right;
                Nodo sent1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).value;
                int sent2left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int sent2right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo sent2 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("si", siright, sileft);
                RESULT.add(exp);
                RESULT.add(sent1);
                RESULT.add(sent2);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SI", 43, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 10)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 134: // SI ::= si parenInicio EXPL parenFin llaveInicio SENTENCIAS llaveFin 
            {
                Nodo RESULT = null;
                int sileft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).left;
                int siright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).right;
                String si = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).value;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).value;
                int sent1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int sent1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo sent1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("si", siright, sileft);
                RESULT.add(exp);
                RESULT.add(sent1);
                Nodo sent2 = new Nodo("sentencias", 0, 0);
                RESULT.add(sent2);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SI", 43, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 133: // ASIGNACION ::= ACCESO igual nuevo iden parenInicio parenFin 
            {
                Nodo RESULT = null;
                int accleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).left;
                int accright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).right;
                Nodo acc = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).value;
                int tipo2left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int tipo2right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                String tipo2 = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;

                RESULT = new Nodo("asignacionAlsI", acc.linea - 1, acc.columna - 1);
                RESULT.add(acc);
                Nodo tipoVar = new Nodo("tipo", tipo2, tipo2right, tipo2left);
                RESULT.add(tipoVar);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION", 29, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 132: // ASIGNACION ::= ACCESO igual ARREGLO 
            {
                Nodo RESULT = null;
                int accleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int accright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo acc = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int arleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int arright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo ar = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("asignacionAr", acc.linea - 1, acc.columna - 1);
                RESULT.add(acc);
                RESULT.add(ar);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION", 29, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 131: // ASIGNACION ::= ACCESO igual EXPL 
            {
                Nodo RESULT = null;
                int accleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int accright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo acc = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("asignacion", acc.linea - 1, acc.columna - 1);
                RESULT.add(acc);
                RESULT.add(exp);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION", 29, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 130: // DECLARACION ::= var TIPODATO iden INDICES igual EXPL 
            {
                Nodo RESULT = null;
                int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).left;
                int tiporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).right;
                Nodo tipo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int indicesleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int indicesright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo indices = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int dirleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int dirright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo dir = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("varLocalArDD", id, idright, idleft);
                RESULT.add(tipo);
                RESULT.add(indices);
                RESULT.add(dir);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION", 28, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 129: // DECLARACION ::= var TIPODATO iden INDICES igual ARREGLO 
            {
                Nodo RESULT = null;
                int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).left;
                int tiporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).right;
                Nodo tipo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int indicesleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int indicesright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo indices = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int arregloleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int arregloright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo arreglo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("varLocalArDA", id, idright, idleft);
                RESULT.add(tipo);
                RESULT.add(indices);
                RESULT.add(arreglo);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION", 28, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 128: // DECLARACION ::= var TIPODATO iden INDICES 
            {
                Nodo RESULT = null;
                int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int tiporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo tipo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int indicesleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int indicesright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo indices = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("varLocalArD", id, idright, idleft);
                RESULT.add(tipo);
                RESULT.add(indices);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION", 28, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 127: // DECLARACION ::= var iden iden igual EXPL 
            {
                Nodo RESULT = null;
                int varleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).left;
                int varright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).right;
                String var = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).value;
                int tipo1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int tipo1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                String tipo1 = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int dirleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int dirright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo dir = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("varLocalAlsDD", varright, varleft);
                Nodo n1 = new Nodo("id", id, idright, idleft);
                Nodo tipoVar = new Nodo("tipo", tipo1, tipo1right, tipo1left);
                RESULT.add(tipoVar);
                RESULT.add(n1);
                RESULT.add(dir);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION", 28, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 126: // DECLARACION ::= var iden iden igual nuevo iden parenInicio parenFin 
            {
                Nodo RESULT = null;
                int varleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 7)).left;
                int varright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 7)).right;
                String var = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 7)).value;
                int tipo1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).left;
                int tipo1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).right;
                String tipo1 = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).value;
                int tipo2left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int tipo2right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                String tipo2 = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;

                RESULT = new Nodo("varLocalAlsDI", varright, varleft);
                Nodo n1 = new Nodo("id", id, idright, idleft);
                Nodo tipoVar = new Nodo("tipo", tipo1, tipo1right, tipo1left);
                RESULT.add(tipoVar);
                RESULT.add(n1);
                tipoVar = new Nodo("tipo", tipo2, tipo2right, tipo2left);
                RESULT.add(tipoVar);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION", 28, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 7)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 125: // DECLARACION ::= var iden LISTAID2 
            {
                Nodo RESULT = null;
                int varleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int varright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                String var = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int tiporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String tipo = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("varLocalAlsD", varright, varleft);
                Nodo tipoVar = new Nodo("tipo", tipo, tiporight, tipoleft);
                RESULT.add(tipoVar);
                RESULT.add(lista);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION", 28, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 124: // DECLARACION ::= var TIPODATO iden igual EXPL 
            {
                Nodo RESULT = null;
                int varleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).left;
                int varright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).right;
                String var = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).value;
                int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int tiporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                Nodo tipo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("varLocalDA", varright, varleft);
                Nodo id1 = new Nodo("id", id, idright, idleft);
                RESULT.add(tipo);
                RESULT.add(id1);
                RESULT.add(exp);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION", 28, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 123: // DECLARACION ::= var TIPODATO LISTAID2 
            {
                Nodo RESULT = null;
                int varleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int varright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                String var = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int tiporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo tipo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("varLocalD", varright, varleft);
                RESULT.add(tipo);
                RESULT.add(lista);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION", 28, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 122: // LISTAID2 ::= iden 
            {
                Nodo RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("listaIds", idright, idleft);
                Nodo id1 = new Nodo("id", id, idright, idleft);
                RESULT.add(id1);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAID2", 10, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 121: // LISTAID2 ::= LISTAID2 coma iden 
            {
                Nodo RESULT = null;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = lista;
                Nodo id1 = new Nodo("id", id, idright, idleft);
                RESULT.add(id1);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAID2", 10, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 120: // SENTENCIA ::= IMPRIMIR inteFin 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                RESULT = sent;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 27, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 119: // SENTENCIA ::= GRAFICARFUNCION inteFin 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                RESULT = sent;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 27, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 118: // SENTENCIA ::= CONTINUAR inteFin 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                RESULT = sent;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 27, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 117: // SENTENCIA ::= TERMINAR inteFin 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                RESULT = sent;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 27, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 116: // SENTENCIA ::= RETORNO inteFin 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                RESULT = sent;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 27, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 115: // SENTENCIA ::= HACERMIENTRAS inteFin 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                RESULT = sent;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 27, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 114: // SENTENCIA ::= MIENTRAS 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = sent;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 27, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 113: // SENTENCIA ::= PARA 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = sent;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 27, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 112: // SENTENCIA ::= SELECCION 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = sent;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 27, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 111: // SENTENCIA ::= SI 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = sent;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 27, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 110: // SENTENCIA ::= SIMPLIFICADA inteFin 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                RESULT = sent;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 27, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 109: // SENTENCIA ::= ASIGNACION inteFin 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                RESULT = sent;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 27, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 108: // SENTENCIA ::= DECLARACION inteFin 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                RESULT = sent;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 27, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 107: // SENTENCIA ::= LLAMARGK inteFin 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                RESULT = sent;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 27, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 106: // SENTENCIA ::= LLAMARHK inteFin 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                RESULT = sent;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 27, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 105: // SENTENCIAS ::= 
            {
                Nodo RESULT = null;
                RESULT = new Nodo("sentencias", 0, 0);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS", 25, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 104: // SENTENCIAS ::= SENTENCIAS1 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = sent;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS", 25, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 103: // SENTENCIAS1 ::= SENTENCIA 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("sentencias", sent.linea - 1, sent.columna - 1);
                RESULT.add(sent);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1", 26, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 102: // SENTENCIAS1 ::= SENTENCIAS1 SENTENCIA 
            {
                Nodo RESULT = null;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = lista;
                RESULT.add(sent);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1", 26, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 101: // VALORPARAMETROS ::= EXPL 
            {
                Nodo RESULT = null;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("valorParametros", expright, expleft);
                RESULT.add(exp);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALORPARAMETROS", 24, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 100: // VALORPARAMETROS ::= VALORPARAMETROS coma EXPL 
            {
                Nodo RESULT = null;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = lista;
                RESULT.add(exp);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALORPARAMETROS", 24, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 99: // INDICES2 ::= corInicio corFin 
            {
                Nodo RESULT = null;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String exp = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("indices", expright, expleft);
                Nodo n = new Nodo("dimension", 0, 0);
                RESULT.add(n);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INDICES2", 38, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 98: // INDICES2 ::= INDICES2 corInicio corFin 
            {
                Nodo RESULT = null;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                RESULT = lista;
                Nodo n = new Nodo("dimension", 0, 0);
                RESULT.add(n);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INDICES2", 38, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 97: // PARAMETRO ::= var TIPODATO2 iden INDICES2 
            {
                Nodo RESULT = null;
                int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int tiporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo tipo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int dimleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int dimright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo dim = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("parametroAr", id, idright, idleft);
                RESULT.add(tipo);
                RESULT.add(dim);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO", 30, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 96: // PARAMETRO ::= var TIPODATO2 iden 
            {
                Nodo RESULT = null;
                int varleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int varright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                String var = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int tiporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo tipo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("parametro", id, idright, idleft);
                RESULT.add(tipo);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO", 30, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 95: // TIPODATO2 ::= iden 
            {
                Nodo RESULT = null;
                int datoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int datoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String dato = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("tipo", dato, datoright, datoleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO2", 20, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 94: // TIPODATO2 ::= TIPODATO 
            {
                Nodo RESULT = null;
                int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int tiporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo tipo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = tipo;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO2", 20, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 93: // PARAMETROS ::= PARAMETRO 
            {
                Nodo RESULT = null;
                int parleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int parright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo par = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("parametros", par.linea - 1, par.columna - 1);
                RESULT.add(par);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS", 31, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 92: // PARAMETROS ::= PARAMETROS coma PARAMETRO 
            {
                Nodo RESULT = null;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int parleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int parright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo par = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = lista;
                RESULT.add(par);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS", 31, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 91: // PARAMETROSSTAR ::= 
            {
                Nodo RESULT = null;
                RESULT = new Nodo("parametros", 0, 0);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSSTAR", 32, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 90: // PARAMETROSSTAR ::= PARAMETROS 
            {
                Nodo RESULT = null;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = lista;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSSTAR", 32, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 89: // METODO ::= vacio datos parenInicio parenFin llaveInicio SENTENCIAS llaveFin 
            {
                Nodo RESULT = null;
                int valeft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).left;
                int varight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).right;
                String va = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).value;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("datos", "datos", varight, valeft);
                RESULT.add(sent);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO", 13, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 88: // METODO ::= vacio inicio parenInicio parenFin llaveInicio SENTENCIAS llaveFin 
            {
                Nodo RESULT = null;
                int valeft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).left;
                int varight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).right;
                String va = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).value;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("inicio", "inicio", varight, valeft);
                RESULT.add(sent);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO", 13, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 87: // METODO ::= TIPOMETODO iden parenInicio PARAMETROSSTAR parenFin VISIBILIDAD llaveInicio SENTENCIAS llaveFin 
            {
                Nodo RESULT = null;
                int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 8)).left;
                int tiporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 8)).right;
                Nodo tipo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 8)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 7)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 7)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 7)).value;
                int paraleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).left;
                int pararight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).right;
                Nodo para = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).value;
                int visileft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int visiright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                Nodo visi = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("metodo", id, idright, idleft);
                RESULT.add(tipo);
                RESULT.add(visi);
                RESULT.add(para);
                RESULT.add(sent);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO", 13, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 8)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 86: // DATO ::= bool 
            {
                Nodo RESULT = null;
                int datoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int datoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String dato = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("bool", dato, datoright, datoleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DATO", 22, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 85: // DATO ::= cadena 
            {
                Nodo RESULT = null;
                int datoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int datoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String dato = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                dato = dato.replace("\"", "");
                RESULT = new Nodo("cadena", dato, datoright, datoleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DATO", 22, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 84: // DATO ::= caracter 
            {
                Nodo RESULT = null;
                int datoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int datoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String dato = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                dato = dato.replace("'", "");
                RESULT = new Nodo("caracter", dato, datoright, datoleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DATO", 22, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 83: // DATO ::= decimal 
            {
                Nodo RESULT = null;
                int datoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int datoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String dato = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("decimal", dato, datoright, datoleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DATO", 22, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 82: // DATO ::= entero 
            {
                Nodo RESULT = null;
                int datoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int datoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String dato = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("entero", dato, datoright, datoleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DATO", 22, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 81: // EXPL ::= EXPR 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = d1;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPL", 16, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 80: // EXPL ::= not EXPL 
            {
                Nodo RESULT = null;
                int opleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int d1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo(op, opright, opleft);
                RESULT.add(d1);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPL", 16, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 79: // EXPL ::= EXPL xor EXPL 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int d2left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int d2right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo d2 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo(op, opright, opleft);
                RESULT.add(d1);
                RESULT.add(d2);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPL", 16, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 78: // EXPL ::= EXPL or EXPL 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int d2left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int d2right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo d2 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo(op, opright, opleft);
                RESULT.add(d1);
                RESULT.add(d2);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPL", 16, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 77: // EXPL ::= EXPL and EXPL 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int d2left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int d2right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo d2 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo(op, opright, opleft);
                RESULT.add(d1);
                RESULT.add(d2);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPL", 16, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 76: // EXPR ::= EXPA 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = d1;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR", 17, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 75: // EXPR ::= EXPA noIgual EXPA 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int d2left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int d2right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo d2 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo(op, opright, opleft);
                RESULT.add(d1);
                RESULT.add(d2);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR", 17, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 74: // EXPR ::= EXPA menorIgual EXPA 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int d2left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int d2right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo d2 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo(op, opright, opleft);
                RESULT.add(d1);
                RESULT.add(d2);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR", 17, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 73: // EXPR ::= EXPA mayorIgual EXPA 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int d2left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int d2right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo d2 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo(op, opright, opleft);
                RESULT.add(d1);
                RESULT.add(d2);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR", 17, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 72: // EXPR ::= EXPA menor EXPA 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int d2left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int d2right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo d2 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo(op, opright, opleft);
                RESULT.add(d1);
                RESULT.add(d2);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR", 17, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 71: // EXPR ::= EXPA mayor EXPA 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int d2left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int d2right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo d2 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo(op, opright, opleft);
                RESULT.add(d1);
                RESULT.add(d2);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR", 17, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 70: // EXPR ::= EXPA igualIgual EXPA 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int d2left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int d2right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo d2 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo(op, opright, opleft);
                RESULT.add(d1);
                RESULT.add(d2);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR", 17, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 69: // EXPA ::= SIMPLIFICADA 
            {
                Nodo RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo val = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = val;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA", 15, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 68: // EXPA ::= LLAMARGK 
            {
                Nodo RESULT = null;
                int id1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int id1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo id1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = id1;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA", 15, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 67: // EXPA ::= LLAMARHK 
            {
                Nodo RESULT = null;
                int id1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int id1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo id1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = id1;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA", 15, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 66: // EXPA ::= ACCESO 
            {
                Nodo RESULT = null;
                int id1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int id1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo id1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = id1;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA", 15, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 65: // EXPA ::= DATO 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = d1;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA", 15, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 64: // EXPA ::= menos EXPA 
            {
                Nodo RESULT = null;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("unitario", exp.linea - 1, exp.columna - 1);
                RESULT.add(exp);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA", 15, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 63: // EXPA ::= parenInicio EXPL parenFin 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                RESULT = d1;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA", 15, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 62: // EXPA ::= EXPA mod EXPA 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int d2left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int d2right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo d2 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo(op, opright, opleft);
                RESULT.add(d1);
                RESULT.add(d2);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA", 15, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 61: // EXPA ::= EXPA pot EXPA 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int d2left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int d2right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo d2 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo(op, opright, opleft);
                RESULT.add(d1);
                RESULT.add(d2);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA", 15, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 60: // EXPA ::= EXPA div EXPA 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int d2left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int d2right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo d2 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo(op, opright, opleft);
                RESULT.add(d1);
                RESULT.add(d2);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA", 15, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 59: // EXPA ::= EXPA mul EXPA 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int d2left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int d2right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo d2 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo(op, opright, opleft);
                RESULT.add(d1);
                RESULT.add(d2);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA", 15, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 58: // EXPA ::= EXPA menos EXPA 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int d2left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int d2right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo d2 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo(op, opright, opleft);
                RESULT.add(d1);
                RESULT.add(d2);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA", 15, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 57: // EXPA ::= EXPA mas EXPA 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int d2left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int d2right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo d2 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo(op, opright, opleft);
                RESULT.add(d1);
                RESULT.add(d2);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA", 15, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 56: // CUERPOALS ::= 
            {
                Nodo RESULT = null;
                RESULT = new Nodo("cuerpo", 0, 0);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOALS", 14, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 55: // CUERPOALS ::= CUERPOS 
            {
                Nodo RESULT = null;
                int cuerposleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int cuerposright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo cuerpos = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = cuerpos;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOALS", 14, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 54: // CUERPO ::= ATRIBUTOVARAR 
            {
                Nodo RESULT = null;
                int arregloVarleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int arregloVarright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo arregloVar = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = arregloVar;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO", 11, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 53: // CUERPO ::= ATRIBUTOALS 
            {
                Nodo RESULT = null;
                int atributoAlsleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int atributoAlsright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo atributoAls = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = atributoAls;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO", 11, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 52: // CUERPO ::= METODO 
            {
                Nodo RESULT = null;
                int metodoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int metodoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo metodo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = metodo;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO", 11, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 51: // CUERPO ::= ATRIBUTOVAR 
            {
                Nodo RESULT = null;
                int atributoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int atributoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo atributo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = atributo;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO", 11, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 50: // CUERPOS ::= CUERPO 
            {
                Nodo RESULT = null;
                int cuerpoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int cuerporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo cuerpo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("cuerpo", cuerpo.linea - 1, cuerpo.columna - 1);
                RESULT.add(cuerpo);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOS", 12, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 49: // CUERPOS ::= CUERPOS CUERPO 
            {
                Nodo RESULT = null;
                int cuerposleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int cuerposright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo cuerpos = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int cuerpoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int cuerporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo cuerpo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = cuerpos;
                RESULT.add(cuerpo);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOS", 12, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 48: // LISTAID ::= iden VISIBILIDAD 
            {
                Nodo RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int visileft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int visiright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo visi = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("listaIds", idright, idleft);
                Nodo id1 = new Nodo("id", id, idright, idleft);
                id1.add(visi);
                RESULT.add(id1);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAID", 9, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 47: // LISTAID ::= LISTAID coma iden VISIBILIDAD 
            {
                Nodo RESULT = null;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int visileft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int visiright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo visi = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = lista;
                Nodo id1 = new Nodo("id", id, idright, idleft);
                id1.add(visi);
                RESULT.add(id1);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAID", 9, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 46: // LISTAEXP ::= EXPL 
            {
                Nodo RESULT = null;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("listaExp", exp.linea - 1, exp.columna - 1);
                RESULT.add(exp);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAEXP", 36, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 45: // LISTAEXP ::= LISTAEXP coma EXPL 
            {
                Nodo RESULT = null;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = lista;
                RESULT.add(exp);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAEXP", 36, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 44: // ARREGLOS ::= ARREGLO 
            {
                Nodo RESULT = null;
                int arleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int arright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo ar = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = ar;

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS", 35, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 43: // ARREGLOS ::= ARREGLOS coma ARREGLO 
            {
                Nodo RESULT = null;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int arleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int arright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo ar = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = lista;
                for (Nodo e : ar.hijos) {
                    RESULT.add(e);
                }

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS", 35, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 42: // ARREGLO ::= llaveInicio ARREGLOS llaveFin 
            {
                Nodo RESULT = null;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                RESULT = lista;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO", 34, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 41: // ARREGLO ::= llaveInicio LISTAEXP llaveFin 
            {
                Nodo RESULT = null;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                RESULT = lista;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO", 34, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 40: // INDICES ::= corInicio EXPL corFin 
            {
                Nodo RESULT = null;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("indices", exp.linea - 1, exp.columna - 1);
                RESULT.add(exp);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INDICES", 33, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 39: // INDICES ::= INDICES corInicio EXPL corFin 
            {
                Nodo RESULT = null;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                RESULT = lista;
                RESULT.add(exp);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INDICES", 33, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 38: // ATRIBUTOVARAR ::= var TIPODATO iden INDICES VISIBILIDAD igual EXPL inteFin 
            {
                Nodo RESULT = null;
                int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).left;
                int tiporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).right;
                Nodo tipo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).value;
                int indicesleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).left;
                int indicesright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).right;
                Nodo indices = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).value;
                int visileft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int visiright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                Nodo visi = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int dirleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int dirright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo dir = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("atributoVarArDD", id, idright, idleft);
                RESULT.add(tipo);
                RESULT.add(indices);
                RESULT.add(visi);
                RESULT.add(dir);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOVARAR", 37, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 7)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 37: // ATRIBUTOVARAR ::= var TIPODATO iden INDICES VISIBILIDAD igual ARREGLO inteFin 
            {
                Nodo RESULT = null;
                int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).left;
                int tiporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).right;
                Nodo tipo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).value;
                int indicesleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).left;
                int indicesright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).right;
                Nodo indices = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).value;
                int visileft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int visiright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                Nodo visi = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int arregloleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int arregloright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo arreglo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("atributoVarArDA", id, idright, idleft);
                RESULT.add(tipo);
                RESULT.add(indices);
                RESULT.add(visi);
                RESULT.add(arreglo);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOVARAR", 37, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 7)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 36: // ATRIBUTOVARAR ::= var TIPODATO iden INDICES VISIBILIDAD inteFin 
            {
                Nodo RESULT = null;
                int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).left;
                int tiporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).right;
                Nodo tipo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int indicesleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int indicesright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo indices = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int visileft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int visiright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo visi = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("atributoVarArD", id, idright, idleft);
                RESULT.add(tipo);
                RESULT.add(indices);
                RESULT.add(visi);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOVARAR", 37, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 35: // ATRIBUTOVAR ::= var TIPODATO iden VISIBILIDAD igual EXPL inteFin 
            {
                Nodo RESULT = null;
                int varleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).left;
                int varright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).right;
                String var = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).value;
                int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).left;
                int tiporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).right;
                Nodo tipo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).value;
                int visileft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int visiright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                Nodo visi = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("atributoVarDA", varright, varleft);
                Nodo id1 = new Nodo("id", id, idright, idleft);
                id1.add(visi);
                RESULT.add(tipo);
                RESULT.add(id1);
                RESULT.add(exp);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOVAR", 7, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 34: // ATRIBUTOVAR ::= var TIPODATO LISTAID inteFin 
            {
                Nodo RESULT = null;
                int varleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int varright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                String var = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int tiporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo tipo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("atributoVarD", varright, varleft);
                RESULT.add(tipo);
                RESULT.add(lista);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOVAR", 7, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 33: // ATRIBUTOALS ::= var iden iden VISIBILIDAD igual EXPL inteFin 
            {
                Nodo RESULT = null;
                int varleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).left;
                int varright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).right;
                String var = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).value;
                int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).left;
                int tiporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).right;
                String tipo = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).value;
                int visileft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int visiright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                Nodo visi = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int dirleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int dirright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo dir = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("atributoAlsDD", varright, varleft);
                Nodo tipoVar = new Nodo("tipo", tipo, tiporight, tipoleft);
                Nodo objeto = new Nodo("id", id, idright, idleft);
                objeto.add(visi);
                RESULT.add(tipoVar);
                RESULT.add(objeto);
                RESULT.add(dir);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOALS", 8, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 32: // ATRIBUTOALS ::= var iden iden VISIBILIDAD igual nuevo iden parenInicio parenFin inteFin 
            {
                Nodo RESULT = null;
                int varleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 9)).left;
                int varright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 9)).right;
                String var = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 9)).value;
                int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 8)).left;
                int tiporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 8)).right;
                String tipo = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 8)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 7)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 7)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 7)).value;
                int visileft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).left;
                int visiright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).right;
                Nodo visi = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).value;
                int tipo2left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int tipo2right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                String tipo2 = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;

                RESULT = new Nodo("atributoAlsDI", varright, varleft);
                Nodo tipoVar = new Nodo("tipo", tipo, tiporight, tipoleft);
                Nodo tipoVar2 = new Nodo("tipo", tipo2, tipo2right, tipo2left);
                Nodo objeto = new Nodo("id", id, idright, idleft);
                objeto.add(visi);
                RESULT.add(tipoVar);
                RESULT.add(objeto);
                RESULT.add(tipoVar2);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOALS", 8, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 9)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 31: // ATRIBUTOALS ::= var iden LISTAID inteFin 
            {
                Nodo RESULT = null;
                int varleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int varright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                String var = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int tiporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                String tipo = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("atributoAlsD", varright, varleft);
                Nodo tipoVar = new Nodo("tipo", tipo, tiporight, tipoleft);
                RESULT.add(tipoVar);
                RESULT.add(lista);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOALS", 8, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 30: // TIPOMETODO ::= vacio 
            {
                Nodo RESULT = null;
                int datoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int datoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String dato = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("tipo", dato, datoright, datoleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOMETODO", 21, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 29: // TIPOMETODO ::= iden 
            {
                Nodo RESULT = null;
                int datoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int datoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String dato = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("tipo", dato, datoright, datoleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOMETODO", 21, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 28: // TIPOMETODO ::= resBool 
            {
                Nodo RESULT = null;
                int datoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int datoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String dato = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("tipo", dato, datoright, datoleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOMETODO", 21, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 27: // TIPOMETODO ::= resCadena 
            {
                Nodo RESULT = null;
                int datoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int datoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String dato = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("tipo", dato, datoright, datoleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOMETODO", 21, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 26: // TIPOMETODO ::= resCaracter 
            {
                Nodo RESULT = null;
                int datoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int datoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String dato = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("tipo", dato, datoright, datoleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOMETODO", 21, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 25: // TIPOMETODO ::= resDecimal 
            {
                Nodo RESULT = null;
                int datoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int datoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String dato = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("tipo", dato, datoright, datoleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOMETODO", 21, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 24: // TIPOMETODO ::= resEntero 
            {
                Nodo RESULT = null;
                int datoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int datoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String dato = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("tipo", dato, datoright, datoleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOMETODO", 21, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 23: // TIPODATO ::= resBool 
            {
                Nodo RESULT = null;
                int datoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int datoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String dato = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("tipo", dato, datoright, datoleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO", 19, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 22: // TIPODATO ::= resCadena 
            {
                Nodo RESULT = null;
                int datoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int datoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String dato = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("tipo", dato, datoright, datoleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO", 19, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 21: // TIPODATO ::= resCaracter 
            {
                Nodo RESULT = null;
                int datoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int datoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String dato = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("tipo", dato, datoright, datoleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO", 19, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 20: // TIPODATO ::= resDecimal 
            {
                Nodo RESULT = null;
                int datoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int datoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String dato = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("tipo", dato, datoright, datoleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO", 19, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 19: // TIPODATO ::= resEntero 
            {
                Nodo RESULT = null;
                int datoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int datoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String dato = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("tipo", dato, datoright, datoleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO", 19, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 18: // VISIBILIDAD ::= 
            {
                Nodo RESULT = null;
                RESULT = new Nodo("visibilidad", "publico");
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD", 18, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 17: // VISIBILIDAD ::= dosPuntos privado 
            {
                Nodo RESULT = null;
                int cadleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int cadright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String cad = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("visibilidad", cad, cadright, cadleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD", 18, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 16: // VISIBILIDAD ::= dosPuntos protegido 
            {
                Nodo RESULT = null;
                int cadleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int cadright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String cad = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("visibilidad", cad, cadright, cadleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD", 18, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 15: // VISIBILIDAD ::= dosPuntos publico 
            {
                Nodo RESULT = null;
                int cadleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int cadright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String cad = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("visibilidad", cad, cadright, cadleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD", 18, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 14: // ALS ::= als iden VISIBILIDAD hereda iden llaveInicio CUERPOALS llaveFin 
            {
                Nodo RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).value;
                int visileft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).left;
                int visiright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).right;
                Nodo visi = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).value;
                int idHeredaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int idHeredaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                String idHereda = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int cuerpoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int cuerporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo cuerpo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("als", id, idright, idleft);
                Nodo hereda = new Nodo("hereda", idHereda, idHeredaright, idHeredaleft);
                RESULT.add(hereda);
                RESULT.add(visi);
                RESULT.add(cuerpo);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ALS", 6, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 7)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 13: // ALS ::= als iden VISIBILIDAD llaveInicio CUERPOALS llaveFin 
            {
                Nodo RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).value;
                int visileft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int visiright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                Nodo visi = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int cuerpoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int cuerporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo cuerpo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("als", id, idright, idright);
                RESULT.add(visi);
                RESULT.add(cuerpo);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ALS", 6, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 12: // CLASESALS ::= ALS 
            {
                Nodo RESULT = null;
                int alsleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int alsright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo als = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("clases", als.linea - 1, als.columna - 1);
                RESULT.add(als);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASESALS", 1, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 11: // CLASESALS ::= CLASESALS ALS 
            {
                Nodo RESULT = null;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int alsleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int alsright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo als = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = lista;
                RESULT.add(als);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASESALS", 1, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 10: // INCLUIRHASKEL ::= error 
            {
                Nodo RESULT = null;

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCLUIRHASKEL", 5, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 9: // INCLUIRHASKEL ::= incluir_HK iden inteFin 
            {
                Nodo RESULT = null;
                int inleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int inright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                String in = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                Nodo importar = new Nodo("incluir", id, idright, idleft);
                RESULT = new Nodo("incluidos", inright, inleft);
                RESULT.add(importar);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCLUIRHASKEL", 5, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 8: // INCLUIRHASKEL ::= INCLUIRHASKEL incluir_HK iden inteFin 
            {
                Nodo RESULT = null;
                int nodoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int nodoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                Nodo nodo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                RESULT = nodo;
                Nodo importar = new Nodo("incluir", id, idright, idleft);
                RESULT.add(importar);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCLUIRHASKEL", 5, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 7: // INCLUIRHASKELS ::= 
            {
                Nodo RESULT = null;
                RESULT = new Nodo("incluidos", 0, 0);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCLUIRHASKELS", 4, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 6: // INCLUIRHASKELS ::= INCLUIRHASKEL 
            {
                Nodo RESULT = null;
                int nodoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int nodoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo nodo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = nodo;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCLUIRHASKELS", 4, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 5: // IMPORTACION ::= importar idenImportar inteFin 
            {
                Nodo RESULT = null;
                int imleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int imright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                String im = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                Nodo importar = new Nodo("importar", id, idright, idleft);
                RESULT = new Nodo("importaciones", imright, imleft);
                RESULT.add(importar);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTACION", 2, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 4: // IMPORTACION ::= IMPORTACION importar idenImportar inteFin 
            {
                Nodo RESULT = null;
                int nodoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int nodoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                Nodo nodo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                RESULT = nodo;
                Nodo importar = new Nodo("importar", id, idright, idleft);
                RESULT.add(importar);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTACION", 2, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 3: // IMPORTACIONES ::= 
            {
                Nodo RESULT = null;
                RESULT = new Nodo("importaciones", 0, 0);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTACIONES", 3, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 2: // IMPORTACIONES ::= IMPORTACION 
            {
                Nodo RESULT = null;
                int nodoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int nodoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo nodo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = nodo;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTACIONES", 3, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 1: // INICIO ::= IMPORTACIONES INCLUIRHASKELS CLASESALS 
            {
                Nodo RESULT = null;
                int importarleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int importarright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo importar = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int incluirleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int incluirright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo incluir = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int clasesAlsleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int clasesAlsright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo clasesAls = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("encabezado", importar.linea - 1, importar.columna - 1);
                RESULT.add(importar);
                RESULT.add(incluir);
                RESULT.add(clasesAls);
                Inicio.raiz = RESULT;

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO", 0, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 0: // $START ::= INICIO EOF 
            {
                Object RESULT = null;
                int start_valleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int start_valright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo start_val = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                RESULT = start_val;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            /* ACCEPT */
            CUP$Sintactico$parser.done_parsing();
            return CUP$Sintactico$result;

            /* . . . . . .*/
            default:
                throw new Exception(
                        "Invalid action number found in internal parse table");

        }
    }
}
