//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Apr 04 11:22:20 GMT-12:00 2017
//----------------------------------------------------
package Graphik.Analisis;

import Ast.*;
import Interfaz.Inicio;
import java_cup.runtime.*;

/**
 * CUP v0.11a beta 20060608 generated parser.
 *
 * @version Tue Apr 04 11:22:20 GMT-12:00 2017
 */
public class Sintactico extends java_cup.runtime.lr_parser {

    /**
     * Default constructor.
     */
    public Sintactico() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    public Sintactico(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][]
            = unpackFromStrings(new String[]{
        "\000\274\000\002\002\004\000\002\002\004\000\002\002"
        + "\003\000\002\110\004\000\002\110\003\000\002\107\003"
        + "\000\002\107\003\000\002\107\005\000\002\004\005\000"
        + "\002\007\005\000\002\003\004\000\002\003\003\000\002"
        + "\010\010\000\002\010\012\000\002\010\005\000\002\024"
        + "\004\000\002\024\004\000\002\024\004\000\002\024\002"
        + "\000\002\025\003\000\002\025\003\000\002\025\003\000"
        + "\002\025\003\000\002\025\003\000\002\027\003\000\002"
        + "\027\003\000\002\027\003\000\002\027\003\000\002\027"
        + "\003\000\002\027\003\000\002\027\003\000\002\012\006"
        + "\000\002\012\014\000\002\012\011\000\002\011\006\000"
        + "\002\011\011\000\002\047\010\000\002\047\012\000\002"
        + "\047\012\000\002\043\006\000\002\043\005\000\002\044"
        + "\005\000\002\044\005\000\002\045\005\000\002\045\003"
        + "\000\002\046\005\000\002\046\003\000\002\013\006\000"
        + "\002\013\004\000\002\016\004\000\002\016\003\000\002"
        + "\015\003\000\002\015\003\000\002\015\003\000\002\015"
        + "\003\000\002\015\005\000\002\020\003\000\002\020\002"
        + "\000\002\021\005\000\002\021\005\000\002\021\005\000"
        + "\002\021\005\000\002\021\005\000\002\021\005\000\002"
        + "\021\005\000\002\021\004\000\002\021\003\000\002\021"
        + "\003\000\002\021\003\000\002\021\003\000\002\021\003"
        + "\000\002\021\003\000\002\023\005\000\002\023\005\000"
        + "\002\023\005\000\002\023\005\000\002\023\005\000\002"
        + "\023\005\000\002\023\003\000\002\022\005\000\002\022"
        + "\005\000\002\022\005\000\002\022\004\000\002\022\003"
        + "\000\002\030\003\000\002\030\003\000\002\030\003\000"
        + "\002\030\003\000\002\030\003\000\002\017\013\000\002"
        + "\017\011\000\002\017\011\000\002\042\003\000\002\042"
        + "\002\000\002\041\005\000\002\041\003\000\002\026\003"
        + "\000\002\026\003\000\002\040\004\000\002\040\005\000"
        + "\002\050\005\000\002\050\004\000\002\032\005\000\002"
        + "\032\003\000\002\034\004\000\002\034\003\000\002\033"
        + "\003\000\002\033\002\000\002\035\004\000\002\035\004"
        + "\000\002\035\004\000\002\035\004\000\002\035\004\000"
        + "\002\035\003\000\002\035\003\000\002\035\003\000\002"
        + "\035\003\000\002\035\004\000\002\035\004\000\002\035"
        + "\004\000\002\035\004\000\002\035\004\000\002\035\004"
        + "\000\002\035\005\000\002\014\005\000\002\014\003\000"
        + "\002\036\005\000\002\036\007\000\002\036\005\000\002"
        + "\036\012\000\002\036\007\000\002\036\006\000\002\036"
        + "\010\000\002\036\010\000\002\037\005\000\002\037\005"
        + "\000\002\037\010\000\002\055\011\000\002\055\015\000"
        + "\002\056\011\000\002\056\012\000\002\066\004\000\002"
        + "\066\003\000\002\065\006\000\002\067\005\000\002\070"
        + "\004\000\002\070\004\000\002\057\015\000\002\071\007"
        + "\000\002\071\005\000\002\060\011\000\002\061\012\000"
        + "\002\063\003\000\002\063\004\000\002\062\003\000\002"
        + "\064\003\000\002\072\010\000\002\054\006\000\002\073"
        + "\007\000\002\073\006\000\002\074\006\000\002\074\004"
        + "\000\002\052\005\000\002\052\003\000\002\031\006\000"
        + "\002\031\005\000\002\031\005\000\002\051\003\000\002"
        + "\051\003\000\002\051\003\000\002\053\004\000\002\105"
        + "\006\000\002\075\003\000\002\075\002\000\002\076\004"
        + "\000\002\076\003\000\002\077\004\000\002\077\003\000"
        + "\002\077\005\000\002\100\006\000\002\106\004\000\002"
        + "\106\003\000\002\101\004\000\002\101\004\000\002\101"
        + "\004\000\002\102\010\000\002\103\006\000\002\104\006"
        + ""});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table
            = unpackFromStrings(new String[]{
        "\000\u0193\000\012\003\013\004\010\006\012\025\014\001"
        + "\002\000\010\002\ufff6\003\ufff6\004\ufff6\001\002\000\012"
        + "\003\013\004\010\006\012\025\014\001\002\000\012\003"
        + "\ufffd\004\ufffd\006\ufffd\025\ufffd\001\002\000\004\002\u0193"
        + "\001\002\000\004\116\032\001\002\000\010\002\uffff\003"
        + "\023\004\010\001\002\000\004\051\027\001\002\000\006"
        + "\004\022\060\021\001\002\000\004\116\017\001\002\000"
        + "\012\003\ufffb\004\ufffb\006\ufffb\025\ufffb\001\002\000\012"
        + "\003\ufffc\004\ufffc\006\ufffc\025\ufffc\001\002\000\004\060"
        + "\020\001\002\000\012\003\ufff8\004\ufff8\006\ufff8\025\ufff8"
        + "\001\002\000\010\003\025\006\012\025\014\001\002\000"
        + "\006\003\023\004\010\001\002\000\004\004\022\001\002"
        + "\000\010\002\ufff3\003\ufff3\004\ufff3\001\002\000\004\060"
        + "\021\001\002\000\012\003\ufffa\004\ufffa\006\ufffa\025\ufffa"
        + "\001\002\000\004\060\030\001\002\000\012\003\ufff9\004"
        + "\ufff9\006\ufff9\025\ufff9\001\002\000\010\002\ufff7\003\ufff7"
        + "\004\ufff7\001\002\000\010\020\uffef\055\uffef\064\033\001"
        + "\002\000\010\015\u0192\016\u0190\017\u0191\001\002\000\006"
        + "\020\035\055\036\001\002\000\004\116\u018c\001\002\000"
        + "\026\003\052\005\057\007\045\010\041\011\053\012\037"
        + "\013\047\014\051\056\uffc8\116\046\001\002\000\004\116"
        + "\uffe6\001\002\000\026\003\uffcb\005\uffcb\007\uffcb\010\uffcb"
        + "\011\uffcb\012\uffcb\013\uffcb\014\uffcb\056\uffcb\116\uffcb\001"
        + "\002\000\004\116\uffe8\001\002\000\026\003\052\005\057"
        + "\007\045\010\041\011\053\012\037\013\047\014\051\056"
        + "\uffc9\116\046\001\002\000\026\003\uffce\005\uffce\007\uffce"
        + "\010\uffce\011\uffce\012\uffce\013\uffce\014\uffce\056\uffce\116"
        + "\uffce\001\002\000\004\116\u0176\001\002\000\004\116\uffe9"
        + "\001\002\000\004\116\uffe4\001\002\000\004\116\uffe5\001"
        + "\002\000\026\003\uffcf\005\uffcf\007\uffcf\010\uffcf\011\uffcf"
        + "\012\uffcf\013\uffcf\014\uffcf\056\uffcf\116\uffcf\001\002\000"
        + "\010\024\276\030\275\116\uffe3\001\002\000\004\060\273"
        + "\001\002\000\004\116\uffe7\001\002\000\004\056\272\001"
        + "\002\000\026\003\uffcc\005\uffcc\007\uffcc\010\uffcc\011\uffcc"
        + "\012\uffcc\013\uffcc\014\uffcc\056\uffcc\116\uffcc\001\002\000"
        + "\026\003\uffcd\005\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd"
        + "\013\uffcd\014\uffcd\056\uffcd\116\uffcd\001\002\000\016\007"
        + "\060\010\062\011\066\012\061\013\065\116\063\001\002"
        + "\000\004\116\uffee\001\002\000\004\116\uffeb\001\002\000"
        + "\004\116\uffed\001\002\000\004\116\256\001\002\000\004"
        + "\116\067\001\002\000\004\116\uffea\001\002\000\004\116"
        + "\uffec\001\002\000\014\060\uffef\061\uffef\062\uffef\064\033"
        + "\065\075\001\002\000\006\060\071\061\072\001\002\000"
        + "\026\003\uffdf\005\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf"
        + "\013\uffdf\014\uffdf\056\uffdf\116\uffdf\001\002\000\004\116"
        + "\073\001\002\000\010\060\uffef\061\uffef\064\033\001\002"
        + "\000\006\060\uffd2\061\uffd2\001\002\000\034\023\107\026"
        + "\116\030\123\031\115\053\110\070\117\110\106\111\105"
        + "\112\125\113\102\114\120\115\113\116\131\001\002\000"
        + "\012\060\uffef\062\uffef\064\033\065\134\001\002\000\010"
        + "\060\uffd1\061\uffd1\062\100\001\002\000\034\023\107\026"
        + "\116\030\123\031\115\053\110\070\117\110\106\111\105"
        + "\112\125\113\102\114\120\115\113\116\131\001\002\000"
        + "\060\054\uffba\056\uffba\060\uffba\061\uffba\064\uffba\066\uffba"
        + "\067\uffba\070\uffba\071\uffba\072\uffba\073\uffba\074\uffba\075"
        + "\uffba\076\uffba\077\uffba\100\uffba\101\uffba\102\uffba\103\uffba"
        + "\104\uffba\105\uffba\106\uffba\107\uffba\001\002\000\060\054"
        + "\uffaa\056\uffaa\060\uffaa\061\uffaa\064\uffaa\066\uffaa\067\uffaa"
        + "\070\uffaa\071\uffaa\072\uffaa\073\uffaa\074\uffaa\075\uffaa\076"
        + "\uffaa\077\uffaa\100\uffaa\101\uffaa\102\uffaa\103\uffaa\104\uffaa"
        + "\105\uffaa\106\uffaa\107\uffaa\001\002\000\064\054\uff5e\056"
        + "\uff5e\060\uff5e\061\uff5e\062\uff5e\063\uff5e\064\uff5e\066\uff5e"
        + "\067\uff5e\070\uff5e\071\uff5e\072\uff5e\073\uff5e\074\uff5e\075"
        + "\uff5e\076\uff5e\077\uff5e\100\uff5e\101\uff5e\102\uff5e\103\uff5e"
        + "\104\uff5e\105\uff5e\106\uff5e\107\uff5e\001\002\000\064\054"
        + "\uff5a\056\uff5a\060\uff5a\061\uff5a\062\uff5a\063\uff5a\064\uff5a"
        + "\066\uff5a\067\uff5a\070\uff5a\071\uff5a\072\uff5a\073\uff5a\074"
        + "\uff5a\075\uff5a\076\uff5a\077\uff5a\100\uff5a\101\uff5a\102\uff5a"
        + "\103\uff5a\104\uff5a\105\uff5a\106\uff5a\107\uff5a\001\002\000"
        + "\060\054\uffac\056\uffac\060\uffac\061\uffac\064\uffac\066\uffac"
        + "\067\uffac\070\uffac\071\uffac\072\uffac\073\uffac\074\uffac\075"
        + "\uffac\076\uffac\077\uffac\100\uffac\101\uffac\102\uffac\103\uffac"
        + "\104\uffac\105\uffac\106\uffac\107\uffac\001\002\000\034\023"
        + "\107\026\116\030\123\031\115\053\110\070\117\110\106"
        + "\111\105\112\125\113\102\114\120\115\113\116\131\001"
        + "\002\000\006\030\123\116\131\001\002\000\034\023\107"
        + "\026\116\030\123\031\115\053\110\070\117\110\106\111"
        + "\105\112\125\113\102\114\120\115\113\116\131\001\002"
        + "\000\060\054\uffbd\056\uffbd\060\uffbd\061\uffbd\064\uffbd\066"
        + "\uffbd\067\uffbd\070\uffbd\071\uffbd\072\uffbd\073\uffbd\074\uffbd"
        + "\075\uffbd\076\uffbd\077\uffbd\100\uffbd\101\uffbd\102\uffbd\103"
        + "\uffbd\104\uffbd\105\uffbd\106\uffbd\107\uffbd\001\002\000\062"
        + "\054\uffbe\056\uffbe\060\uffbe\061\uffbe\063\221\064\uffbe\066"
        + "\uffbe\067\uffbe\070\uffbe\071\uffbe\072\uffbe\073\uffbe\074\uffbe"
        + "\075\uffbe\076\uffbe\077\uffbe\100\uffbe\101\uffbe\102\uffbe\103"
        + "\uffbe\104\uffbe\105\uffbe\106\uffbe\107\uffbe\001\002\000\060"
        + "\054\uffab\056\uffab\060\uffab\061\uffab\064\uffab\066\uffab\067"
        + "\uffab\070\uffab\071\uffab\072\uffab\073\uffab\074\uffab\075\uffab"
        + "\076\uffab\077\uffab\100\uffab\101\uffab\102\uffab\103\uffab\104"
        + "\uffab\105\uffab\106\uffab\107\uffab\001\002\000\024\054\uffae"
        + "\056\uffae\060\uffae\061\uffae\064\uffae\066\uffae\105\uffae\106"
        + "\uffae\107\uffae\001\002\000\004\053\216\001\002\000\004"
        + "\116\211\001\002\000\032\023\107\026\116\030\123\031"
        + "\115\053\110\070\117\111\105\112\125\113\102\114\120"
        + "\115\113\116\131\001\002\000\060\054\uffa9\056\uffa9\060"
        + "\uffa9\061\uffa9\064\uffa9\066\uffa9\067\uffa9\070\uffa9\071\uffa9"
        + "\072\uffa9\073\uffa9\074\uffa9\075\uffa9\076\uffa9\077\uffa9\100"
        + "\uffa9\101\uffa9\102\uffa9\103\uffa9\104\uffa9\105\uffa9\106\uffa9"
        + "\107\uffa9\001\002\000\012\060\207\105\141\106\136\107"
        + "\140\001\002\000\060\054\uffbb\056\uffbb\060\uffbb\061\uffbb"
        + "\064\uffbb\066\uffbb\067\uffbb\070\uffbb\071\uffbb\072\uffbb\073"
        + "\uffbb\074\uffbb\075\uffbb\076\uffbb\077\uffbb\100\uffbb\101\uffbb"
        + "\102\uffbb\103\uffbb\104\uffbb\105\uffbb\106\uffbb\107\uffbb\001"
        + "\002\000\004\053\205\001\002\000\064\054\uff58\056\uff58"
        + "\060\uff58\061\uff58\062\uff58\063\uff58\064\uff58\066\uff58\067"
        + "\uff58\070\uff58\071\uff58\072\uff58\073\uff58\074\uff58\075\uff58"
        + "\076\uff58\077\uff58\100\uff58\101\uff58\102\uff58\103\uff58\104"
        + "\uff58\105\uff58\106\uff58\107\uff58\001\002\000\060\054\uffad"
        + "\056\uffad\060\uffad\061\uffad\064\uffad\066\uffad\067\uffad\070"
        + "\uffad\071\uffad\072\uffad\073\uffad\074\uffad\075\uffad\076\uffad"
        + "\077\uffad\100\uffad\101\uffad\102\uffad\103\uffad\104\uffad\105"
        + "\uffad\106\uffad\107\uffad\001\002\000\060\054\uffb3\056\uffb3"
        + "\060\uffb3\061\uffb3\064\uffb3\066\uffb3\067\167\070\162\071"
        + "\156\072\153\073\166\074\165\075\160\076\157\077\170"
        + "\100\163\101\155\102\154\103\164\104\161\105\uffb3\106"
        + "\uffb3\107\uffb3\001\002\000\060\054\uffbc\056\uffbc\060\uffbc"
        + "\061\uffbc\064\uffbc\066\uffbc\067\uffbc\070\uffbc\071\uffbc\072"
        + "\uffbc\073\uffbc\074\uffbc\075\uffbc\076\uffbc\077\uffbc\100\uffbc"
        + "\101\uffbc\102\uffbc\103\uffbc\104\uffbc\105\uffbc\106\uffbc\107"
        + "\uffbc\001\002\000\060\054\uffbf\056\uffbf\060\uffbf\061\uffbf"
        + "\064\uffbf\066\uffbf\067\uffbf\070\uffbf\071\uffbf\072\uffbf\073"
        + "\uffbf\074\uffbf\075\uffbf\076\uffbf\077\uffbf\100\uffbf\101\uffbf"
        + "\102\uffbf\103\uffbf\104\uffbf\105\uffbf\106\uffbf\107\uffbf\001"
        + "\002\000\070\053\132\054\uff59\056\uff59\060\uff59\061\uff59"
        + "\062\uff59\063\uff59\064\uff59\065\075\066\uff59\067\uff59\070"
        + "\uff59\071\uff59\072\uff59\073\uff59\074\uff59\075\uff59\076\uff59"
        + "\077\uff59\100\uff59\101\uff59\102\uff59\103\uff59\104\uff59\105"
        + "\uff59\106\uff59\107\uff59\001\002\000\036\023\107\026\116"
        + "\030\123\031\115\053\110\054\147\070\117\110\106\111"
        + "\105\112\125\113\102\114\120\115\113\116\131\001\002"
        + "\000\066\054\uff57\056\uff57\060\uff57\061\uff57\062\uff57\063"
        + "\uff57\064\uff57\065\134\066\uff57\067\uff57\070\uff57\071\uff57"
        + "\072\uff57\073\uff57\074\uff57\075\uff57\076\uff57\077\uff57\100"
        + "\uff57\101\uff57\102\uff57\103\uff57\104\uff57\105\uff57\106\uff57"
        + "\107\uff57\001\002\000\034\023\107\026\116\030\123\031"
        + "\115\053\110\070\117\110\106\111\105\112\125\113\102"
        + "\114\120\115\113\116\131\001\002\000\012\066\137\105"
        + "\141\106\136\107\140\001\002\000\034\023\107\026\116"
        + "\030\123\031\115\053\110\070\117\110\106\111\105\112"
        + "\125\113\102\114\120\115\113\116\131\001\002\000\066"
        + "\054\uffda\056\uffda\060\uffda\061\uffda\062\uffda\063\uffda\064"
        + "\uffda\065\uffda\066\uffda\067\uffda\070\uffda\071\uffda\072\uffda"
        + "\073\uffda\074\uffda\075\uffda\076\uffda\077\uffda\100\uffda\101"
        + "\uffda\102\uffda\103\uffda\104\uffda\105\uffda\106\uffda\107\uffda"
        + "\001\002\000\034\023\107\026\116\030\123\031\115\053"
        + "\110\070\117\110\106\111\105\112\125\113\102\114\120"
        + "\115\113\116\131\001\002\000\034\023\107\026\116\030"
        + "\123\031\115\053\110\070\117\110\106\111\105\112\125"
        + "\113\102\114\120\115\113\116\131\001\002\000\024\054"
        + "\uffb1\056\uffb1\060\uffb1\061\uffb1\064\uffb1\066\uffb1\105\uffb1"
        + "\106\uffb1\107\140\001\002\000\024\054\uffb2\056\uffb2\060"
        + "\uffb2\061\uffb2\064\uffb2\066\uffb2\105\uffb2\106\uffb2\107\uffb2"
        + "\001\002\000\024\054\uffb0\056\uffb0\060\uffb0\061\uffb0\064"
        + "\uffb0\066\uffb0\105\uffb0\106\uffb0\107\140\001\002\000\006"
        + "\054\151\061\150\001\002\000\014\054\uff9a\061\uff9a\105"
        + "\141\106\136\107\140\001\002\000\064\054\uff5c\056\uff5c"
        + "\060\uff5c\061\uff5c\062\uff5c\063\uff5c\064\uff5c\066\uff5c\067"
        + "\uff5c\070\uff5c\071\uff5c\072\uff5c\073\uff5c\074\uff5c\075\uff5c"
        + "\076\uff5c\077\uff5c\100\uff5c\101\uff5c\102\uff5c\103\uff5c\104"
        + "\uff5c\105\uff5c\106\uff5c\107\uff5c\001\002\000\034\023\107"
        + "\026\116\030\123\031\115\053\110\070\117\110\106\111"
        + "\105\112\125\113\102\114\120\115\113\116\131\001\002"
        + "\000\064\054\uff5d\056\uff5d\060\uff5d\061\uff5d\062\uff5d\063"
        + "\uff5d\064\uff5d\066\uff5d\067\uff5d\070\uff5d\071\uff5d\072\uff5d"
        + "\073\uff5d\074\uff5d\075\uff5d\076\uff5d\077\uff5d\100\uff5d\101"
        + "\uff5d\102\uff5d\103\uff5d\104\uff5d\105\uff5d\106\uff5d\107\uff5d"
        + "\001\002\000\014\054\uff9b\061\uff9b\105\141\106\136\107"
        + "\140\001\002\000\032\023\107\026\116\030\123\031\115"
        + "\053\110\070\117\111\105\112\125\113\102\114\120\115"
        + "\113\116\131\001\002\000\032\023\107\026\116\030\123"
        + "\031\115\053\110\070\117\111\105\112\125\113\102\114"
        + "\120\115\113\116\131\001\002\000\032\023\107\026\116"
        + "\030\123\031\115\053\110\070\117\111\105\112\125\113"
        + "\102\114\120\115\113\116\131\001\002\000\032\023\107"
        + "\026\116\030\123\031\115\053\110\070\117\111\105\112"
        + "\125\113\102\114\120\115\113\116\131\001\002\000\060"
        + "\054\uff6f\056\uff6f\060\uff6f\061\uff6f\064\uff6f\066\uff6f\067"
        + "\uff6f\070\uff6f\071\uff6f\072\uff6f\073\uff6f\074\uff6f\075\uff6f"
        + "\076\uff6f\077\uff6f\100\uff6f\101\uff6f\102\uff6f\103\uff6f\104"
        + "\uff6f\105\uff6f\106\uff6f\107\uff6f\001\002\000\060\054\uff70"
        + "\056\uff70\060\uff70\061\uff70\064\uff70\066\uff70\067\uff70\070"
        + "\uff70\071\uff70\072\uff70\073\uff70\074\uff70\075\uff70\076\uff70"
        + "\077\uff70\100\uff70\101\uff70\102\uff70\103\uff70\104\uff70\105"
        + "\uff70\106\uff70\107\uff70\001\002\000\032\023\107\026\116"
        + "\030\123\031\115\053\110\070\117\111\105\112\125\113"
        + "\102\114\120\115\113\116\131\001\002\000\032\023\107"
        + "\026\116\030\123\031\115\053\110\070\117\111\105\112"
        + "\125\113\102\114\120\115\113\116\131\001\002\000\032"
        + "\023\107\026\116\030\123\031\115\053\110\070\117\111"
        + "\105\112\125\113\102\114\120\115\113\116\131\001\002"
        + "\000\032\023\107\026\116\030\123\031\115\053\110\070"
        + "\117\111\105\112\125\113\102\114\120\115\113\116\131"
        + "\001\002\000\032\023\107\026\116\030\123\031\115\053"
        + "\110\070\117\111\105\112\125\113\102\114\120\115\113"
        + "\116\131\001\002\000\032\023\107\026\116\030\123\031"
        + "\115\053\110\070\117\111\105\112\125\113\102\114\120"
        + "\115\113\116\131\001\002\000\032\023\107\026\116\030"
        + "\123\031\115\053\110\070\117\111\105\112\125\113\102"
        + "\114\120\115\113\116\131\001\002\000\032\023\107\026"
        + "\116\030\123\031\115\053\110\070\117\111\105\112\125"
        + "\113\102\114\120\115\113\116\131\001\002\000\044\054"
        + "\uffb8\056\uffb8\060\uffb8\061\uffb8\064\uffb8\066\uffb8\067\167"
        + "\070\162\071\156\072\153\073\166\074\165\075\160\076"
        + "\157\105\uffb8\106\uffb8\107\uffb8\001\002\000\060\054\uffc7"
        + "\056\uffc7\060\uffc7\061\uffc7\064\uffc7\066\uffc7\067\uffc7\070"
        + "\uffc7\071\156\072\153\073\166\074\165\075\160\076\157"
        + "\077\uffc7\100\uffc7\101\uffc7\102\uffc7\103\uffc7\104\uffc7\105"
        + "\uffc7\106\uffc7\107\uffc7\001\002\000\060\054\uffc2\056\uffc2"
        + "\060\uffc2\061\uffc2\064\uffc2\066\uffc2\067\uffc2\070\uffc2\071"
        + "\uffc2\072\uffc2\073\uffc2\074\165\075\160\076\157\077\uffc2"
        + "\100\uffc2\101\uffc2\102\uffc2\103\uffc2\104\uffc2\105\uffc2\106"
        + "\uffc2\107\uffc2\001\002\000\060\054\uffc3\056\uffc3\060\uffc3"
        + "\061\uffc3\064\uffc3\066\uffc3\067\uffc3\070\uffc3\071\uffc3\072"
        + "\uffc3\073\uffc3\074\uffc3\075\160\076\157\077\uffc3\100\uffc3"
        + "\101\uffc3\102\uffc3\103\uffc3\104\uffc3\105\uffc3\106\uffc3\107"
        + "\uffc3\001\002\000\044\054\uffb5\056\uffb5\060\uffb5\061\uffb5"
        + "\064\uffb5\066\uffb5\067\167\070\162\071\156\072\153\073"
        + "\166\074\165\075\160\076\157\105\uffb5\106\uffb5\107\uffb5"
        + "\001\002\000\044\054\uffb7\056\uffb7\060\uffb7\061\uffb7\064"
        + "\uffb7\066\uffb7\067\167\070\162\071\156\072\153\073\166"
        + "\074\165\075\160\076\157\105\uffb7\106\uffb7\107\uffb7\001"
        + "\002\000\060\054\uffc6\056\uffc6\060\uffc6\061\uffc6\064\uffc6"
        + "\066\uffc6\067\uffc6\070\uffc6\071\156\072\153\073\166\074"
        + "\165\075\160\076\157\077\uffc6\100\uffc6\101\uffc6\102\uffc6"
        + "\103\uffc6\104\uffc6\105\uffc6\106\uffc6\107\uffc6\001\002\000"
        + "\044\054\uffb4\056\uffb4\060\uffb4\061\uffb4\064\uffb4\066\uffb4"
        + "\067\167\070\162\071\156\072\153\073\166\074\165\075"
        + "\160\076\157\105\uffb4\106\uffb4\107\uffb4\001\002\000\060"
        + "\054\uffc5\056\uffc5\060\uffc5\061\uffc5\064\uffc5\066\uffc5\067"
        + "\uffc5\070\uffc5\071\uffc5\072\uffc5\073\uffc5\074\165\075\160"
        + "\076\157\077\uffc5\100\uffc5\101\uffc5\102\uffc5\103\uffc5\104"
        + "\uffc5\105\uffc5\106\uffc5\107\uffc5\001\002\000\044\054\uffb9"
        + "\056\uffb9\060\uffb9\061\uffb9\064\uffb9\066\uffb9\067\167\070"
        + "\162\071\156\072\153\073\166\074\165\075\160\076\157"
        + "\105\uffb9\106\uffb9\107\uffb9\001\002\000\044\054\uffb6\056"
        + "\uffb6\060\uffb6\061\uffb6\064\uffb6\066\uffb6\067\167\070\162"
        + "\071\156\072\153\073\166\074\165\075\160\076\157\105"
        + "\uffb6\106\uffb6\107\uffb6\001\002\000\060\054\uffc4\056\uffc4"
        + "\060\uffc4\061\uffc4\064\uffc4\066\uffc4\067\uffc4\070\uffc4\071"
        + "\uffc4\072\uffc4\073\uffc4\074\165\075\160\076\157\077\uffc4"
        + "\100\uffc4\101\uffc4\102\uffc4\103\uffc4\104\uffc4\105\uffc4\106"
        + "\uffc4\107\uffc4\001\002\000\004\054\206\001\002\000\064"
        + "\054\uff5b\056\uff5b\060\uff5b\061\uff5b\062\uff5b\063\uff5b\064"
        + "\uff5b\066\uff5b\067\uff5b\070\uff5b\071\uff5b\072\uff5b\073\uff5b"
        + "\074\uff5b\075\uff5b\076\uff5b\077\uff5b\100\uff5b\101\uff5b\102"
        + "\uff5b\103\uff5b\104\uff5b\105\uff5b\106\uff5b\107\uff5b\001\002"
        + "\000\026\003\uffde\005\uffde\007\uffde\010\uffde\011\uffde\012"
        + "\uffde\013\uffde\014\uffde\056\uffde\116\uffde\001\002\000\060"
        + "\054\uffc0\056\uffc0\060\uffc0\061\uffc0\064\uffc0\066\uffc0\067"
        + "\uffc0\070\uffc0\071\156\072\153\073\166\074\165\075\160"
        + "\076\157\077\uffc0\100\uffc0\101\uffc0\102\uffc0\103\uffc0\104"
        + "\uffc0\105\uffc0\106\uffc0\107\uffc0\001\002\000\004\053\212"
        + "\001\002\000\036\023\107\026\116\030\123\031\115\053"
        + "\110\054\214\070\117\110\106\111\105\112\125\113\102"
        + "\114\120\115\113\116\131\001\002\000\006\054\215\061"
        + "\150\001\002\000\060\054\uff62\056\uff62\060\uff62\061\uff62"
        + "\064\uff62\066\uff62\067\uff62\070\uff62\071\uff62\072\uff62\073"
        + "\uff62\074\uff62\075\uff62\076\uff62\077\uff62\100\uff62\101\uff62"
        + "\102\uff62\103\uff62\104\uff62\105\uff62\106\uff62\107\uff62\001"
        + "\002\000\060\054\uff63\056\uff63\060\uff63\061\uff63\064\uff63"
        + "\066\uff63\067\uff63\070\uff63\071\uff63\072\uff63\073\uff63\074"
        + "\uff63\075\uff63\076\uff63\077\uff63\100\uff63\101\uff63\102\uff63"
        + "\103\uff63\104\uff63\105\uff63\106\uff63\107\uff63\001\002\000"
        + "\034\023\107\026\116\030\123\031\115\053\110\070\117"
        + "\110\106\111\105\112\125\113\102\114\120\115\113\116"
        + "\131\001\002\000\012\054\220\105\141\106\136\107\140"
        + "\001\002\000\060\054\uff56\056\uff56\060\uff56\061\uff56\064"
        + "\uff56\066\uff56\067\uff56\070\uff56\071\uff56\072\uff56\073\uff56"
        + "\074\uff56\075\uff56\076\uff56\077\uff56\100\uff56\101\uff56\102"
        + "\uff56\103\uff56\104\uff56\105\uff56\106\uff56\107\uff56\001\002"
        + "\000\006\030\123\116\131\001\002\000\064\054\uff5f\056"
        + "\uff5f\060\uff5f\061\uff5f\062\uff5f\063\uff5f\064\uff5f\066\uff5f"
        + "\067\uff5f\070\uff5f\071\uff5f\072\uff5f\073\uff5f\074\uff5f\075"
        + "\uff5f\076\uff5f\077\uff5f\100\uff5f\101\uff5f\102\uff5f\103\uff5f"
        + "\104\uff5f\105\uff5f\106\uff5f\107\uff5f\001\002\000\012\054"
        + "\224\105\141\106\136\107\140\001\002\000\060\054\uffc1"
        + "\056\uffc1\060\uffc1\061\uffc1\064\uffc1\066\uffc1\067\uffc1\070"
        + "\uffc1\071\uffc1\072\uffc1\073\uffc1\074\uffc1\075\uffc1\076\uffc1"
        + "\077\uffc1\100\uffc1\101\uffc1\102\uffc1\103\uffc1\104\uffc1\105"
        + "\uffc1\106\uffc1\107\uffc1\001\002\000\004\063\227\001\002"
        + "\000\062\054\uff60\056\uff60\060\uff60\061\uff60\063\uff5a\064"
        + "\uff60\066\uff60\067\uff60\070\uff60\071\uff60\072\uff60\073\uff60"
        + "\074\uff60\075\uff60\076\uff60\077\uff60\100\uff60\101\uff60\102"
        + "\uff60\103\uff60\104\uff60\105\uff60\106\uff60\107\uff60\001\002"
        + "\000\006\030\123\116\131\001\002\000\062\054\uff61\056"
        + "\uff61\060\uff61\061\uff61\063\uff5a\064\uff61\066\uff61\067\uff61"
        + "\070\uff61\071\uff61\072\uff61\073\uff61\074\uff61\075\uff61\076"
        + "\uff61\077\uff61\100\uff61\101\uff61\102\uff61\103\uff61\104\uff61"
        + "\105\uff61\106\uff61\107\uff61\001\002\000\024\054\uffaf\056"
        + "\uffaf\060\uffaf\061\uffaf\064\uffaf\066\uffaf\105\uffaf\106\uffaf"
        + "\107\uffaf\001\002\000\006\060\233\062\234\001\002\000"
        + "\026\003\uffdd\005\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd"
        + "\013\uffdd\014\uffdd\056\uffdd\116\uffdd\001\002\000\036\023"
        + "\107\026\116\030\123\031\115\053\110\055\236\070\117"
        + "\110\106\111\105\112\125\113\102\114\120\115\113\116"
        + "\131\001\002\000\004\060\253\001\002\000\036\023\107"
        + "\026\116\030\123\031\115\053\110\055\236\070\117\110"
        + "\106\111\105\112\125\113\102\114\120\115\113\116\131"
        + "\001\002\000\012\060\240\105\141\106\136\107\140\001"
        + "\002\000\026\003\uffdb\005\uffdb\007\uffdb\010\uffdb\011\uffdb"
        + "\012\uffdb\013\uffdb\014\uffdb\056\uffdb\116\uffdb\001\002\000"
        + "\006\056\uffd5\061\uffd5\001\002\000\014\056\uffd3\061\uffd3"
        + "\105\141\106\136\107\140\001\002\000\006\056\251\061"
        + "\250\001\002\000\006\056\246\061\245\001\002\000\004"
        + "\055\236\001\002\000\010\056\uffd7\060\uffd7\061\uffd7\001"
        + "\002\000\006\056\uffd6\061\uffd6\001\002\000\034\023\107"
        + "\026\116\030\123\031\115\053\110\070\117\110\106\111"
        + "\105\112\125\113\102\114\120\115\113\116\131\001\002"
        + "\000\010\056\uffd8\060\uffd8\061\uffd8\001\002\000\014\056"
        + "\uffd4\061\uffd4\105\141\106\136\107\140\001\002\000\026"
        + "\003\uffdc\005\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013"
        + "\uffdc\014\uffdc\056\uffdc\116\uffdc\001\002\000\012\066\255"
        + "\105\141\106\136\107\140\001\002\000\066\054\uffd9\056"
        + "\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9\065\uffd9"
        + "\066\uffd9\067\uffd9\070\uffd9\071\uffd9\072\uffd9\073\uffd9\074"
        + "\uffd9\075\uffd9\076\uffd9\077\uffd9\100\uffd9\101\uffd9\102\uffd9"
        + "\103\uffd9\104\uffd9\105\uffd9\106\uffd9\107\uffd9\001\002\000"
        + "\012\060\uffef\061\uffef\062\uffef\064\033\001\002\000\006"
        + "\060\260\061\072\001\002\000\026\003\uffe2\005\uffe2\007"
        + "\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\056\uffe2"
        + "\116\uffe2\001\002\000\010\060\uffd1\061\uffd1\062\262\001"
        + "\002\000\036\021\264\023\107\026\116\030\123\031\115"
        + "\053\110\070\117\110\106\111\105\112\125\113\102\114"
        + "\120\115\113\116\131\001\002\000\012\060\271\105\141"
        + "\106\136\107\140\001\002\000\004\116\265\001\002\000"
        + "\004\053\266\001\002\000\004\054\267\001\002\000\004"
        + "\060\270\001\002\000\026\003\uffe1\005\uffe1\007\uffe1\010"
        + "\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\056\uffe1\116\uffe1"
        + "\001\002\000\026\003\uffe0\005\uffe0\007\uffe0\010\uffe0\011"
        + "\uffe0\012\uffe0\013\uffe0\014\uffe0\056\uffe0\116\uffe0\001\002"
        + "\000\010\002\ufff5\003\ufff5\004\ufff5\001\002\000\024\003"
        + "\052\005\057\007\045\010\041\011\053\012\037\013\047"
        + "\014\051\116\046\001\002\000\026\003\uffca\005\uffca\007"
        + "\uffca\010\uffca\011\uffca\012\uffca\013\uffca\014\uffca\056\uffca"
        + "\116\uffca\001\002\000\004\053\u014f\001\002\000\004\053"
        + "\277\001\002\000\004\054\300\001\002\000\004\055\301"
        + "\001\002\000\064\003\325\005\322\022\340\023\107\026"
        + "\116\027\333\030\123\031\115\036\304\037\314\041\311"
        + "\044\324\045\316\046\332\047\302\050\337\053\110\056"
        + "\uff96\070\117\111\105\112\125\113\102\114\120\115\113"
        + "\116\131\001\002\000\004\060\uff67\001\002\000\024\060"
        + "\u014e\067\uffbb\070\uffbb\071\uffbb\072\uffbb\073\uffbb\074\uffbb"
        + "\075\uffbb\076\uffbb\001\002\000\004\053\u014b\001\002\000"
        + "\004\060\u014a\001\002\000\070\003\uff90\005\uff90\022\uff90"
        + "\023\uff90\026\uff90\027\uff90\030\uff90\031\uff90\036\uff90\037"
        + "\uff90\041\uff90\042\uff90\043\uff90\044\uff90\045\uff90\046\uff90"
        + "\047\uff90\050\uff90\053\uff90\056\uff90\070\uff90\111\uff90\112"
        + "\uff90\113\uff90\114\uff90\115\uff90\116\uff90\001\002\000\004"
        + "\056\u0149\001\002\000\070\003\uff98\005\uff98\022\uff98\023"
        + "\uff98\026\uff98\027\uff98\030\uff98\031\uff98\036\uff98\037\uff98"
        + "\041\uff98\042\uff98\043\uff98\044\uff98\045\uff98\046\uff98\047"
        + "\uff98\050\uff98\053\uff98\056\uff98\070\uff98\111\uff98\112\uff98"
        + "\113\uff98\114\uff98\115\uff98\116\uff98\001\002\000\004\053"
        + "\u0138\001\002\000\070\003\325\005\322\022\340\023\107"
        + "\026\116\027\333\030\123\031\115\036\304\037\314\041"
        + "\311\042\uff97\043\uff97\044\324\045\316\046\332\047\302"
        + "\050\337\053\110\056\uff97\070\117\111\105\112\125\113"
        + "\102\114\120\115\113\116\131\001\002\000\022\067\167"
        + "\070\162\071\156\072\153\073\166\074\165\075\160\076"
        + "\157\001\002\000\004\053\u012d\001\002\000\070\003\uff8d"
        + "\005\uff8d\022\uff8d\023\uff8d\026\uff8d\027\uff8d\030\uff8d\031"
        + "\uff8d\036\uff8d\037\uff8d\041\uff8d\042\uff8d\043\uff8d\044\uff8d"
        + "\045\uff8d\046\uff8d\047\uff8d\050\uff8d\053\uff8d\056\uff8d\070"
        + "\uff8d\111\uff8d\112\uff8d\113\uff8d\114\uff8d\115\uff8d\116\uff8d"
        + "\001\002\000\004\053\u0127\001\002\000\004\060\u0126\001"
        + "\002\000\004\060\u0125\001\002\000\004\060\u0124\001\002"
        + "\000\016\007\060\010\062\011\066\012\061\013\065\116"
        + "\u0110\001\002\000\024\060\u010f\067\uffbd\070\uffbd\071\uffbd"
        + "\072\uffbd\073\uffbd\074\uffbd\075\uffbd\076\uffbd\001\002\000"
        + "\004\053\375\001\002\000\004\060\373\001\002\000\004"
        + "\060\372\001\002\000\004\060\371\001\002\000\004\060"
        + "\370\001\002\000\070\003\uff8f\005\uff8f\022\uff8f\023\uff8f"
        + "\026\uff8f\027\uff8f\030\uff8f\031\uff8f\036\uff8f\037\uff8f\041"
        + "\uff8f\042\uff8f\043\uff8f\044\uff8f\045\uff8f\046\uff8f\047\uff8f"
        + "\050\uff8f\053\uff8f\056\uff8f\070\uff8f\111\uff8f\112\uff8f\113"
        + "\uff8f\114\uff8f\115\uff8f\116\uff8f\001\002\000\004\055\361"
        + "\001\002\000\004\053\354\001\002\000\026\062\345\063"
        + "\221\067\uffbe\070\uffbe\071\uffbe\072\uffbe\073\uffbe\074\uffbe"
        + "\075\uffbe\076\uffbe\001\002\000\024\060\344\067\uffbc\070"
        + "\uffbc\071\uffbc\072\uffbc\073\uffbc\074\uffbc\075\uffbc\076\uffbc"
        + "\001\002\000\004\060\343\001\002\000\004\060\uff66\001"
        + "\002\000\036\023\107\026\116\030\123\031\115\053\110"
        + "\060\uff69\070\117\110\106\111\105\112\125\113\102\114"
        + "\120\115\113\116\131\001\002\000\070\003\uff8e\005\uff8e"
        + "\022\uff8e\023\uff8e\026\uff8e\027\uff8e\030\uff8e\031\uff8e\036"
        + "\uff8e\037\uff8e\041\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e"
        + "\046\uff8e\047\uff8e\050\uff8e\053\uff8e\056\uff8e\070\uff8e\111"
        + "\uff8e\112\uff8e\113\uff8e\114\uff8e\115\uff8e\116\uff8e\001\002"
        + "\000\012\060\uff68\105\141\106\136\107\140\001\002\000"
        + "\070\003\uff8a\005\uff8a\022\uff8a\023\uff8a\026\uff8a\027\uff8a"
        + "\030\uff8a\031\uff8a\036\uff8a\037\uff8a\041\uff8a\042\uff8a\043"
        + "\uff8a\044\uff8a\045\uff8a\046\uff8a\047\uff8a\050\uff8a\053\uff8a"
        + "\056\uff8a\070\uff8a\111\uff8a\112\uff8a\113\uff8a\114\uff8a\115"
        + "\uff8a\116\uff8a\001\002\000\070\003\uff94\005\uff94\022\uff94"
        + "\023\uff94\026\uff94\027\uff94\030\uff94\031\uff94\036\uff94\037"
        + "\uff94\041\uff94\042\uff94\043\uff94\044\uff94\045\uff94\046\uff94"
        + "\047\uff94\050\uff94\053\uff94\056\uff94\070\uff94\111\uff94\112"
        + "\uff94\113\uff94\114\uff94\115\uff94\116\uff94\001\002\000\040"
        + "\021\350\023\107\026\116\030\123\031\115\053\110\055"
        + "\236\070\117\110\106\111\105\112\125\113\102\114\120"
        + "\115\113\116\131\001\002\000\004\060\uff7a\001\002\000"
        + "\012\060\uff7b\105\141\106\136\107\140\001\002\000\004"
        + "\116\351\001\002\000\004\053\352\001\002\000\004\054"
        + "\353\001\002\000\004\060\uff79\001\002\000\006\030\123"
        + "\116\131\001\002\000\006\061\356\063\221\001\002\000"
        + "\006\030\123\116\131\001\002\000\006\054\360\063\221"
        + "\001\002\000\004\060\uff65\001\002\000\064\003\325\005"
        + "\322\022\340\023\107\026\116\027\333\030\123\031\115"
        + "\036\304\037\314\041\311\044\324\045\316\046\332\047"
        + "\302\050\337\053\110\056\uff96\070\117\111\105\112\125"
        + "\113\102\114\120\115\113\116\131\001\002\000\004\056"
        + "\363\001\002\000\004\045\364\001\002\000\004\053\365"
        + "\001\002\000\034\023\107\026\116\030\123\031\115\053"
        + "\110\070\117\110\106\111\105\112\125\113\102\114\120"
        + "\115\113\116\131\001\002\000\012\054\367\105\141\106"
        + "\136\107\140\001\002\000\004\060\uff6a\001\002\000\070"
        + "\003\uff93\005\uff93\022\uff93\023\uff93\026\uff93\027\uff93\030"
        + "\uff93\031\uff93\036\uff93\037\uff93\041\uff93\042\uff93\043\uff93"
        + "\044\uff93\045\uff93\046\uff93\047\uff93\050\uff93\053\uff93\056"
        + "\uff93\070\uff93\111\uff93\112\uff93\113\uff93\114\uff93\115\uff93"
        + "\116\uff93\001\002\000\070\003\uff92\005\uff92\022\uff92\023"
        + "\uff92\026\uff92\027\uff92\030\uff92\031\uff92\036\uff92\037\uff92"
        + "\041\uff92\042\uff92\043\uff92\044\uff92\045\uff92\046\uff92\047"
        + "\uff92\050\uff92\053\uff92\056\uff92\070\uff92\111\uff92\112\uff92"
        + "\113\uff92\114\uff92\115\uff92\116\uff92\001\002\000\070\003"
        + "\uff88\005\uff88\022\uff88\023\uff88\026\uff88\027\uff88\030\uff88"
        + "\031\uff88\036\uff88\037\uff88\041\uff88\042\uff88\043\uff88\044"
        + "\uff88\045\uff88\046\uff88\047\uff88\050\uff88\053\uff88\056\uff88"
        + "\070\uff88\111\uff88\112\uff88\113\uff88\114\uff88\115\uff88\116"
        + "\uff88\001\002\000\062\003\325\005\322\022\340\023\107"
        + "\026\116\027\333\030\123\031\115\036\304\037\314\041"
        + "\311\044\324\045\316\046\332\047\302\050\337\053\110"
        + "\070\117\111\105\112\125\113\102\114\120\115\113\116"
        + "\131\001\002\000\070\003\uff86\005\uff86\022\uff86\023\uff86"
        + "\026\uff86\027\uff86\030\uff86\031\uff86\036\uff86\037\uff86\041"
        + "\uff86\042\uff86\043\uff86\044\uff86\045\uff86\046\uff86\047\uff86"
        + "\050\uff86\053\uff86\056\uff86\070\uff86\111\uff86\112\uff86\113"
        + "\uff86\114\uff86\115\uff86\116\uff86\001\002\000\010\005\377"
        + "\030\123\116\131\001\002\000\006\062\u010d\063\221\001"
        + "\002\000\004\007\u0109\001\002\000\004\064\u0101\001\002"
        + "\000\034\023\107\026\116\030\123\031\115\053\110\070"
        + "\117\110\106\111\105\112\125\113\102\114\120\115\113"
        + "\116\131\001\002\000\012\064\u0103\105\141\106\136\107"
        + "\140\001\002\000\032\023\107\026\116\030\123\031\115"
        + "\053\110\070\117\111\105\112\125\113\102\114\120\115"
        + "\113\116\131\001\002\000\024\054\u0105\067\uffbb\070\uffbb"
        + "\071\uffbb\072\uffbb\073\uffbb\074\uffbb\075\uffbb\076\uffbb\001"
        + "\002\000\004\055\u0106\001\002\000\064\003\325\005\322"
        + "\022\340\023\107\026\116\027\333\030\123\031\115\036"
        + "\304\037\314\041\311\044\324\045\316\046\332\047\302"
        + "\050\337\053\110\056\uff96\070\117\111\105\112\125\113"
        + "\102\114\120\115\113\116\131\001\002\000\004\056\u0108"
        + "\001\002\000\070\003\uff6e\005\uff6e\022\uff6e\023\uff6e\026"
        + "\uff6e\027\uff6e\030\uff6e\031\uff6e\036\uff6e\037\uff6e\041\uff6e"
        + "\042\uff6e\043\uff6e\044\uff6e\045\uff6e\046\uff6e\047\uff6e\050"
        + "\uff6e\053\uff6e\056\uff6e\070\uff6e\111\uff6e\112\uff6e\113\uff6e"
        + "\114\uff6e\115\uff6e\116\uff6e\001\002\000\004\116\u010a\001"
        + "\002\000\004\062\u010b\001\002\000\034\023\107\026\116"
        + "\030\123\031\115\053\110\070\117\110\106\111\105\112"
        + "\125\113\102\114\120\115\113\116\131\001\002\000\012"
        + "\064\uff6d\105\141\106\136\107\140\001\002\000\034\023"
        + "\107\026\116\030\123\031\115\053\110\070\117\110\106"
        + "\111\105\112\125\113\102\114\120\115\113\116\131\001"
        + "\002\000\012\064\uff6c\105\141\106\136\107\140\001\002"
        + "\000\070\003\uff95\005\uff95\022\uff95\023\uff95\026\uff95\027"
        + "\uff95\030\uff95\031\uff95\036\uff95\037\uff95\041\uff95\042\uff95"
        + "\043\uff95\044\uff95\045\uff95\046\uff95\047\uff95\050\uff95\053"
        + "\uff95\056\uff95\070\uff95\111\uff95\112\uff95\113\uff95\114\uff95"
        + "\115\uff95\116\uff95\001\002\000\004\116\u011c\001\002\000"
        + "\004\116\u0112\001\002\000\012\060\uff84\061\uff84\062\u0116"
        + "\065\075\001\002\000\006\060\uff83\061\u0114\001\002\000"
        + "\004\116\u0115\001\002\000\006\060\uff85\061\uff85\001\002"
        + "\000\034\023\107\026\116\030\123\031\115\053\110\070"
        + "\117\110\106\111\105\112\125\113\102\114\120\115\113"
        + "\116\131\001\002\000\010\060\uff7e\062\u0118\065\134\001"
        + "\002\000\036\023\107\026\116\030\123\031\115\053\110"
        + "\055\236\070\117\110\106\111\105\112\125\113\102\114"
        + "\120\115\113\116\131\001\002\000\004\060\uff7d\001\002"
        + "\000\012\060\uff7c\105\141\106\136\107\140\001\002\000"
        + "\012\060\uff82\105\141\106\136\107\140\001\002\000\010"
        + "\060\uff84\061\uff84\062\u011e\001\002\000\006\060\uff81\061"
        + "\u0114\001\002\000\036\021\u0120\023\107\026\116\030\123"
        + "\031\115\053\110\070\117\110\106\111\105\112\125\113"
        + "\102\114\120\115\113\116\131\001\002\000\012\060\uff7f"
        + "\105\141\106\136\107\140\001\002\000\004\116\u0121\001"
        + "\002\000\004\053\u0122\001\002\000\004\054\u0123\001\002"
        + "\000\004\060\uff80\001\002\000\070\003\uff8b\005\uff8b\022"
        + "\uff8b\023\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b\036\uff8b"
        + "\037\uff8b\041\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b\046"
        + "\uff8b\047\uff8b\050\uff8b\053\uff8b\056\uff8b\070\uff8b\111\uff8b"
        + "\112\uff8b\113\uff8b\114\uff8b\115\uff8b\116\uff8b\001\002\000"
        + "\070\003\uff89\005\uff89\022\uff89\023\uff89\026\uff89\027\uff89"
        + "\030\uff89\031\uff89\036\uff89\037\uff89\041\uff89\042\uff89\043"
        + "\uff89\044\uff89\045\uff89\046\uff89\047\uff89\050\uff89\053\uff89"
        + "\056\uff89\070\uff89\111\uff89\112\uff89\113\uff89\114\uff89\115"
        + "\uff89\116\uff89\001\002\000\070\003\uff8c\005\uff8c\022\uff8c"
        + "\023\uff8c\026\uff8c\027\uff8c\030\uff8c\031\uff8c\036\uff8c\037"
        + "\uff8c\041\uff8c\042\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c"
        + "\047\uff8c\050\uff8c\053\uff8c\056\uff8c\070\uff8c\111\uff8c\112"
        + "\uff8c\113\uff8c\114\uff8c\115\uff8c\116\uff8c\001\002\000\034"
        + "\023\107\026\116\030\123\031\115\053\110\070\117\110"
        + "\106\111\105\112\125\113\102\114\120\115\113\116\131"
        + "\001\002\000\012\054\u0129\105\141\106\136\107\140\001"
        + "\002\000\004\055\u012a\001\002\000\064\003\325\005\322"
        + "\022\340\023\107\026\116\027\333\030\123\031\115\036"
        + "\304\037\314\041\311\044\324\045\316\046\332\047\302"
        + "\050\337\053\110\056\uff96\070\117\111\105\112\125\113"
        + "\102\114\120\115\113\116\131\001\002\000\004\056\u012c"
        + "\001\002\000\070\003\uff6b\005\uff6b\022\uff6b\023\uff6b\026"
        + "\uff6b\027\uff6b\030\uff6b\031\uff6b\036\uff6b\037\uff6b\041\uff6b"
        + "\042\uff6b\043\uff6b\044\uff6b\045\uff6b\046\uff6b\047\uff6b\050"
        + "\uff6b\053\uff6b\056\uff6b\070\uff6b\111\uff6b\112\uff6b\113\uff6b"
        + "\114\uff6b\115\uff6b\116\uff6b\001\002\000\034\023\107\026"
        + "\116\030\123\031\115\053\110\070\117\110\106\111\105"
        + "\112\125\113\102\114\120\115\113\116\131\001\002\000"
        + "\012\054\u012f\105\141\106\136\107\140\001\002\000\004"
        + "\055\u0130\001\002\000\064\003\325\005\322\022\340\023"
        + "\107\026\116\027\333\030\123\031\115\036\304\037\314"
        + "\041\311\044\324\045\316\046\332\047\302\050\337\053"
        + "\110\056\uff96\070\117\111\105\112\125\113\102\114\120"
        + "\115\113\116\131\001\002\000\004\056\u0132\001\002\000"
        + "\072\003\uff78\005\uff78\022\uff78\023\uff78\026\uff78\027\uff78"
        + "\030\uff78\031\uff78\036\uff78\037\uff78\040\u0133\041\uff78\042"
        + "\uff78\043\uff78\044\uff78\045\uff78\046\uff78\047\uff78\050\uff78"
        + "\053\uff78\056\uff78\070\uff78\111\uff78\112\uff78\113\uff78\114"
        + "\uff78\115\uff78\116\uff78\001\002\000\004\055\u0134\001\002"
        + "\000\064\003\325\005\322\022\340\023\107\026\116\027"
        + "\333\030\123\031\115\036\304\037\314\041\311\044\324"
        + "\045\316\046\332\047\302\050\337\053\110\056\uff96\070"
        + "\117\111\105\112\125\113\102\114\120\115\113\116\131"
        + "\001\002\000\004\056\u0136\001\002\000\070\003\uff77\005"
        + "\uff77\022\uff77\023\uff77\026\uff77\027\uff77\030\uff77\031\uff77"
        + "\036\uff77\037\uff77\041\uff77\042\uff77\043\uff77\044\uff77\045"
        + "\uff77\046\uff77\047\uff77\050\uff77\053\uff77\056\uff77\070\uff77"
        + "\111\uff77\112\uff77\113\uff77\114\uff77\115\uff77\116\uff77\001"
        + "\002\000\070\003\uff99\005\uff99\022\uff99\023\uff99\026\uff99"
        + "\027\uff99\030\uff99\031\uff99\036\uff99\037\uff99\041\uff99\042"
        + "\uff99\043\uff99\044\uff99\045\uff99\046\uff99\047\uff99\050\uff99"
        + "\053\uff99\056\uff99\070\uff99\111\uff99\112\uff99\113\uff99\114"
        + "\uff99\115\uff99\116\uff99\001\002\000\006\030\123\116\131"
        + "\001\002\000\006\054\u013a\063\221\001\002\000\004\055"
        + "\u013b\001\002\000\004\042\u013d\001\002\000\010\042\u013d"
        + "\043\u0143\056\u0144\001\002\000\034\023\107\026\116\030"
        + "\123\031\115\053\110\070\117\110\106\111\105\112\125"
        + "\113\102\114\120\115\113\116\131\001\002\000\010\042"
        + "\uff73\043\uff73\056\uff73\001\002\000\012\064\u0140\105\141"
        + "\106\136\107\140\001\002\000\070\003\325\005\322\022"
        + "\340\023\107\026\116\027\333\030\123\031\115\036\304"
        + "\037\314\041\311\042\uff96\043\uff96\044\324\045\316\046"
        + "\332\047\302\050\337\053\110\056\uff96\070\117\111\105"
        + "\112\125\113\102\114\120\115\113\116\131\001\002\000"
        + "\010\042\uff72\043\uff72\056\uff72\001\002\000\004\056\u0148"
        + "\001\002\000\004\064\u0146\001\002\000\070\003\uff76\005"
        + "\uff76\022\uff76\023\uff76\026\uff76\027\uff76\030\uff76\031\uff76"
        + "\036\uff76\037\uff76\041\uff76\042\uff76\043\uff76\044\uff76\045"
        + "\uff76\046\uff76\047\uff76\050\uff76\053\uff76\056\uff76\070\uff76"
        + "\111\uff76\112\uff76\113\uff76\114\uff76\115\uff76\116\uff76\001"
        + "\002\000\010\042\uff74\043\uff74\056\uff74\001\002\000\064"
        + "\003\325\005\322\022\340\023\107\026\116\027\333\030"
        + "\123\031\115\036\304\037\314\041\311\044\324\045\316"
        + "\046\332\047\302\050\337\053\110\056\uff96\070\117\111"
        + "\105\112\125\113\102\114\120\115\113\116\131\001\002"
        + "\000\004\056\uff71\001\002\000\070\003\uff75\005\uff75\022"
        + "\uff75\023\uff75\026\uff75\027\uff75\030\uff75\031\uff75\036\uff75"
        + "\037\uff75\041\uff75\042\uff75\043\uff75\044\uff75\045\uff75\046"
        + "\uff75\047\uff75\050\uff75\053\uff75\056\uff75\070\uff75\111\uff75"
        + "\112\uff75\113\uff75\114\uff75\115\uff75\116\uff75\001\002\000"
        + "\026\003\uffa7\005\uffa7\007\uffa7\010\uffa7\011\uffa7\012\uffa7"
        + "\013\uffa7\014\uffa7\056\uffa7\116\uffa7\001\002\000\070\003"
        + "\uff87\005\uff87\022\uff87\023\uff87\026\uff87\027\uff87\030\uff87"
        + "\031\uff87\036\uff87\037\uff87\041\uff87\042\uff87\043\uff87\044"
        + "\uff87\045\uff87\046\uff87\047\uff87\050\uff87\053\uff87\056\uff87"
        + "\070\uff87\111\uff87\112\uff87\113\uff87\114\uff87\115\uff87\116"
        + "\uff87\001\002\000\034\023\107\026\116\030\123\031\115"
        + "\053\110\070\117\110\106\111\105\112\125\113\102\114"
        + "\120\115\113\116\131\001\002\000\012\054\u014d\105\141"
        + "\106\136\107\140\001\002\000\004\060\uff64\001\002\000"
        + "\070\003\uff91\005\uff91\022\uff91\023\uff91\026\uff91\027\uff91"
        + "\030\uff91\031\uff91\036\uff91\037\uff91\041\uff91\042\uff91\043"
        + "\uff91\044\uff91\045\uff91\046\uff91\047\uff91\050\uff91\053\uff91"
        + "\056\uff91\070\uff91\111\uff91\112\uff91\113\uff91\114\uff91\115"
        + "\uff91\116\uff91\001\002\000\004\054\u0150\001\002\000\004"
        + "\055\u0151\001\002\000\010\003\u0155\032\u0156\056\uff54\001"
        + "\002\000\016\003\uff50\032\uff50\033\u0163\034\u0160\035\u015f"
        + "\056\uff50\001\002\000\010\003\u0155\032\u0156\056\uff55\001"
        + "\002\000\004\056\u015d\001\002\000\004\060\u015b\001\002"
        + "\000\004\062\u0158\001\002\000\010\003\uff52\032\uff52\056"
        + "\uff52\001\002\000\034\023\107\026\116\030\123\031\115"
        + "\053\110\070\117\110\106\111\105\112\125\113\102\114"
        + "\120\115\113\116\131\001\002\000\012\060\u015a\105\141"
        + "\106\136\107\140\001\002\000\016\003\uff4e\032\uff4e\033"
        + "\uff4e\034\uff4e\035\uff4e\056\uff4e\001\002\000\006\003\u0155"
        + "\032\u0156\001\002\000\010\003\uff4f\032\uff4f\056\uff4f\001"
        + "\002\000\026\003\uffa6\005\uffa6\007\uffa6\010\uffa6\011\uffa6"
        + "\012\uffa6\013\uffa6\014\uffa6\056\uffa6\116\uffa6\001\002\000"
        + "\010\003\uff53\032\uff53\056\uff53\001\002\000\004\053\u0173"
        + "\001\002\000\004\053\u0170\001\002\000\004\060\u016f\001"
        + "\002\000\004\060\u016e\001\002\000\004\053\u0169\001\002"
        + "\000\004\060\u0168\001\002\000\016\003\uff51\032\uff51\033"
        + "\u0163\034\u0160\035\u015f\056\uff51\001\002\000\016\003\uff4c"
        + "\032\uff4c\033\uff4c\034\uff4c\035\uff4c\056\uff4c\001\002\000"
        + "\016\003\uff4d\032\uff4d\033\uff4d\034\uff4d\035\uff4d\056\uff4d"
        + "\001\002\000\016\003\uff4a\032\uff4a\033\uff4a\034\uff4a\035"
        + "\uff4a\056\uff4a\001\002\000\034\023\107\026\116\030\123"
        + "\031\115\053\110\070\117\110\106\111\105\112\125\113"
        + "\102\114\120\115\113\116\131\001\002\000\012\054\u016b"
        + "\105\141\106\136\107\140\001\002\000\004\062\u016c\001"
        + "\002\000\034\023\107\026\116\030\123\031\115\053\110"
        + "\070\117\110\106\111\105\112\125\113\102\114\120\115"
        + "\113\116\131\001\002\000\012\060\uff48\105\141\106\136"
        + "\107\140\001\002\000\016\003\uff4b\032\uff4b\033\uff4b\034"
        + "\uff4b\035\uff4b\056\uff4b\001\002\000\016\003\uff49\032\uff49"
        + "\033\uff49\034\uff49\035\uff49\056\uff49\001\002\000\034\023"
        + "\107\026\116\030\123\031\115\053\110\070\117\110\106"
        + "\111\105\112\125\113\102\114\120\115\113\116\131\001"
        + "\002\000\012\054\u0172\105\141\106\136\107\140\001\002"
        + "\000\004\060\uff47\001\002\000\034\023\107\026\116\030"
        + "\123\031\115\053\110\070\117\110\106\111\105\112\125"
        + "\113\102\114\120\115\113\116\131\001\002\000\012\054"
        + "\u0175\105\141\106\136\107\140\001\002\000\004\060\uff46"
        + "\001\002\000\004\053\u0177\001\002\000\020\007\060\010"
        + "\062\011\066\012\061\013\065\054\uffa4\116\u0179\001\002"
        + "\000\004\054\u0186\001\002\000\004\116\uffa0\001\002\000"
        + "\004\116\u0180\001\002\000\004\116\uffa1\001\002\000\006"
        + "\054\uffa5\061\u017e\001\002\000\006\054\uffa2\061\uffa2\001"
        + "\002\000\016\007\060\010\062\011\066\012\061\013\065"
        + "\116\u0179\001\002\000\006\054\uffa3\061\uffa3\001\002\000"
        + "\010\054\uff9f\061\uff9f\065\u0181\001\002\000\004\066\u0185"
        + "\001\002\000\010\054\uff9e\061\uff9e\065\u0183\001\002\000"
        + "\004\066\u0184\001\002\000\010\054\uff9d\061\uff9d\065\uff9d"
        + "\001\002\000\010\054\uff9c\061\uff9c\065\uff9c\001\002\000"
        + "\006\055\uffef\064\033\001\002\000\004\055\u0188\001\002"
        + "\000\064\003\325\005\322\022\340\023\107\026\116\027"
        + "\333\030\123\031\115\036\304\037\314\041\311\044\324"
        + "\045\316\046\332\047\302\050\337\053\110\056\uff96\070"
        + "\117\111\105\112\125\113\102\114\120\115\113\116\131"
        + "\001\002\000\004\056\u018a\001\002\000\026\003\uffa8\005"
        + "\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8"
        + "\056\uffa8\116\uffa8\001\002\000\026\003\uffd0\005\uffd0\007"
        + "\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\056\uffd0"
        + "\116\uffd0\001\002\000\004\055\u018d\001\002\000\026\003"
        + "\052\005\057\007\045\010\041\011\053\012\037\013\047"
        + "\014\051\056\uffc8\116\046\001\002\000\004\056\u018f\001"
        + "\002\000\010\002\ufff4\003\ufff4\004\ufff4\001\002\000\014"
        + "\020\ufff1\055\ufff1\060\ufff1\061\ufff1\062\ufff1\001\002\000"
        + "\014\020\ufff0\055\ufff0\060\ufff0\061\ufff0\062\ufff0\001\002"
        + "\000\014\020\ufff2\055\ufff2\060\ufff2\061\ufff2\062\ufff2\001"
        + "\002\000\004\002\001\001\002\000\012\003\ufffe\004\ufffe"
        + "\006\ufffe\025\ufffe\001\002\000\010\002\000\003\023\004"
        + "\010\001\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /**
     * <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table
            = unpackFromStrings(new String[]{
        "\000\u0193\000\020\002\006\003\010\004\015\007\014\010"
        + "\003\107\005\110\004\001\001\000\002\001\001\000\014"
        + "\003\u0194\004\015\007\014\010\003\107\u0193\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\004"
        + "\010\030\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\010\004\015\007\014\107"
        + "\025\001\001\000\004\010\023\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\004"
        + "\024\033\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\022\011\042\012\054\015\047\016\041"
        + "\017\055\020\053\027\043\047\037\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\016\011\042"
        + "\012\054\015\u018a\017\055\027\043\047\037\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\004\025\063\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\004\013\256\001\001\000\004\013\067\001\001\000"
        + "\002\001\001\000\002\001\001\000\006\024\076\043\075"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\004\024\073\001\001\000\002\001\001\000\032"
        + "\021\125\022\253\023\113\030\127\031\103\051\102\052"
        + "\111\053\123\070\121\073\110\074\126\105\100\001\001"
        + "\000\004\024\231\001\001\000\002\001\001\000\032\021"
        + "\125\022\120\023\113\030\127\031\103\051\102\052\111"
        + "\053\123\070\121\073\110\074\126\105\100\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\032\021\125\022\230\023"
        + "\113\030\127\031\103\051\102\052\111\053\123\070\121"
        + "\073\110\074\126\105\100\001\001\000\012\031\225\051"
        + "\102\052\224\053\123\001\001\000\032\021\125\022\222"
        + "\023\113\030\127\031\103\051\102\052\111\053\123\070"
        + "\121\073\110\074\126\105\100\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\026\021\207\030\127"
        + "\031\103\051\102\052\111\053\123\070\121\073\110\074"
        + "\126\105\100\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\004\043\132\001\001\000\034\021\125\022"
        + "\145\023\113\030\127\031\103\032\144\051\102\052\111"
        + "\053\123\070\121\073\110\074\126\105\100\001\001\000"
        + "\002\001\001\000\032\021\125\022\134\023\113\030\127"
        + "\031\103\051\102\052\111\053\123\070\121\073\110\074"
        + "\126\105\100\001\001\000\002\001\001\000\032\021\125"
        + "\022\143\023\113\030\127\031\103\051\102\052\111\053"
        + "\123\070\121\073\110\074\126\105\100\001\001\000\002"
        + "\001\001\000\032\021\125\022\142\023\113\030\127\031"
        + "\103\051\102\052\111\053\123\070\121\073\110\074\126"
        + "\105\100\001\001\000\032\021\125\022\141\023\113\030"
        + "\127\031\103\051\102\052\111\053\123\070\121\073\110"
        + "\074\126\105\100\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\032\021\125\022\151\023\113\030"
        + "\127\031\103\051\102\052\111\053\123\070\121\073\110"
        + "\074\126\105\100\001\001\000\002\001\001\000\002\001"
        + "\001\000\026\021\203\030\127\031\103\051\102\052\111"
        + "\053\123\070\121\073\110\074\126\105\100\001\001\000"
        + "\026\021\202\030\127\031\103\051\102\052\111\053\123"
        + "\070\121\073\110\074\126\105\100\001\001\000\026\021"
        + "\201\030\127\031\103\051\102\052\111\053\123\070\121"
        + "\073\110\074\126\105\100\001\001\000\026\021\200\030"
        + "\127\031\103\051\102\052\111\053\123\070\121\073\110"
        + "\074\126\105\100\001\001\000\002\001\001\000\002\001"
        + "\001\000\026\021\177\030\127\031\103\051\102\052\111"
        + "\053\123\070\121\073\110\074\126\105\100\001\001\000"
        + "\026\021\176\030\127\031\103\051\102\052\111\053\123"
        + "\070\121\073\110\074\126\105\100\001\001\000\026\021"
        + "\175\030\127\031\103\051\102\052\111\053\123\070\121"
        + "\073\110\074\126\105\100\001\001\000\026\021\174\030"
        + "\127\031\103\051\102\052\111\053\123\070\121\073\110"
        + "\074\126\105\100\001\001\000\026\021\173\030\127\031"
        + "\103\051\102\052\111\053\123\070\121\073\110\074\126"
        + "\105\100\001\001\000\026\021\172\030\127\031\103\051"
        + "\102\052\111\053\123\070\121\073\110\074\126\105\100"
        + "\001\001\000\026\021\171\030\127\031\103\051\102\052"
        + "\111\053\123\070\121\073\110\074\126\105\100\001\001"
        + "\000\026\021\170\030\127\031\103\051\102\052\111\053"
        + "\123\070\121\073\110\074\126\105\100\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\034\021\125\022\145\023\113\030\127\031\103"
        + "\032\212\051\102\052\111\053\123\070\121\073\110\074"
        + "\126\105\100\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\032\021\125\022\216\023\113\030"
        + "\127\031\103\051\102\052\111\053\123\070\121\073\110"
        + "\074\126\105\100\001\001\000\002\001\001\000\002\001"
        + "\001\000\010\031\103\051\221\053\123\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\010\031\227\051\221\053\123"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\034\021\125\022\236\023\113"
        + "\030\127\031\103\044\234\051\102\052\111\053\123\070"
        + "\121\073\110\074\126\105\100\001\001\000\002\001\001"
        + "\000\040\021\125\022\241\023\113\030\127\031\103\044"
        + "\240\045\243\046\242\051\102\052\111\053\123\070\121"
        + "\073\110\074\126\105\100\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\004\044\246\001\001\000"
        + "\002\001\001\000\002\001\001\000\032\021\125\022\251"
        + "\023\113\030\127\031\103\051\102\052\111\053\123\070"
        + "\121\073\110\074\126\105\100\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\004\024\260\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\032\021\125\022"
        + "\262\023\113\030\127\031\103\051\102\052\111\053\123"
        + "\070\121\073\110\074\126\105\100\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\016\011\042\012\054\015\273\017\055"
        + "\027\043\047\037\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\064\021\312\030\127\031\103\033\306\034\311\035"
        + "\307\036\327\037\326\051\102\052\333\053\123\054\304"
        + "\055\305\056\330\057\340\060\314\061\316\062\317\063"
        + "\320\064\335\070\302\072\325\073\322\074\334\105\100"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\060\021\312\030"
        + "\127\031\103\035\u0136\036\327\037\326\051\102\052\333"
        + "\053\123\054\304\055\305\056\330\057\340\060\314\061"
        + "\316\062\317\063\320\064\335\070\302\072\325\073\322"
        + "\074\334\105\100\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\004\025\u0110\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\032\021\125\022\341\023\113\030\127\031\103"
        + "\051\102\052\111\053\123\070\121\073\110\074\126\105"
        + "\100\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\034\021\125\022\346\023"
        + "\113\030\127\031\103\044\345\051\102\052\111\053\123"
        + "\070\121\073\110\074\126\105\100\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\012\031\103\051"
        + "\102\052\354\053\123\001\001\000\002\001\001\000\012"
        + "\031\103\051\102\052\356\053\123\001\001\000\002\001"
        + "\001\000\002\001\001\000\064\021\312\030\127\031\103"
        + "\033\361\034\311\035\307\036\327\037\326\051\102\052"
        + "\333\053\123\054\304\055\305\056\330\057\340\060\314"
        + "\061\316\062\317\063\320\064\335\070\302\072\325\073"
        + "\322\074\334\105\100\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\032\021\125\022\365\023"
        + "\113\030\127\031\103\051\102\052\111\053\123\070\121"
        + "\073\110\074\126\105\100\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\060\021\312\030\127\031\103\035\373\036"
        + "\327\037\326\051\102\052\333\053\123\054\304\055\305"
        + "\056\330\057\340\060\314\061\316\062\317\063\320\064"
        + "\335\070\302\072\325\073\322\074\334\105\100\001\001"
        + "\000\002\001\001\000\014\031\103\051\102\052\375\053"
        + "\123\071\377\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\032\021\125\022\u0101\023\113\030"
        + "\127\031\103\051\102\052\111\053\123\070\121\073\110"
        + "\074\126\105\100\001\001\000\002\001\001\000\026\021"
        + "\312\030\127\031\103\051\102\052\111\053\123\070\u0103"
        + "\073\110\074\126\105\100\001\001\000\002\001\001\000"
        + "\002\001\001\000\064\021\312\030\127\031\103\033\u0106"
        + "\034\311\035\307\036\327\037\326\051\102\052\333\053"
        + "\123\054\304\055\305\056\330\057\340\060\314\061\316"
        + "\062\317\063\320\064\335\070\302\072\325\073\322\074"
        + "\334\105\100\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\032\021\125\022"
        + "\u010b\023\113\030\127\031\103\051\102\052\111\053\123"
        + "\070\121\073\110\074\126\105\100\001\001\000\002\001"
        + "\001\000\032\021\125\022\u010d\023\113\030\127\031\103"
        + "\051\102\052\111\053\123\070\121\073\110\074\126\105"
        + "\100\001\001\000\002\001\001\000\002\001\001\000\004"
        + "\014\u011c\001\001\000\004\014\u0112\001\001\000\004\043"
        + "\u0116\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\032\021\125\022\u011a\023\113\030\127\031"
        + "\103\051\102\052\111\053\123\070\121\073\110\074\126"
        + "\105\100\001\001\000\002\001\001\000\034\021\125\022"
        + "\u0119\023\113\030\127\031\103\044\u0118\051\102\052\111"
        + "\053\123\070\121\073\110\074\126\105\100\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\032\021\125\022\u011e\023"
        + "\113\030\127\031\103\051\102\052\111\053\123\070\121"
        + "\073\110\074\126\105\100\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\032\021\125\022\u0127\023\113\030\127\031\103"
        + "\051\102\052\111\053\123\070\121\073\110\074\126\105"
        + "\100\001\001\000\002\001\001\000\002\001\001\000\064"
        + "\021\312\030\127\031\103\033\u012a\034\311\035\307\036"
        + "\327\037\326\051\102\052\333\053\123\054\304\055\305"
        + "\056\330\057\340\060\314\061\316\062\317\063\320\064"
        + "\335\070\302\072\325\073\322\074\334\105\100\001\001"
        + "\000\002\001\001\000\002\001\001\000\032\021\125\022"
        + "\u012d\023\113\030\127\031\103\051\102\052\111\053\123"
        + "\070\121\073\110\074\126\105\100\001\001\000\002\001"
        + "\001\000\002\001\001\000\064\021\312\030\127\031\103"
        + "\033\u0130\034\311\035\307\036\327\037\326\051\102\052"
        + "\333\053\123\054\304\055\305\056\330\057\340\060\314"
        + "\061\316\062\317\063\320\064\335\070\302\072\325\073"
        + "\322\074\334\105\100\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\064\021\312\030\127\031"
        + "\103\033\u0134\034\311\035\307\036\327\037\326\051\102"
        + "\052\333\053\123\054\304\055\305\056\330\057\340\060"
        + "\314\061\316\062\317\063\320\064\335\070\302\072\325"
        + "\073\322\074\334\105\100\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\012\031\103\051\102"
        + "\052\u0138\053\123\001\001\000\002\001\001\000\002\001"
        + "\001\000\006\065\u013d\066\u013b\001\001\000\006\065\u0144"
        + "\067\u0141\001\001\000\032\021\125\022\u013e\023\113\030"
        + "\127\031\103\051\102\052\111\053\123\070\121\073\110"
        + "\074\126\105\100\001\001\000\002\001\001\000\002\001"
        + "\001\000\064\021\312\030\127\031\103\033\u0140\034\311"
        + "\035\307\036\327\037\326\051\102\052\333\053\123\054"
        + "\304\055\305\056\330\057\340\060\314\061\316\062\317"
        + "\063\320\064\335\070\302\072\325\073\322\074\334\105"
        + "\100\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\064\021"
        + "\312\030\127\031\103\033\u0146\034\311\035\307\036\327"
        + "\037\326\051\102\052\333\053\123\054\304\055\305\056"
        + "\330\057\340\060\314\061\316\062\317\063\320\064\335"
        + "\070\302\072\325\073\322\074\334\105\100\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\032\021\125\022\u014b\023\113\030\127\031"
        + "\103\051\102\052\111\053\123\070\121\073\110\074\126"
        + "\105\100\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\012"
        + "\075\u0153\076\u0152\077\u0156\100\u0151\001\001\000\014\101"
        + "\u0165\102\u0161\103\u0163\104\u0160\106\u0164\001\001\000\006"
        + "\077\u015d\100\u0151\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\032\021\125"
        + "\022\u0158\023\113\030\127\031\103\051\102\052\111\053"
        + "\123\070\121\073\110\074\126\105\100\001\001\000\002"
        + "\001\001\000\002\001\001\000\006\077\u015b\100\u0151\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\012"
        + "\101\u0166\102\u0161\103\u0163\104\u0160\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\032\021\125"
        + "\022\u0169\023\113\030\127\031\103\051\102\052\111\053"
        + "\123\070\121\073\110\074\126\105\100\001\001\000\002"
        + "\001\001\000\002\001\001\000\032\021\125\022\u016c\023"
        + "\113\030\127\031\103\051\102\052\111\053\123\070\121"
        + "\073\110\074\126\105\100\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\032\021\125\022\u0170"
        + "\023\113\030\127\031\103\051\102\052\111\053\123\070"
        + "\121\073\110\074\126\105\100\001\001\000\002\001\001"
        + "\000\002\001\001\000\032\021\125\022\u0173\023\113\030"
        + "\127\031\103\051\102\052\111\053\123\070\121\073\110"
        + "\074\126\105\100\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\014\025\u017a\026\u0179\040\u017c"
        + "\041\u017b\042\u0177\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\010\025\u017a\026\u0179\040\u017e\001"
        + "\001\000\002\001\001\000\004\050\u0181\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\004\024\u0186\001\001\000\002"
        + "\001\001\000\064\021\312\030\127\031\103\033\u0188\034"
        + "\311\035\307\036\327\037\326\051\102\052\333\053\123"
        + "\054\304\055\305\056\330\057\340\060\314\061\316\062"
        + "\317\063\320\064\335\070\302\072\325\073\322\074\334"
        + "\105\100\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\022\011\042\012\054"
        + "\015\047\016\041\017\055\020\u018d\027\043\047\037\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\004\010\030\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$Sintactico$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$Sintactico$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 0;
    }

    /**
     * <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /**
     * <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }

    /**
     * Metodo al que se llama automáticamente ante algún error sintactico.
     */
    public void syntax_error(Symbol s) {
        /* System.err.println("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "
        +s.value + " no reconocido." );*/
        Inicio.reporteError.agregar("Sintactico", s.right + 1, s.left + 1, "Identificador " + s.value + " no reconocido");
    }

    /**
     * Metodo al que se llama en el momento en que ya no es posible una
     * recuperación de errores.
     */
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        /*System.err.println("Error en la Línea " + (s.right+1)+ "Columna "+(s.left+1)+". Identificador " +
        s.value + " no reconocido.");*/
        Inicio.reporteError.agregar("Sintactico", s.right + 1, s.left + 1, "Identificador " + s.value + " no reconocido");

    }

    public Nodo getRaiz() {
        return action_obj.raiz;
    }

}

/**
 * Cup generated class to encapsulate user supplied action code.
 */
class CUP$Sintactico$actions {

    Nodo raiz = null;

    private final Sintactico parser;

    /**
     * Constructor
     */
    CUP$Sintactico$actions(Sintactico parser) {
        this.parser = parser;
    }

    /**
     * Method with the actual generated action code.
     */
    public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
            int CUP$Sintactico$act_num,
            java_cup.runtime.lr_parser CUP$Sintactico$parser,
            java.util.Stack CUP$Sintactico$stack,
            int CUP$Sintactico$top)
            throws java.lang.Exception {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$Sintactico$result;

        /* select the action based on the action number */
        switch (CUP$Sintactico$act_num) {
            /*. . . . . . . . . . . . . . . . . . . .*/
            case 187: // DONDETODO ::= dondeTodo parenInicio EXPL parenFin 
            {
                Nodo RESULT = null;
                int dleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int dright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                String d = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("dondeTodo", dright, dleft);
                RESULT.add(exp);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DONDETODO", 66, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 186: // DONDECADA ::= dondeCada parenInicio EXPL parenFin 
            {
                Nodo RESULT = null;
                int dleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int dright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                String d = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("dondeCada", dright, dleft);
                RESULT.add(exp);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DONDECADA", 65, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 185: // DONDE ::= donde parenInicio EXPL parenFin igual EXPL 
            {
                Nodo RESULT = null;
                int dleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).left;
                int dright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).right;
                String d = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).value;
                int exp1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int exp1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                Nodo exp1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int exp2left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int exp2right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo exp2 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("donde", dright, dleft);
                RESULT.add(exp1);
                RESULT.add(exp2);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DONDE", 64, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 184: // FILTRO ::= DONDETODO inteFin 
            {
                Nodo RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int valright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo val = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = val;

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FILTRO", 63, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 183: // FILTRO ::= DONDECADA inteFin 
            {
                Nodo RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int valright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo val = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = val;

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FILTRO", 63, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 182: // FILTRO ::= DONDE inteFin 
            {
                Nodo RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int valright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo val = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = val;

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FILTRO", 63, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 181: // FILTROS ::= FILTRO 
            {
                Nodo RESULT = null;
                int fleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int fright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo f = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("filtros", fright, fleft);
                RESULT.add(f);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FILTROS", 68, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 180: // FILTROS ::= FILTROS FILTRO 
            {
                Nodo RESULT = null;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int fleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int fright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo f = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = lista;
                RESULT.add(f);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FILTROS", 68, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 179: // PROCESAR ::= procesar igual EXPL inteFin 
            {
                Nodo RESULT = null;
                int pleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int pright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                String p = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("procesar", pright, pleft);
                RESULT.add(exp);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PROCESAR", 62, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 178: // CONSULTA ::= error inteFin CONSULTA 
            {
                Nodo RESULT = null;
                int conleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int conright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo con = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = con;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONSULTA", 61, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 177: // CONSULTA ::= PROCESAR 
            {
                Nodo RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo val = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("consulta", val.linea - 1, val.columna - 1);
                RESULT.add(val);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONSULTA", 61, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 176: // CONSULTA ::= PROCESAR FILTROS 
            {
                Nodo RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int valright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo val = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int filleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int filright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo fil = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("consulta", val.linea - 1, val.columna - 1);
                RESULT.add(val);
                for (int i = 0; i < fil.hijos.size(); i++) {
                    RESULT.add(fil.hijos.get(i));
                }

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONSULTA", 61, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 175: // CONSULTAS ::= CONSULTA 
            {
                Nodo RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo val = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("consultas", val.linea - 1, val.columna - 1);
                RESULT.hijos = val.hijos;

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONSULTAS", 60, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 174: // CONSULTAS ::= CONSULTAS CONSULTA 
            {
                Nodo RESULT = null;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int valleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo val = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = lista;
                for (int i = 0; i < val.hijos.size(); i++) {
                    lista.add(val.hijos.get(i));
                }

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONSULTAS", 60, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 173: // CONSULTASTAR ::= 
            {
                Nodo RESULT = null;
                RESULT = new Nodo("consultas", 0, 0);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONSULTASTAR", 59, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 172: // CONSULTASTAR ::= CONSULTAS 
            {
                Nodo RESULT = null;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = lista;

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONSULTASTAR", 59, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 171: // COLUMNA ::= columna parenInicio EXPL parenFin 
            {
                Nodo RESULT = null;
                int cleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int cright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                String c = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("columna", cright, cleft);
                RESULT.add(exp);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLUMNA", 67, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 170: // ACCESOAR ::= iden INDICES 
            {
                Nodo RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("accesoAr", id, idright, idleft);
                RESULT.add(lista);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOAR", 41, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 169: // ACCESOVAR ::= ACCESOAR 
            {
                Nodo RESULT = null;
                int llaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int llaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo lla = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = lla;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVAR", 39, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 168: // ACCESOVAR ::= iden 
            {
                Nodo RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("id", id, idright, idleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVAR", 39, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 167: // ACCESOVAR ::= LLAMADAMETODO 
            {
                Nodo RESULT = null;
                int llaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int llaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo lla = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = lla;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVAR", 39, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 166: // LLAMADAMETODO ::= datos parenInicio parenFin 
            {
                Nodo RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;

                RESULT = new Nodo("llamadaMetodo", id, idright, idleft);
                Nodo n1 = new Nodo("valorParametros", 0, 0);
                RESULT.add(n1);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADAMETODO", 23, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 165: // LLAMADAMETODO ::= iden parenInicio parenFin 
            {
                Nodo RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;

                RESULT = new Nodo("llamadaMetodo", id, idright, idleft);
                Nodo n1 = new Nodo("valorParametros", 0, 0);
                RESULT.add(n1);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADAMETODO", 23, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 164: // LLAMADAMETODO ::= iden parenInicio VALORPARAMETROS parenFin 
            {
                Nodo RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("llamadaMetodo", id, idright, idleft);
                RESULT.add(lista);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADAMETODO", 23, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 163: // ACCESO ::= ACCESOVAR 
            {
                Nodo RESULT = null;
                int accleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int accright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo acc = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("acceso", acc.linea - 1, acc.columna - 1);
                RESULT.add(acc);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO", 40, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 162: // ACCESO ::= ACCESO punto ACCESOVAR 
            {
                Nodo RESULT = null;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int accleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int accright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo acc = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = lista;
                RESULT.add(acc);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO", 40, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 161: // LLAMARGK ::= llamar LLAMADAMETODO 
            {
                Nodo RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo val = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("acceso", val.linea - 1, val.columna - 1);
                RESULT.add(val);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMARGK", 58, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 160: // LLAMARGK ::= llamar ACCESO punto LLAMADAMETODO 
            {
                Nodo RESULT = null;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int valleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo val = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = lista;
                lista.hijos.add(val);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMARGK", 58, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 159: // LLAMARHK ::= llamarHK iden parenInicio parenFin 
            {
                Nodo RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;

                RESULT = new Nodo("llamadaMetodoHK", id, idright, idleft);
                Nodo n1 = new Nodo("valorParametros", 0, 0);
                RESULT.add(n1);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMARHK", 57, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 158: // LLAMARHK ::= llamarHK iden parenInicio VALORPARAMETROS parenFin 
            {
                Nodo RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("llamadaMetodoHK", id, idright, idleft);
                RESULT.add(lista);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMARHK", 57, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 157: // IMPRIMIR ::= imprimir parenInicio EXPL parenFin 
            {
                Nodo RESULT = null;
                int impleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int impright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                String imp = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("imprimir", impright, impleft);
                RESULT.add(exp);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR", 42, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 156: // GRAFICARFUNCION ::= graphikar_funcion parenInicio ACCESO coma ACCESO parenFin 
            {
                Nodo RESULT = null;
                int gleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).left;
                int gright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).right;
                String g = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).value;
                int acc1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int acc1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                Nodo acc1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int acc2left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int acc2right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo acc2 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("graficarFuncion", gright, gleft);
                RESULT.add(acc1);
                RESULT.add(acc2);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GRAFICARFUNCION", 56, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 155: // TERMINAR ::= terminar 
            {
                Nodo RESULT = null;
                int terleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int terright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String ter = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("terminar", terright, terleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TERMINAR", 50, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 154: // CONTINUAR ::= continuar 
            {
                Nodo RESULT = null;
                int conleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int conright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String con = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("continuar", conright, conleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTINUAR", 48, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 153: // RETORNO ::= retornar EXPL 
            {
                Nodo RESULT = null;
                int retleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int retright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String ret = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("retorno", retright, retleft);
                RESULT.add(exp);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO", 49, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 152: // RETORNO ::= retornar 
            {
                Nodo RESULT = null;
                int retleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int retright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String ret = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("retorno", retright, retleft);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO", 49, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 151: // HACERMIENTRAS ::= hacer llaveInicio SENTENCIAS llaveFin mientras parenInicio EXPL parenFin 
            {
                Nodo RESULT = null;
                int hacerleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 7)).left;
                int hacerright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 7)).right;
                String hacer = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 7)).value;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).value;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("hacerMientras", hacerright, hacerleft);
                RESULT.add(exp);
                RESULT.add(sent);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("HACERMIENTRAS", 47, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 7)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 150: // MIENTRAS ::= mientras parenInicio EXPL parenFin llaveInicio SENTENCIAS llaveFin 
            {
                Nodo RESULT = null;
                int mileft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).left;
                int miright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).right;
                String mi = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).value;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).value;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("mientras", miright, mileft);
                RESULT.add(exp);
                RESULT.add(sent);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MIENTRAS", 46, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 149: // VARIABLEPARA ::= ACCESO igual EXPL 
            {
                Nodo RESULT = null;
                int accleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int accright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo acc = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("asignacion", acc.linea - 1, acc.columna - 1);
                RESULT.add(acc);
                RESULT.add(exp);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLEPARA", 55, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 148: // VARIABLEPARA ::= var resEntero iden igual EXPL 
            {
                Nodo RESULT = null;
                int varleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).left;
                int varright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).right;
                String var = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).value;
                int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int tiporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                String tipo = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("varLocalDA", varright, varleft);
                Nodo id1 = new Nodo("id", id, idright, idleft);
                Nodo t = new Nodo("tipo", tipo, tiporight, tipoleft);
                RESULT.add(t);
                RESULT.add(id1);
                RESULT.add(exp);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLEPARA", 55, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 147: // PARA ::= para parenInicio VARIABLEPARA dosPuntos EXPL dosPuntos SIMPLIFICADA parenFin llaveInicio SENTENCIAS llaveFin 
            {
                Nodo RESULT = null;
                int paraleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 10)).left;
                int pararight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 10)).right;
                String para = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 10)).value;
                int varleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 8)).left;
                int varright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 8)).right;
                Nodo var = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 8)).value;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).right;
                Nodo op = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).value;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("para", pararight, paraleft);
                RESULT.add(var);
                RESULT.add(exp);
                RESULT.add(op);
                RESULT.add(sent);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARA", 45, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 10)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 146: // SIMPLIFICADA ::= EXPA disminucion 
            {
                Nodo RESULT = null;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                RESULT = new Nodo("--", exp.linea - 1, exp.columna - 1);
                RESULT.add(exp);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIMPLIFICADA", 54, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 145: // SIMPLIFICADA ::= EXPA aumento 
            {
                Nodo RESULT = null;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                RESULT = new Nodo("++", exp.linea - 1, exp.columna - 1);
                RESULT.add(exp);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIMPLIFICADA", 54, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 144: // DEFECTO ::= defecto dosPuntos SENTENCIAS 
            {
                Nodo RESULT = null;
                int defleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int defright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                String def = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("defecto", defright, defleft);
                RESULT.add(sent);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFECTO", 53, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 143: // CASO ::= caso EXPL dosPuntos SENTENCIAS 
            {
                Nodo RESULT = null;
                int caleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int caright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                String ca = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("caso", caright, caleft);
                RESULT.add(exp);
                RESULT.add(sent);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASO", 51, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 142: // CASOS ::= CASO 
            {
                Nodo RESULT = null;
                int casoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int casoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo caso = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("casos", caso.linea - 1, caso.columna - 1);
                RESULT.add(caso);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASOS", 52, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 141: // CASOS ::= CASOS CASO 
            {
                Nodo RESULT = null;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int casoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int casoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo caso = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = lista;
                RESULT.add(caso);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASOS", 52, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 140: // SELECCION ::= seleccion parenInicio ACCESO parenFin llaveInicio CASOS DEFECTO llaveFin 
            {
                Nodo RESULT = null;
                int selleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 7)).left;
                int selright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 7)).right;
                String sel = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 7)).value;
                int accleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).left;
                int accright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).right;
                Nodo acc = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).value;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int defleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int defright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo def = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("seleccion", selright, selleft);
                RESULT.add(acc);
                lista.add(def);
                RESULT.add(lista);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SELECCION", 44, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 7)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 139: // SELECCION ::= seleccion parenInicio ACCESO parenFin llaveInicio CASOS llaveFin 
            {
                Nodo RESULT = null;
                int selleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).left;
                int selright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).right;
                String sel = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).value;
                int accleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).left;
                int accright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).right;
                Nodo acc = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).value;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("seleccion", selright, selleft);
                RESULT.add(acc);
                Nodo defecto = new Nodo("defecto", 0, 0);
                Nodo sent2 = new Nodo("sentencias", 0, 0);
                defecto.add(sent2);
                lista.add(defecto);
                RESULT.add(lista);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SELECCION", 44, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 138: // SI ::= si parenInicio EXPL parenFin llaveInicio SENTENCIAS llaveFin sino llaveInicio SENTENCIAS llaveFin 
            {
                Nodo RESULT = null;
                int sileft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 10)).left;
                int siright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 10)).right;
                String si = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 10)).value;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 8)).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 8)).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 8)).value;
                int sent1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).left;
                int sent1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).right;
                Nodo sent1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).value;
                int sent2left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int sent2right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo sent2 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("si", siright, sileft);
                RESULT.add(exp);
                RESULT.add(sent1);
                RESULT.add(sent2);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SI", 43, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 10)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 137: // SI ::= si parenInicio EXPL parenFin llaveInicio SENTENCIAS llaveFin 
            {
                Nodo RESULT = null;
                int sileft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).left;
                int siright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).right;
                String si = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).value;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).value;
                int sent1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int sent1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo sent1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("si", siright, sileft);
                RESULT.add(exp);
                RESULT.add(sent1);
                Nodo sent2 = new Nodo("sentencias", 0, 0);
                RESULT.add(sent2);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SI", 43, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 136: // ASIGNACION ::= ACCESO igual nuevo iden parenInicio parenFin 
            {
                Nodo RESULT = null;
                int accleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).left;
                int accright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).right;
                Nodo acc = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).value;
                int tipo2left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int tipo2right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                String tipo2 = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;

                RESULT = new Nodo("asignacionAlsI", acc.linea - 1, acc.columna - 1);
                RESULT.add(acc);
                Nodo tipoVar = new Nodo("tipo", tipo2, tipo2right, tipo2left);
                RESULT.add(tipoVar);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION", 29, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 135: // ASIGNACION ::= ACCESO igual ARREGLO 
            {
                Nodo RESULT = null;
                int accleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int accright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo acc = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int arleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int arright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo ar = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("asignacionAr", acc.linea - 1, acc.columna - 1);
                RESULT.add(acc);
                RESULT.add(ar);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION", 29, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 134: // ASIGNACION ::= ACCESO igual EXPL 
            {
                Nodo RESULT = null;
                int accleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int accright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo acc = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("asignacion", acc.linea - 1, acc.columna - 1);
                RESULT.add(acc);
                RESULT.add(exp);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION", 29, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 133: // DECLARACION ::= var TIPODATO iden INDICES igual EXPL 
            {
                Nodo RESULT = null;
                int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).left;
                int tiporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).right;
                Nodo tipo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int indicesleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int indicesright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo indices = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int dirleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int dirright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo dir = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("varLocalArDD", id, idright, idleft);
                RESULT.add(tipo);
                RESULT.add(indices);
                RESULT.add(dir);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION", 28, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 132: // DECLARACION ::= var TIPODATO iden INDICES igual ARREGLO 
            {
                Nodo RESULT = null;
                int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).left;
                int tiporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).right;
                Nodo tipo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int indicesleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int indicesright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo indices = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int arregloleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int arregloright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo arreglo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("varLocalArDA", id, idright, idleft);
                RESULT.add(tipo);
                RESULT.add(indices);
                RESULT.add(arreglo);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION", 28, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 131: // DECLARACION ::= var TIPODATO iden INDICES 
            {
                Nodo RESULT = null;
                int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int tiporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo tipo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int indicesleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int indicesright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo indices = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("varLocalArD", id, idright, idleft);
                RESULT.add(tipo);
                RESULT.add(indices);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION", 28, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 130: // DECLARACION ::= var iden iden igual EXPL 
            {
                Nodo RESULT = null;
                int varleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).left;
                int varright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).right;
                String var = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).value;
                int tipo1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int tipo1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                String tipo1 = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int dirleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int dirright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo dir = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("varLocalAlsDD", varright, varleft);
                Nodo n1 = new Nodo("id", id, idright, idleft);
                Nodo tipoVar = new Nodo("tipo", tipo1, tipo1right, tipo1left);
                RESULT.add(tipoVar);
                RESULT.add(n1);
                RESULT.add(dir);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION", 28, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 129: // DECLARACION ::= var iden iden igual nuevo iden parenInicio parenFin 
            {
                Nodo RESULT = null;
                int varleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 7)).left;
                int varright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 7)).right;
                String var = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 7)).value;
                int tipo1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).left;
                int tipo1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).right;
                String tipo1 = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).value;
                int tipo2left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int tipo2right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                String tipo2 = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;

                RESULT = new Nodo("varLocalAlsDI", varright, varleft);
                Nodo n1 = new Nodo("id", id, idright, idleft);
                Nodo tipoVar = new Nodo("tipo", tipo1, tipo1right, tipo1left);
                RESULT.add(tipoVar);
                RESULT.add(n1);
                tipoVar = new Nodo("tipo", tipo2, tipo2right, tipo2left);
                RESULT.add(tipoVar);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION", 28, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 7)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 128: // DECLARACION ::= var iden LISTAID2 
            {
                Nodo RESULT = null;
                int varleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int varright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                String var = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int tiporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String tipo = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("varLocalAlsD", varright, varleft);
                Nodo tipoVar = new Nodo("tipo", tipo, tiporight, tipoleft);
                RESULT.add(tipoVar);
                RESULT.add(lista);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION", 28, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 127: // DECLARACION ::= var TIPODATO iden igual EXPL 
            {
                Nodo RESULT = null;
                int varleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).left;
                int varright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).right;
                String var = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).value;
                int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int tiporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                Nodo tipo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("varLocalDA", varright, varleft);
                Nodo id1 = new Nodo("id", id, idright, idleft);
                RESULT.add(tipo);
                RESULT.add(id1);
                RESULT.add(exp);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION", 28, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 126: // DECLARACION ::= var TIPODATO LISTAID2 
            {
                Nodo RESULT = null;
                int varleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int varright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                String var = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int tiporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo tipo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("varLocalD", varright, varleft);
                RESULT.add(tipo);
                RESULT.add(lista);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION", 28, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 125: // LISTAID2 ::= iden 
            {
                Nodo RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("listaIds", idright, idleft);
                Nodo id1 = new Nodo("id", id, idright, idleft);
                RESULT.add(id1);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAID2", 10, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 124: // LISTAID2 ::= LISTAID2 coma iden 
            {
                Nodo RESULT = null;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = lista;
                Nodo id1 = new Nodo("id", id, idright, idleft);
                RESULT.add(id1);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAID2", 10, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 123: // SENTENCIA ::= error inteFin SENTENCIA 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = sent;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 27, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 122: // SENTENCIA ::= IMPRIMIR inteFin 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                RESULT = sent;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 27, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 121: // SENTENCIA ::= GRAFICARFUNCION inteFin 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                RESULT = sent;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 27, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 120: // SENTENCIA ::= CONTINUAR inteFin 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                RESULT = sent;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 27, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 119: // SENTENCIA ::= TERMINAR inteFin 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                RESULT = sent;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 27, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 118: // SENTENCIA ::= RETORNO inteFin 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                RESULT = sent;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 27, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 117: // SENTENCIA ::= HACERMIENTRAS inteFin 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                RESULT = sent;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 27, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 116: // SENTENCIA ::= MIENTRAS 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = sent;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 27, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 115: // SENTENCIA ::= PARA 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = sent;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 27, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 114: // SENTENCIA ::= SELECCION 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = sent;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 27, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 113: // SENTENCIA ::= SI 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = sent;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 27, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 112: // SENTENCIA ::= SIMPLIFICADA inteFin 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                RESULT = sent;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 27, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 111: // SENTENCIA ::= ASIGNACION inteFin 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                RESULT = sent;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 27, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 110: // SENTENCIA ::= DECLARACION inteFin 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                RESULT = sent;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 27, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 109: // SENTENCIA ::= LLAMARGK inteFin 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                RESULT = sent;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 27, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 108: // SENTENCIA ::= LLAMARHK inteFin 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                RESULT = sent;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA", 27, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 107: // SENTENCIAS ::= 
            {
                Nodo RESULT = null;
                RESULT = new Nodo("sentencias", 0, 0);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS", 25, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 106: // SENTENCIAS ::= SENTENCIAS1 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = sent;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS", 25, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 105: // SENTENCIAS1 ::= SENTENCIA 
            {
                Nodo RESULT = null;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("sentencias", sent.linea - 1, sent.columna - 1);
                RESULT.add(sent);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1", 26, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 104: // SENTENCIAS1 ::= SENTENCIAS1 SENTENCIA 
            {
                Nodo RESULT = null;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = lista;
                RESULT.add(sent);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1", 26, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 103: // VALORPARAMETROS ::= EXPL 
            {
                Nodo RESULT = null;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("valorParametros", expright, expleft);
                RESULT.add(exp);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALORPARAMETROS", 24, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 102: // VALORPARAMETROS ::= VALORPARAMETROS coma EXPL 
            {
                Nodo RESULT = null;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = lista;
                RESULT.add(exp);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALORPARAMETROS", 24, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 101: // INDICES2 ::= corInicio corFin 
            {
                Nodo RESULT = null;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String exp = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("indices", expright, expleft);
                Nodo n = new Nodo("dimension", 0, 0);
                RESULT.add(n);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INDICES2", 38, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 100: // INDICES2 ::= INDICES2 corInicio corFin 
            {
                Nodo RESULT = null;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                RESULT = lista;
                Nodo n = new Nodo("dimension", 0, 0);
                RESULT.add(n);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INDICES2", 38, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 99: // PARAMETRO ::= TIPODATO2 iden INDICES2 
            {
                Nodo RESULT = null;
                int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int tiporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo tipo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int dimleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int dimright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo dim = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("parametroAr", id, idright, idleft);
                RESULT.add(tipo);
                RESULT.add(dim);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO", 30, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 98: // PARAMETRO ::= TIPODATO2 iden 
            {
                Nodo RESULT = null;
                int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int tiporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo tipo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("parametro", id, idright, idleft);
                RESULT.add(tipo);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO", 30, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 97: // TIPODATO2 ::= iden 
            {
                Nodo RESULT = null;
                int datoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int datoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String dato = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("tipo", dato, datoright, datoleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO2", 20, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 96: // TIPODATO2 ::= TIPODATO 
            {
                Nodo RESULT = null;
                int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int tiporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo tipo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = tipo;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO2", 20, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 95: // PARAMETROS ::= PARAMETRO 
            {
                Nodo RESULT = null;
                int parleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int parright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo par = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("parametros", par.linea - 1, par.columna - 1);
                RESULT.add(par);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS", 31, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 94: // PARAMETROS ::= PARAMETROS coma PARAMETRO 
            {
                Nodo RESULT = null;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int parleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int parright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo par = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = lista;
                RESULT.add(par);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS", 31, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 93: // PARAMETROSSTAR ::= 
            {
                Nodo RESULT = null;
                RESULT = new Nodo("parametros", 0, 0);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSSTAR", 32, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 92: // PARAMETROSSTAR ::= PARAMETROS 
            {
                Nodo RESULT = null;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = lista;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSSTAR", 32, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 91: // METODO ::= vacio datos parenInicio parenFin llaveInicio CONSULTASTAR llaveFin 
            {
                Nodo RESULT = null;
                int valeft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).left;
                int varight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).right;
                String va = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).value;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("datos", "datos", varight, valeft);
                RESULT.add(sent);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO", 13, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 90: // METODO ::= vacio inicio parenInicio parenFin llaveInicio SENTENCIAS llaveFin 
            {
                Nodo RESULT = null;
                int valeft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).left;
                int varight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).right;
                String va = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).value;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("inicio", "inicio", varight, valeft);
                RESULT.add(sent);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO", 13, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 89: // METODO ::= TIPOMETODO iden parenInicio PARAMETROSSTAR parenFin VISIBILIDAD llaveInicio SENTENCIAS llaveFin 
            {
                Nodo RESULT = null;
                int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 8)).left;
                int tiporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 8)).right;
                Nodo tipo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 8)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 7)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 7)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 7)).value;
                int paraleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).left;
                int pararight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).right;
                Nodo para = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).value;
                int visileft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int visiright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                Nodo visi = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int sentleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int sentright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo sent = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("metodo", id, idright, idleft);
                RESULT.add(tipo);
                RESULT.add(visi);
                RESULT.add(para);
                RESULT.add(sent);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO", 13, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 8)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 88: // DATO ::= bool 
            {
                Nodo RESULT = null;
                int datoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int datoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String dato = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("bool", dato, datoright, datoleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DATO", 22, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 87: // DATO ::= cadena 
            {
                Nodo RESULT = null;
                int datoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int datoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String dato = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                dato = dato.replace("\"", "");
                RESULT = new Nodo("cadena", dato, datoright, datoleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DATO", 22, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 86: // DATO ::= caracter 
            {
                Nodo RESULT = null;
                int datoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int datoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String dato = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                dato = dato.replace("'", "");
                RESULT = new Nodo("caracter", dato, datoright, datoleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DATO", 22, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 85: // DATO ::= decimal 
            {
                Nodo RESULT = null;
                int datoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int datoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String dato = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("decimal", dato, datoright, datoleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DATO", 22, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 84: // DATO ::= entero 
            {
                Nodo RESULT = null;
                int datoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int datoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String dato = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("entero", dato, datoright, datoleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DATO", 22, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 83: // EXPL ::= EXPR 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = d1;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPL", 16, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 82: // EXPL ::= not EXPL 
            {
                Nodo RESULT = null;
                int opleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int d1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo(op, opright, opleft);
                RESULT.add(d1);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPL", 16, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 81: // EXPL ::= EXPL xor EXPL 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int d2left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int d2right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo d2 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo(op, opright, opleft);
                RESULT.add(d1);
                RESULT.add(d2);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPL", 16, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 80: // EXPL ::= EXPL or EXPL 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int d2left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int d2right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo d2 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo(op, opright, opleft);
                RESULT.add(d1);
                RESULT.add(d2);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPL", 16, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 79: // EXPL ::= EXPL and EXPL 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int d2left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int d2right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo d2 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo(op, opright, opleft);
                RESULT.add(d1);
                RESULT.add(d2);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPL", 16, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 78: // EXPR ::= EXPA 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = d1;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR", 17, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 77: // EXPR ::= EXPA noIgual EXPA 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int d2left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int d2right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo d2 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo(op, opright, opleft);
                RESULT.add(d1);
                RESULT.add(d2);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR", 17, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 76: // EXPR ::= EXPA menorIgual EXPA 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int d2left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int d2right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo d2 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo(op, opright, opleft);
                RESULT.add(d1);
                RESULT.add(d2);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR", 17, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 75: // EXPR ::= EXPA mayorIgual EXPA 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int d2left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int d2right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo d2 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo(op, opright, opleft);
                RESULT.add(d1);
                RESULT.add(d2);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR", 17, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 74: // EXPR ::= EXPA menor EXPA 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int d2left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int d2right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo d2 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo(op, opright, opleft);
                RESULT.add(d1);
                RESULT.add(d2);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR", 17, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 73: // EXPR ::= EXPA mayor EXPA 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int d2left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int d2right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo d2 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo(op, opright, opleft);
                RESULT.add(d1);
                RESULT.add(d2);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR", 17, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 72: // EXPR ::= EXPA igualIgual EXPA 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int d2left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int d2right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo d2 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo(op, opright, opleft);
                RESULT.add(d1);
                RESULT.add(d2);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR", 17, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 71: // EXPA ::= COLUMNA 
            {
                Nodo RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo val = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = val;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA", 15, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 70: // EXPA ::= SIMPLIFICADA 
            {
                Nodo RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo val = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = val;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA", 15, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 69: // EXPA ::= LLAMARGK 
            {
                Nodo RESULT = null;
                int id1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int id1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo id1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = id1;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA", 15, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 68: // EXPA ::= LLAMARHK 
            {
                Nodo RESULT = null;
                int id1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int id1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo id1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = id1;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA", 15, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 67: // EXPA ::= ACCESO 
            {
                Nodo RESULT = null;
                int id1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int id1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo id1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = id1;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA", 15, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 66: // EXPA ::= DATO 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = d1;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA", 15, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 65: // EXPA ::= menos EXPA 
            {
                Nodo RESULT = null;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("unitario", exp.linea - 1, exp.columna - 1);
                RESULT.add(exp);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA", 15, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 64: // EXPA ::= parenInicio EXPL parenFin 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                RESULT = d1;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA", 15, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 63: // EXPA ::= EXPA mod EXPA 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int d2left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int d2right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo d2 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo(op, opright, opleft);
                RESULT.add(d1);
                RESULT.add(d2);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA", 15, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 62: // EXPA ::= EXPA pot EXPA 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int d2left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int d2right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo d2 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo(op, opright, opleft);
                RESULT.add(d1);
                RESULT.add(d2);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA", 15, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 61: // EXPA ::= EXPA div EXPA 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int d2left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int d2right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo d2 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo(op, opright, opleft);
                RESULT.add(d1);
                RESULT.add(d2);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA", 15, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 60: // EXPA ::= EXPA mul EXPA 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int d2left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int d2right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo d2 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo(op, opright, opleft);
                RESULT.add(d1);
                RESULT.add(d2);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA", 15, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 59: // EXPA ::= EXPA menos EXPA 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int d2left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int d2right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo d2 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo(op, opright, opleft);
                RESULT.add(d1);
                RESULT.add(d2);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA", 15, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 58: // EXPA ::= EXPA mas EXPA 
            {
                Nodo RESULT = null;
                int d1left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int d1right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo d1 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String op = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int d2left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int d2right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo d2 = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo(op, opright, opleft);
                RESULT.add(d1);
                RESULT.add(d2);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA", 15, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 57: // CUERPOALS ::= 
            {
                Nodo RESULT = null;
                RESULT = new Nodo("cuerpo", 0, 0);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOALS", 14, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 56: // CUERPOALS ::= CUERPOS 
            {
                Nodo RESULT = null;
                int cuerposleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int cuerposright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo cuerpos = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = cuerpos;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOALS", 14, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 55: // CUERPO ::= error inteFin CUERPO 
            {
                Nodo RESULT = null;
                int cuerpoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int cuerporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo cuerpo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = cuerpo;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO", 11, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 54: // CUERPO ::= ATRIBUTOVARAR 
            {
                Nodo RESULT = null;
                int arregloVarleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int arregloVarright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo arregloVar = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = arregloVar;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO", 11, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 53: // CUERPO ::= ATRIBUTOALS 
            {
                Nodo RESULT = null;
                int atributoAlsleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int atributoAlsright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo atributoAls = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = atributoAls;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO", 11, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 52: // CUERPO ::= METODO 
            {
                Nodo RESULT = null;
                int metodoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int metodoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo metodo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = metodo;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO", 11, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 51: // CUERPO ::= ATRIBUTOVAR 
            {
                Nodo RESULT = null;
                int atributoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int atributoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo atributo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = atributo;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO", 11, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 50: // CUERPOS ::= CUERPO 
            {
                Nodo RESULT = null;
                int cuerpoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int cuerporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo cuerpo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("cuerpo", cuerpo.linea - 1, cuerpo.columna - 1);
                RESULT.add(cuerpo);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOS", 12, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 49: // CUERPOS ::= CUERPOS CUERPO 
            {
                Nodo RESULT = null;
                int cuerposleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int cuerposright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo cuerpos = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int cuerpoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int cuerporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo cuerpo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = cuerpos;
                RESULT.add(cuerpo);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOS", 12, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 48: // LISTAID ::= iden VISIBILIDAD 
            {
                Nodo RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int visileft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int visiright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo visi = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("listaIds", idright, idleft);
                Nodo id1 = new Nodo("id", id, idright, idleft);
                id1.add(visi);
                RESULT.add(id1);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAID", 9, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 47: // LISTAID ::= LISTAID coma iden VISIBILIDAD 
            {
                Nodo RESULT = null;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int visileft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int visiright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo visi = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = lista;
                Nodo id1 = new Nodo("id", id, idright, idleft);
                id1.add(visi);
                RESULT.add(id1);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAID", 9, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 46: // LISTAEXP ::= EXPL 
            {
                Nodo RESULT = null;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("listaExp", exp.linea - 1, exp.columna - 1);
                RESULT.add(exp);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAEXP", 36, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 45: // LISTAEXP ::= LISTAEXP coma EXPL 
            {
                Nodo RESULT = null;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = lista;
                RESULT.add(exp);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAEXP", 36, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 44: // ARREGLOS ::= ARREGLO 
            {
                Nodo RESULT = null;
                int arleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int arright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo ar = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = ar;

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS", 35, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 43: // ARREGLOS ::= ARREGLOS coma ARREGLO 
            {
                Nodo RESULT = null;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int arleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int arright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo ar = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = lista;
                for (Nodo e : ar.hijos) {
                    RESULT.add(e);
                }

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS", 35, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 42: // ARREGLO ::= llaveInicio ARREGLOS llaveFin 
            {
                Nodo RESULT = null;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                RESULT = lista;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO", 34, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 41: // ARREGLO ::= llaveInicio LISTAEXP llaveFin 
            {
                Nodo RESULT = null;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                RESULT = lista;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO", 34, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 40: // INDICES ::= corInicio EXPL corFin 
            {
                Nodo RESULT = null;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("indices", exp.linea - 1, exp.columna - 1);
                RESULT.add(exp);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INDICES", 33, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 39: // INDICES ::= INDICES corInicio EXPL corFin 
            {
                Nodo RESULT = null;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                RESULT = lista;
                RESULT.add(exp);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INDICES", 33, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 38: // ATRIBUTOVARAR ::= var TIPODATO iden INDICES VISIBILIDAD igual EXPL inteFin 
            {
                Nodo RESULT = null;
                int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).left;
                int tiporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).right;
                Nodo tipo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).value;
                int indicesleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).left;
                int indicesright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).right;
                Nodo indices = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).value;
                int visileft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int visiright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                Nodo visi = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int dirleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int dirright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo dir = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("atributoVarArDD", id, idright, idleft);
                RESULT.add(tipo);
                RESULT.add(indices);
                RESULT.add(visi);
                RESULT.add(dir);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOVARAR", 37, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 7)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 37: // ATRIBUTOVARAR ::= var TIPODATO iden INDICES VISIBILIDAD igual ARREGLO inteFin 
            {
                Nodo RESULT = null;
                int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).left;
                int tiporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).right;
                Nodo tipo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).value;
                int indicesleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).left;
                int indicesright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).right;
                Nodo indices = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).value;
                int visileft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int visiright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                Nodo visi = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int arregloleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int arregloright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo arreglo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("atributoVarArDA", id, idright, idleft);
                RESULT.add(tipo);
                RESULT.add(indices);
                RESULT.add(visi);
                RESULT.add(arreglo);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOVARAR", 37, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 7)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 36: // ATRIBUTOVARAR ::= var TIPODATO iden INDICES VISIBILIDAD inteFin 
            {
                Nodo RESULT = null;
                int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).left;
                int tiporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).right;
                Nodo tipo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int indicesleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int indicesright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo indices = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int visileft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int visiright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo visi = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("atributoVarArD", id, idright, idleft);
                RESULT.add(tipo);
                RESULT.add(indices);
                RESULT.add(visi);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOVARAR", 37, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 35: // ATRIBUTOVAR ::= var TIPODATO iden VISIBILIDAD igual EXPL inteFin 
            {
                Nodo RESULT = null;
                int varleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).left;
                int varright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).right;
                String var = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).value;
                int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).left;
                int tiporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).right;
                Nodo tipo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).value;
                int visileft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int visiright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                Nodo visi = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int expleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int expright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo exp = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("atributoVarDA", varright, varleft);
                Nodo id1 = new Nodo("id", id, idright, idleft);
                id1.add(visi);
                RESULT.add(tipo);
                RESULT.add(id1);
                RESULT.add(exp);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOVAR", 7, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 34: // ATRIBUTOVAR ::= var TIPODATO LISTAID inteFin 
            {
                Nodo RESULT = null;
                int varleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int varright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                String var = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int tiporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                Nodo tipo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("atributoVarD", varright, varleft);
                RESULT.add(tipo);
                RESULT.add(lista);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOVAR", 7, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 33: // ATRIBUTOALS ::= var iden iden VISIBILIDAD igual EXPL inteFin 
            {
                Nodo RESULT = null;
                int varleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).left;
                int varright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).right;
                String var = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).value;
                int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).left;
                int tiporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).right;
                String tipo = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).value;
                int visileft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int visiright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                Nodo visi = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int dirleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int dirright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo dir = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("atributoAlsDD", varright, varleft);
                Nodo tipoVar = new Nodo("tipo", tipo, tiporight, tipoleft);
                Nodo objeto = new Nodo("id", id, idright, idleft);
                objeto.add(visi);
                RESULT.add(tipoVar);
                RESULT.add(objeto);
                RESULT.add(dir);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOALS", 8, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 32: // ATRIBUTOALS ::= var iden iden VISIBILIDAD igual nuevo iden parenInicio parenFin inteFin 
            {
                Nodo RESULT = null;
                int varleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 9)).left;
                int varright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 9)).right;
                String var = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 9)).value;
                int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 8)).left;
                int tiporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 8)).right;
                String tipo = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 8)).value;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 7)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 7)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 7)).value;
                int visileft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).left;
                int visiright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).right;
                Nodo visi = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).value;
                int tipo2left = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int tipo2right = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                String tipo2 = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;

                RESULT = new Nodo("atributoAlsDI", varright, varleft);
                Nodo tipoVar = new Nodo("tipo", tipo, tiporight, tipoleft);
                Nodo tipoVar2 = new Nodo("tipo", tipo2, tipo2right, tipo2left);
                Nodo objeto = new Nodo("id", id, idright, idleft);
                objeto.add(visi);
                RESULT.add(tipoVar);
                RESULT.add(objeto);
                RESULT.add(tipoVar2);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOALS", 8, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 9)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 31: // ATRIBUTOALS ::= var iden LISTAID inteFin 
            {
                Nodo RESULT = null;
                int varleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int varright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                String var = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int tipoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).left;
                int tiporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).right;
                String tipo = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)).value;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("atributoAlsD", varright, varleft);
                Nodo tipoVar = new Nodo("tipo", tipo, tiporight, tipoleft);
                RESULT.add(tipoVar);
                RESULT.add(lista);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOALS", 8, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 30: // TIPOMETODO ::= vacio 
            {
                Nodo RESULT = null;
                int datoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int datoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String dato = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("tipo", "vacio", datoright, datoleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOMETODO", 21, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 29: // TIPOMETODO ::= iden 
            {
                Nodo RESULT = null;
                int datoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int datoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String dato = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("tipo", dato, datoright, datoleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOMETODO", 21, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 28: // TIPOMETODO ::= resBool 
            {
                Nodo RESULT = null;
                int datoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int datoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String dato = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("tipo", "bool", datoright, datoleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOMETODO", 21, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 27: // TIPOMETODO ::= resCadena 
            {
                Nodo RESULT = null;
                int datoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int datoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String dato = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("tipo", "cadena", datoright, datoleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOMETODO", 21, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 26: // TIPOMETODO ::= resCaracter 
            {
                Nodo RESULT = null;
                int datoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int datoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String dato = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("tipo", "caracter", datoright, datoleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOMETODO", 21, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 25: // TIPOMETODO ::= resDecimal 
            {
                Nodo RESULT = null;
                int datoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int datoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String dato = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("tipo", "decimal", datoright, datoleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOMETODO", 21, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 24: // TIPOMETODO ::= resEntero 
            {
                Nodo RESULT = null;
                int datoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int datoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String dato = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("tipo", "entero", datoright, datoleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOMETODO", 21, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 23: // TIPODATO ::= resBool 
            {
                Nodo RESULT = null;
                int datoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int datoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String dato = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("tipo", "bool", datoright, datoleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO", 19, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 22: // TIPODATO ::= resCadena 
            {
                Nodo RESULT = null;
                int datoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int datoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String dato = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("tipo", "cadena", datoright, datoleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO", 19, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 21: // TIPODATO ::= resCaracter 
            {
                Nodo RESULT = null;
                int datoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int datoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String dato = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("tipo", "caracter", datoright, datoleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO", 19, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 20: // TIPODATO ::= resDecimal 
            {
                Nodo RESULT = null;
                int datoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int datoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String dato = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("tipo", "decimal", datoright, datoleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO", 19, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 19: // TIPODATO ::= resEntero 
            {
                Nodo RESULT = null;
                int datoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int datoright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String dato = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("tipo", "entero", datoright, datoleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO", 19, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 18: // VISIBILIDAD ::= 
            {
                Nodo RESULT = null;
                RESULT = new Nodo("visibilidad", "publico");
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD", 18, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 17: // VISIBILIDAD ::= dosPuntos privado 
            {
                Nodo RESULT = null;
                int cadleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int cadright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String cad = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("visibilidad", "privado", cadright, cadleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD", 18, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 16: // VISIBILIDAD ::= dosPuntos protegido 
            {
                Nodo RESULT = null;
                int cadleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int cadright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String cad = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("visibilidad", "protegido", cadright, cadleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD", 18, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 15: // VISIBILIDAD ::= dosPuntos publico 
            {
                Nodo RESULT = null;
                int cadleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int cadright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                String cad = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = new Nodo("visibilidad", "publico", cadright, cadleft);
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD", 18, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 14: // ALS ::= error als ALS 
            {
                Nodo RESULT = null;
                int alsleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int alsright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo als = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = als;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ALS", 6, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 13: // ALS ::= als iden VISIBILIDAD hereda iden llaveInicio CUERPOALS llaveFin 
            {
                Nodo RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 6)).value;
                int visileft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).left;
                int visiright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).right;
                Nodo visi = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)).value;
                int idHeredaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int idHeredaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                String idHereda = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int cuerpoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int cuerporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo cuerpo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("als", id, idright, idleft);
                Nodo hereda = new Nodo("hereda", idHereda, idHeredaright, idHeredaleft);
                RESULT.add(hereda);
                RESULT.add(visi);
                RESULT.add(cuerpo);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ALS", 6, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 7)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 12: // ALS ::= als iden VISIBILIDAD llaveInicio CUERPOALS llaveFin 
            {
                Nodo RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 4)).value;
                int visileft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).left;
                int visiright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).right;
                Nodo visi = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 3)).value;
                int cuerpoleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int cuerporight = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo cuerpo = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("als", id, idright, idright);
                RESULT.add(visi);
                RESULT.add(cuerpo);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ALS", 6, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 5)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 11: // CLASESALS ::= ALS 
            {
                Nodo RESULT = null;
                int alsleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int alsright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo als = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("clases", als.linea - 1, als.columna - 1);
                RESULT.add(als);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASESALS", 1, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 10: // CLASESALS ::= CLASESALS ALS 
            {
                Nodo RESULT = null;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int alsleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int alsright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo als = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = lista;
                RESULT.add(als);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASESALS", 1, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 9: // INCLUIRHASKEL ::= incluir_HK iden inteFin 
            {
                Nodo RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("incluir", id, idright, idleft);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCLUIRHASKEL", 5, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 8: // IMPORTACION ::= importar idenImportar inteFin 
            {
                Nodo RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;

                RESULT = new Nodo("importar", id, idright, idleft);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTACION", 2, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 7: // ENCABEZADO ::= error inteFin ENCABEZADO 
            {
                Nodo RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo val = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = val;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENCABEZADO", 69, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 2)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 6: // ENCABEZADO ::= INCLUIRHASKEL 
            {
                Nodo RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo val = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = val;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENCABEZADO", 69, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 5: // ENCABEZADO ::= IMPORTACION 
            {
                Nodo RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo val = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                RESULT = val;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENCABEZADO", 69, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 4: // ENCABEZADOS ::= ENCABEZADO 
            {
                Nodo RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo val = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("encabezado", val.linea - 1, val.columna - 1);
                RESULT.add(val);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENCABEZADOS", 70, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 3: // ENCABEZADOS ::= ENCABEZADOS ENCABEZADO 
            {
                Nodo RESULT = null;
                int listaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int listaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo lista = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int valleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo val = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = lista;
                RESULT.add(val);

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENCABEZADOS", 70, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 2: // INICIO ::= CLASESALS 
            {
                Nodo RESULT = null;
                int clasesAlsleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int clasesAlsright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo clasesAls = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("archivo", clasesAls.linea - 1, clasesAls.columna - 1);
                Nodo enca = new Nodo("encabezado", 0, 0);
                RESULT.add(enca);
                RESULT.add(clasesAls);
                raiz = RESULT;

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO", 0, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 1: // INICIO ::= ENCABEZADOS CLASESALS 
            {
                Nodo RESULT = null;
                int encaleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int encaright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo enca = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                int clasesAlsleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).left;
                int clasesAlsright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).right;
                Nodo clasesAls = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

                RESULT = new Nodo("archivo", clasesAls.linea - 1, clasesAls.columna - 1);
                RESULT.add(enca);
                RESULT.add(clasesAls);
                raiz = RESULT;

                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO", 0, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            return CUP$Sintactico$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 0: // $START ::= INICIO EOF 
            {
                Object RESULT = null;
                int start_valleft = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).left;
                int start_valright = ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).right;
                Nodo start_val = (Nodo) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)).value;
                RESULT = start_val;
                CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top - 1)), ((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()), RESULT);
            }
            /* ACCEPT */
            CUP$Sintactico$parser.done_parsing();
            return CUP$Sintactico$result;

            /* . . . . . .*/
            default:
                throw new Exception(
                        "Invalid action number found in internal parse table");

        }
    }
}
