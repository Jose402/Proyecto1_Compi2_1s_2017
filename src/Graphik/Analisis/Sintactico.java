
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Mar 09 17:36:29 GMT-12:00 2017
//----------------------------------------------------

package Graphik.Analisis;

import Ast.*;
import Interfaz.Inicio;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Mar 09 17:36:29 GMT-12:00 2017
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\002\004\000\002\002\005\000\002\005" +
    "\003\000\002\005\002\000\002\004\006\000\002\004\005" +
    "\000\002\006\003\000\002\006\002\000\002\007\006\000" +
    "\002\007\005\000\002\007\003\000\002\010\010\000\002" +
    "\010\012\000\002\023\004\000\002\023\004\000\002\023" +
    "\004\000\002\023\002\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\012\007\000\002\012\014\000\002\011\007" +
    "\000\002\011\011\000\002\013\005\000\002\013\003\000" +
    "\002\015\004\000\002\015\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\017\003\000\002\017" +
    "\002\000\002\016\012\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\003\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\004\000\002" +
    "\021\005\000\002\021\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\027\006\000\002\027\005\000\002\030\005\000" +
    "\002\030\003\000\002\031\004\000\002\031\003\000\002" +
    "\032\004\000\002\032\003\000\002\032\003\000\002\033" +
    "\006\000\002\033\010\000\002\034\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\235\000\012\003\ufffe\004\ufffe\006\007\025\ufffe\001" +
    "\002\000\010\003\016\004\ufffa\025\020\001\002\000\012" +
    "\003\uffff\004\uffff\006\013\025\uffff\001\002\000\004\002" +
    "\012\001\002\000\004\051\010\001\002\000\004\060\011" +
    "\001\002\000\012\003\ufffc\004\ufffc\006\ufffc\025\ufffc\001" +
    "\002\000\004\002\001\001\002\000\004\051\014\001\002" +
    "\000\004\060\015\001\002\000\012\003\ufffd\004\ufffd\006" +
    "\ufffd\025\ufffd\001\002\000\006\004\ufff7\025\ufff7\001\002" +
    "\000\006\004\ufffb\025\235\001\002\000\004\116\233\001" +
    "\002\000\004\004\023\001\002\000\004\002\000\001\002" +
    "\000\004\116\024\001\002\000\010\020\025\055\ufff1\064" +
    "\027\001\002\000\004\116\226\001\002\000\004\055\033" +
    "\001\002\000\010\015\032\016\030\017\031\001\002\000" +
    "\010\055\ufff3\060\ufff3\062\ufff3\001\002\000\010\055\ufff2" +
    "\060\ufff2\062\ufff2\001\002\000\010\055\ufff4\060\ufff4\062" +
    "\ufff4\001\002\000\024\004\043\005\052\007\041\010\034" +
    "\011\046\012\035\013\042\014\045\056\uffd8\001\002\000" +
    "\004\116\uffea\001\002\000\004\116\uffe8\001\002\000\024" +
    "\004\043\005\052\007\041\010\034\011\046\012\035\013" +
    "\042\014\045\056\uffd9\001\002\000\024\004\uffdc\005\uffdc" +
    "\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\056" +
    "\uffdc\001\002\000\004\116\175\001\002\000\004\116\uffeb" +
    "\001\002\000\004\116\uffe7\001\002\000\004\116\uffe6\001" +
    "\002\000\024\004\uffdd\005\uffdd\007\uffdd\010\uffdd\011\uffdd" +
    "\012\uffdd\013\uffdd\014\uffdd\056\uffdd\001\002\000\004\116" +
    "\uffe5\001\002\000\004\116\uffe9\001\002\000\024\004\uffda" +
    "\005\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014" +
    "\uffda\056\uffda\001\002\000\024\004\uffdb\005\uffdb\007\uffdb" +
    "\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\056\uffdb\001" +
    "\002\000\004\056\174\001\002\000\016\007\053\010\055" +
    "\011\061\012\054\013\060\116\056\001\002\000\004\116" +
    "\ufff0\001\002\000\004\116\uffed\001\002\000\004\116\uffef" +
    "\001\002\000\004\116\163\001\002\000\004\116\062\001" +
    "\002\000\004\116\uffec\001\002\000\004\116\uffee\001\002" +
    "\000\012\060\uffdf\061\uffdf\062\uffdf\064\uffdf\001\002\000" +
    "\012\060\ufff1\061\064\062\ufff1\064\027\001\002\000\004" +
    "\116\162\001\002\000\006\060\067\062\066\001\002\000" +
    "\022\053\103\110\070\111\074\112\100\113\072\114\071" +
    "\115\076\116\073\001\002\000\024\004\uffe2\005\uffe2\007" +
    "\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\056\uffe2" +
    "\001\002\000\022\053\103\110\070\111\074\112\100\113" +
    "\072\114\071\115\076\116\073\001\002\000\046\054\uffbb" +
    "\060\uffbb\061\uffbb\067\uffbb\070\uffbb\071\uffbb\072\uffbb\073" +
    "\uffbb\074\uffbb\077\uffbb\100\uffbb\101\uffbb\102\uffbb\103\uffbb" +
    "\104\uffbb\105\uffbb\106\uffbb\107\uffbb\001\002\000\046\054" +
    "\uffbc\060\uffbc\061\uffbc\067\uffbc\070\uffbc\071\uffbc\072\uffbc" +
    "\073\uffbc\074\uffbc\077\uffbc\100\uffbc\101\uffbc\102\uffbc\103" +
    "\uffbc\104\uffbc\105\uffbc\106\uffbc\107\uffbc\001\002\000\050" +
    "\053\152\054\uffce\060\uffce\061\uffce\067\uffce\070\uffce\071" +
    "\uffce\072\uffce\073\uffce\074\uffce\077\uffce\100\uffce\101\uffce" +
    "\102\uffce\103\uffce\104\uffce\105\uffce\106\uffce\107\uffce\001" +
    "\002\000\046\054\uffbe\060\uffbe\061\uffbe\067\uffbe\070\uffbe" +
    "\071\uffbe\072\uffbe\073\uffbe\074\uffbe\077\uffbe\100\uffbe\101" +
    "\uffbe\102\uffbe\103\uffbe\104\uffbe\105\uffbe\106\uffbe\107\uffbe" +
    "\001\002\000\046\054\uffc6\060\uffc6\061\uffc6\067\132\070" +
    "\124\071\121\072\117\073\130\074\127\077\133\100\125" +
    "\101\122\102\120\103\126\104\123\105\uffc6\106\uffc6\107" +
    "\uffc6\001\002\000\046\054\uffbd\060\uffbd\061\uffbd\067\uffbd" +
    "\070\uffbd\071\uffbd\072\uffbd\073\uffbd\074\uffbd\077\uffbd\100" +
    "\uffbd\101\uffbd\102\uffbd\103\uffbd\104\uffbd\105\uffbd\106\uffbd" +
    "\107\uffbd\001\002\000\046\054\uffcd\060\uffcd\061\uffcd\067" +
    "\uffcd\070\uffcd\071\uffcd\072\uffcd\073\uffcd\074\uffcd\077\uffcd" +
    "\100\uffcd\101\uffcd\102\uffcd\103\uffcd\104\uffcd\105\uffcd\106" +
    "\uffcd\107\uffcd\001\002\000\046\054\uffbf\060\uffbf\061\uffbf" +
    "\067\uffbf\070\uffbf\071\uffbf\072\uffbf\073\uffbf\074\uffbf\077" +
    "\uffbf\100\uffbf\101\uffbf\102\uffbf\103\uffbf\104\uffbf\105\uffbf" +
    "\106\uffbf\107\uffbf\001\002\000\046\054\uffcf\060\uffcf\061" +
    "\uffcf\067\uffcf\070\uffcf\071\uffcf\072\uffcf\073\uffcf\074\uffcf" +
    "\077\uffcf\100\uffcf\101\uffcf\102\uffcf\103\uffcf\104\uffcf\105" +
    "\uffcf\106\uffcf\107\uffcf\001\002\000\016\054\uffc0\060\uffc0" +
    "\061\uffc0\105\uffc0\106\uffc0\107\uffc0\001\002\000\022\053" +
    "\103\110\070\111\074\112\100\113\072\114\071\115\076" +
    "\116\073\001\002\000\012\060\106\105\110\106\105\107" +
    "\107\001\002\000\022\053\103\110\070\111\074\112\100" +
    "\113\072\114\071\115\076\116\073\001\002\000\024\004" +
    "\uffe1\005\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1" +
    "\014\uffe1\056\uffe1\001\002\000\022\053\103\110\070\111" +
    "\074\112\100\113\072\114\071\115\076\116\073\001\002" +
    "\000\022\053\103\110\070\111\074\112\100\113\072\114" +
    "\071\115\076\116\073\001\002\000\016\054\uffc4\060\uffc4" +
    "\061\uffc4\105\uffc4\106\uffc4\107\107\001\002\000\016\054" +
    "\uffc5\060\uffc5\061\uffc5\105\uffc5\106\uffc5\107\uffc5\001\002" +
    "\000\016\054\uffc3\060\uffc3\061\uffc3\105\uffc3\106\uffc3\107" +
    "\107\001\002\000\042\054\131\067\132\070\124\071\121" +
    "\072\117\073\130\074\127\077\133\100\125\101\122\102" +
    "\120\103\126\104\123\105\uffc6\106\uffc6\107\uffc6\001\002" +
    "\000\012\054\116\105\110\106\105\107\107\001\002\000" +
    "\016\054\uffc1\060\uffc1\061\uffc1\105\uffc1\106\uffc1\107\uffc1" +
    "\001\002\000\020\053\135\111\074\112\100\113\072\114" +
    "\071\115\076\116\073\001\002\000\020\053\135\111\074" +
    "\112\100\113\072\114\071\115\076\116\073\001\002\000" +
    "\020\053\135\111\074\112\100\113\072\114\071\115\076" +
    "\116\073\001\002\000\020\053\135\111\074\112\100\113" +
    "\072\114\071\115\076\116\073\001\002\000\020\053\135" +
    "\111\074\112\100\113\072\114\071\115\076\116\073\001" +
    "\002\000\020\053\135\111\074\112\100\113\072\114\071" +
    "\115\076\116\073\001\002\000\020\053\135\111\074\112" +
    "\100\113\072\114\071\115\076\116\073\001\002\000\020" +
    "\053\135\111\074\112\100\113\072\114\071\115\076\116" +
    "\073\001\002\000\020\053\135\111\074\112\100\113\072" +
    "\114\071\115\076\116\073\001\002\000\020\053\135\111" +
    "\074\112\100\113\072\114\071\115\076\116\073\001\002" +
    "\000\046\054\uffd0\060\uffd0\061\uffd0\067\uffd0\070\uffd0\071" +
    "\uffd0\072\uffd0\073\uffd0\074\uffd0\077\uffd0\100\uffd0\101\uffd0" +
    "\102\uffd0\103\uffd0\104\uffd0\105\uffd0\106\uffd0\107\uffd0\001" +
    "\002\000\020\053\135\111\074\112\100\113\072\114\071" +
    "\115\076\116\073\001\002\000\020\053\135\111\074\112" +
    "\100\113\072\114\071\115\076\116\073\001\002\000\032" +
    "\054\uffcb\060\uffcb\061\uffcb\067\132\070\124\071\121\072" +
    "\117\073\130\074\127\105\uffcb\106\uffcb\107\uffcb\001\002" +
    "\000\020\053\135\111\074\112\100\113\072\114\071\115" +
    "\076\116\073\001\002\000\020\054\131\067\132\070\124" +
    "\071\121\072\117\073\130\074\127\001\002\000\046\054" +
    "\uffd6\060\uffd6\061\uffd6\067\uffd6\070\uffd6\071\121\072\117" +
    "\073\130\074\127\077\uffd6\100\uffd6\101\uffd6\102\uffd6\103" +
    "\uffd6\104\uffd6\105\uffd6\106\uffd6\107\uffd6\001\002\000\046" +
    "\054\uffd1\060\uffd1\061\uffd1\067\uffd1\070\uffd1\071\uffd1\072" +
    "\uffd1\073\uffd1\074\127\077\uffd1\100\uffd1\101\uffd1\102\uffd1" +
    "\103\uffd1\104\uffd1\105\uffd1\106\uffd1\107\uffd1\001\002\000" +
    "\046\054\uffd2\060\uffd2\061\uffd2\067\uffd2\070\uffd2\071\uffd2" +
    "\072\uffd2\073\uffd2\074\uffd2\077\uffd2\100\uffd2\101\uffd2\102" +
    "\uffd2\103\uffd2\104\uffd2\105\uffd2\106\uffd2\107\uffd2\001\002" +
    "\000\032\054\uffc8\060\uffc8\061\uffc8\067\132\070\124\071" +
    "\121\072\117\073\130\074\127\105\uffc8\106\uffc8\107\uffc8" +
    "\001\002\000\032\054\uffca\060\uffca\061\uffca\067\132\070" +
    "\124\071\121\072\117\073\130\074\127\105\uffca\106\uffca" +
    "\107\uffca\001\002\000\046\054\uffd5\060\uffd5\061\uffd5\067" +
    "\uffd5\070\uffd5\071\121\072\117\073\130\074\127\077\uffd5" +
    "\100\uffd5\101\uffd5\102\uffd5\103\uffd5\104\uffd5\105\uffd5\106" +
    "\uffd5\107\uffd5\001\002\000\032\054\uffc7\060\uffc7\061\uffc7" +
    "\067\132\070\124\071\121\072\117\073\130\074\127\105" +
    "\uffc7\106\uffc7\107\uffc7\001\002\000\032\054\uffcc\060\uffcc" +
    "\061\uffcc\067\132\070\124\071\121\072\117\073\130\074" +
    "\127\105\uffcc\106\uffcc\107\uffcc\001\002\000\046\054\uffd4" +
    "\060\uffd4\061\uffd4\067\uffd4\070\uffd4\071\uffd4\072\uffd4\073" +
    "\uffd4\074\127\077\uffd4\100\uffd4\101\uffd4\102\uffd4\103\uffd4" +
    "\104\uffd4\105\uffd4\106\uffd4\107\uffd4\001\002\000\032\054" +
    "\uffc9\060\uffc9\061\uffc9\067\132\070\124\071\121\072\117" +
    "\073\130\074\127\105\uffc9\106\uffc9\107\uffc9\001\002\000" +
    "\046\054\uffd3\060\uffd3\061\uffd3\067\uffd3\070\uffd3\071\uffd3" +
    "\072\uffd3\073\uffd3\074\127\077\uffd3\100\uffd3\101\uffd3\102" +
    "\uffd3\103\uffd3\104\uffd3\105\uffd3\106\uffd3\107\uffd3\001\002" +
    "\000\024\053\103\054\154\110\070\111\074\112\100\113" +
    "\072\114\071\115\076\116\073\001\002\000\006\054\156" +
    "\061\157\001\002\000\046\054\uffb9\060\uffb9\061\uffb9\067" +
    "\uffb9\070\uffb9\071\uffb9\072\uffb9\073\uffb9\074\uffb9\077\uffb9" +
    "\100\uffb9\101\uffb9\102\uffb9\103\uffb9\104\uffb9\105\uffb9\106" +
    "\uffb9\107\uffb9\001\002\000\014\054\uffb7\061\uffb7\105\110" +
    "\106\105\107\107\001\002\000\046\054\uffba\060\uffba\061" +
    "\uffba\067\uffba\070\uffba\071\uffba\072\uffba\073\uffba\074\uffba" +
    "\077\uffba\100\uffba\101\uffba\102\uffba\103\uffba\104\uffba\105" +
    "\uffba\106\uffba\107\uffba\001\002\000\022\053\103\110\070" +
    "\111\074\112\100\113\072\114\071\115\076\116\073\001" +
    "\002\000\014\054\uffb8\061\uffb8\105\110\106\105\107\107" +
    "\001\002\000\016\054\uffc2\060\uffc2\061\uffc2\105\uffc2\106" +
    "\uffc2\107\uffc2\001\002\000\012\060\uffe0\061\uffe0\062\uffe0" +
    "\064\uffe0\001\002\000\010\060\ufff1\062\ufff1\064\027\001" +
    "\002\000\006\060\166\062\165\001\002\000\004\021\167" +
    "\001\002\000\024\004\uffe4\005\uffe4\007\uffe4\010\uffe4\011" +
    "\uffe4\012\uffe4\013\uffe4\014\uffe4\056\uffe4\001\002\000\004" +
    "\116\170\001\002\000\004\053\171\001\002\000\004\054" +
    "\172\001\002\000\004\060\173\001\002\000\024\004\uffe3" +
    "\005\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014" +
    "\uffe3\056\uffe3\001\002\000\004\002\ufff6\001\002\000\004" +
    "\053\176\001\002\000\004\054\177\001\002\000\006\055" +
    "\ufff1\064\027\001\002\000\004\055\201\001\002\000\006" +
    "\005\206\116\205\001\002\000\010\005\uffb3\056\uffb3\116" +
    "\uffb3\001\002\000\010\005\uffb2\056\uffb2\116\uffb2\001\002" +
    "\000\010\005\uffb5\056\uffb5\116\uffb5\001\002\000\006\053" +
    "\152\062\222\001\002\000\014\007\053\010\055\011\061" +
    "\012\054\013\060\001\002\000\010\005\206\056\213\116" +
    "\205\001\002\000\004\060\211\001\002\000\010\005\uffb4" +
    "\056\uffb4\116\uffb4\001\002\000\010\005\uffb6\056\uffb6\116" +
    "\uffb6\001\002\000\024\004\uffd7\005\uffd7\007\uffd7\010\uffd7" +
    "\011\uffd7\012\uffd7\013\uffd7\014\uffd7\056\uffd7\001\002\000" +
    "\004\116\062\001\002\000\010\060\216\061\064\062\217" +
    "\001\002\000\010\005\uffb1\056\uffb1\116\uffb1\001\002\000" +
    "\022\053\103\110\070\111\074\112\100\113\072\114\071" +
    "\115\076\116\073\001\002\000\012\060\221\105\110\106" +
    "\105\107\107\001\002\000\010\005\uffb0\056\uffb0\116\uffb0" +
    "\001\002\000\022\053\103\110\070\111\074\112\100\113" +
    "\072\114\071\115\076\116\073\001\002\000\012\060\224" +
    "\105\110\106\105\107\107\001\002\000\010\005\uffaf\056" +
    "\uffaf\116\uffaf\001\002\000\024\004\uffde\005\uffde\007\uffde" +
    "\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde\056\uffde\001" +
    "\002\000\006\055\ufff1\064\027\001\002\000\004\055\230" +
    "\001\002\000\024\004\043\005\052\007\041\010\034\011" +
    "\046\012\035\013\042\014\045\056\uffd8\001\002\000\004" +
    "\056\232\001\002\000\004\002\ufff5\001\002\000\004\060" +
    "\234\001\002\000\006\004\ufff8\025\ufff8\001\002\000\004" +
    "\116\236\001\002\000\004\060\237\001\002\000\006\004" +
    "\ufff9\025\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\235\000\010\002\005\004\004\005\003\001\001\000" +
    "\006\006\020\007\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\011\036\012" +
    "\046\014\043\015\035\016\047\017\050\025\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\011\036\012" +
    "\046\014\224\016\047\025\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\020\074\021\103\022\101\026\100" +
    "\027\076\001\001\000\002\001\001\000\014\020\074\021" +
    "\160\022\101\026\100\027\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\020" +
    "\113\021\114\022\101\026\100\027\076\001\001\000\002" +
    "\001\001\000\014\020\074\021\112\022\101\026\100\027" +
    "\076\001\001\000\002\001\001\000\014\020\074\021\111" +
    "\022\101\026\100\027\076\001\001\000\014\020\074\021" +
    "\110\022\101\026\100\027\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\020\150\026\100" +
    "\027\076\001\001\000\010\020\147\026\100\027\076\001" +
    "\001\000\010\020\146\026\100\027\076\001\001\000\010" +
    "\020\145\026\100\027\076\001\001\000\010\020\144\026" +
    "\100\027\076\001\001\000\010\020\143\026\100\027\076" +
    "\001\001\000\010\020\142\026\100\027\076\001\001\000" +
    "\010\020\141\026\100\027\076\001\001\000\010\020\140" +
    "\026\100\027\076\001\001\000\010\020\137\026\100\027" +
    "\076\001\001\000\002\001\001\000\010\020\136\026\100" +
    "\027\076\001\001\000\010\020\133\026\100\027\076\001" +
    "\001\000\002\001\001\000\010\020\135\026\100\027\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\020\074\021\154\022\101\026\100\027\076\030\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\020\074\021\157\022\101\026" +
    "\100\027\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\163\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\177\001\001\000\002\001\001\000" +
    "\014\027\207\031\206\032\203\033\201\034\202\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\213\001\001\000\012\027\207" +
    "\032\211\033\201\034\202\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\214\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\020\074\021\217\022\101\026\100\027\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\020\074\021" +
    "\222\022\101\026\100\027\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\226\001" +
    "\001\000\002\001\001\000\020\011\036\012\046\014\043" +
    "\015\035\016\047\017\230\025\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        System.out.println("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "
        +s.value + " no reconocido." );
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error en la Línea " + (s.right+1)+ "Columna "+(s.left+1)+". Identificador " +
        s.value + " no reconocido.");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ASIGNACION ::= iden igual EXPL inteFin 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DECLARACION ::= var TIPODATO LISTAID igual EXPL inteFin 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DECLARACION ::= var TIPODATO LISTAID inteFin 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SENTENCIA ::= ASIGNACION 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SENTENCIA ::= DECLARACION 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIA ::= LLAMADAMETODO inteFin 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIAS ::= SENTENCIA 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VALORPARAMETROS ::= EXPL 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT=new Nodo("valorParametros",expright,expleft);
                RESULT.add(exp);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALORPARAMETROS",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VALORPARAMETROS ::= VALORPARAMETROS coma EXPL 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=lista;
                RESULT.add(exp);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALORPARAMETROS",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LLAMADAMETODO ::= iden parenInicio parenFin 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
            RESULT=new Nodo("llamadaMetodo",id,idright,idleft);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADAMETODO",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LLAMADAMETODO ::= iden parenInicio VALORPARAMETROS parenFin 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT=new Nodo("llamadaMetodo",id,idright,idleft);
            RESULT.add(lista);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADAMETODO",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DATO ::= bool 
            {
              Nodo RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo("bool",dato,datoright,datoleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DATO",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DATO ::= cadena 
            {
              Nodo RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo("cadena",dato,datoright,datoleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DATO",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DATO ::= caracter 
            {
              Nodo RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo("caracter",dato,datoright,datoleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DATO",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DATO ::= decimal 
            {
              Nodo RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo("decimal",dato,datoright,datoleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DATO",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DATO ::= entero 
            {
              Nodo RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo("entero",dato,datoright,datoleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DATO",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPL ::= EXPR 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=d1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPL",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPL ::= parenInicio EXPL parenFin 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=d1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPL",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPL ::= not EXPL 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int d1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPL",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPL ::= EXPL xor EXPL 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPL",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPL ::= EXPL or EXPL 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPL",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPL ::= EXPL and EXPL 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPL",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPR ::= EXPA 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=d1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPR ::= EXPA noIgual EXPA 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPR ::= EXPA menorIgual EXPA 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPR ::= EXPA mayorIgual EXPA 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPR ::= EXPA menor EXPA 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPR ::= EXPA mayor EXPA 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPR ::= EXPA igualIgual EXPA 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPA ::= LLAMADAMETODO 
            {
              Nodo RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo id1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=id1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPA ::= iden 
            {
              Nodo RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo("id",id1,id1right,id1left);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPA ::= DATO 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=d1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPA ::= parenInicio EXPA parenFin 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=d1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPA ::= EXPA mod EXPA 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPA ::= EXPA pot EXPA 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPA ::= EXPA div EXPA 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPA ::= EXPA mul EXPA 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPA ::= EXPA menos EXPA 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPA ::= EXPA mas EXPA 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // METODO ::= TIPOMETODO iden parenInicio parenFin VISIBILIDAD llaveInicio SENTENCIAS llaveFin 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int visileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int visiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo visi = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        RESULT=new Nodo("metodo",id,idright,idleft);
        RESULT.add(tipo);
        RESULT.add(visi);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CUERPOALS ::= 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOALS",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CUERPOALS ::= CUERPOS 
            {
              Nodo RESULT =null;
		int cuerposleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cuerposright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo cuerpos = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=cuerpos;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOALS",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CUERPO ::= ATRIBUTOALS 
            {
              Nodo RESULT =null;
		int atributoAlsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int atributoAlsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo atributoAls = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=atributoAls;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CUERPO ::= METODO 
            {
              Nodo RESULT =null;
		int metodoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int metodoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo metodo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=metodo;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CUERPO ::= ATRIBUTOVAR 
            {
              Nodo RESULT =null;
		int atributoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int atributoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo atributo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=atributo;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CUERPOS ::= CUERPO 
            {
              Nodo RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo cuerpo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=new Nodo("cuerpo",cuerpo.linea-1,cuerpo.columna-1);
            RESULT.add(cuerpo);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOS",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CUERPOS ::= CUERPOS CUERPO 
            {
              Nodo RESULT =null;
		int cuerposleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cuerposright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo cuerpos = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo cuerpo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=cuerpos;
            RESULT.add(cuerpo);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOS",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LISTAID ::= iden 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=new Nodo("listaIds",idright,idleft);
            Nodo id1=new Nodo("id",id,idright,idleft);
            RESULT.add(id1);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAID",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LISTAID ::= LISTAID coma iden 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=lista;
            Nodo id1=new Nodo("id",id,idright,idleft);
            RESULT.add(id1);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAID",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ATRIBUTOVAR ::= var TIPODATO LISTAID VISIBILIDAD igual EXPL inteFin 
            {
              Nodo RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int visileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int visiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo visi = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT=new Nodo("atributoVar",varright,varleft);
            RESULT.add(tipo);RESULT.add(lista);
            RESULT.add(visi);
            RESULT.add(exp);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOVAR",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ATRIBUTOVAR ::= var TIPODATO LISTAID VISIBILIDAD inteFin 
            {
              Nodo RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int visileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int visiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo visi = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT=new Nodo("atributoVar",varright,varleft);
            RESULT.add(tipo);RESULT.add(lista);
            RESULT.add(visi);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOVAR",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ATRIBUTOALS ::= var iden iden VISIBILIDAD igual nuevo iden parenInicio parenFin inteFin 
            {
              Nodo RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int visileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int visiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Nodo visi = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int tipo2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tipo2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String tipo2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
            RESULT=new Nodo("atributoAls",varright,varleft);
            Nodo tipoVar=new Nodo("tipo",tipo,tiporight,tipoleft);
            Nodo tipoVar2=new Nodo("tipo",tipo2,tipo2right,tipo2left);
            Nodo objeto=new Nodo("id",id,idright,idleft);
            RESULT.add(tipoVar);
            RESULT.add(objeto);
            RESULT.add(visi);
            RESULT.add(tipoVar2);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOALS",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ATRIBUTOALS ::= var iden iden VISIBILIDAD inteFin 
            {
              Nodo RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int visileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int visiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo visi = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT=new Nodo("atributoAls",varright,varleft);
            Nodo tipoVar=new Nodo("tipo",tipo,tiporight,tipoleft);
            Nodo objeto=new Nodo("id",id,idright,idleft);
            RESULT.add(tipoVar);
            RESULT.add(objeto);
            RESULT.add(visi);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOALS",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TIPOMETODO ::= vacio 
            {
              Nodo RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo("tipo",dato,datoright,datoleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOMETODO",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TIPOMETODO ::= als 
            {
              Nodo RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo("tipo",dato,datoright,datoleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOMETODO",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TIPOMETODO ::= resBool 
            {
              Nodo RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo("tipo",dato,datoright,datoleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOMETODO",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPOMETODO ::= resCadena 
            {
              Nodo RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo("tipo",dato,datoright,datoleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOMETODO",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIPOMETODO ::= resCaracter 
            {
              Nodo RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo("tipo",dato,datoright,datoleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOMETODO",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPOMETODO ::= resDecimal 
            {
              Nodo RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo("tipo",dato,datoright,datoleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOMETODO",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPOMETODO ::= resEntero 
            {
              Nodo RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo("tipo",dato,datoright,datoleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOMETODO",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPODATO ::= resBool 
            {
              Nodo RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo("tipo",dato,datoright,datoleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPODATO ::= resCadena 
            {
              Nodo RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo("tipo",dato,datoright,datoleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPODATO ::= resCaracter 
            {
              Nodo RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo("tipo",dato,datoright,datoleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPODATO ::= resDecimal 
            {
              Nodo RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo("tipo",dato,datoright,datoleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPODATO ::= resEntero 
            {
              Nodo RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo("tipo",dato,datoright,datoleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VISIBILIDAD ::= 
            {
              Nodo RESULT =null;
		RESULT=new Nodo("visibilidad","publico");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VISIBILIDAD ::= dosPuntos privado 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo("visibilidad",cad,cadright,cadleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VISIBILIDAD ::= dosPuntos protegido 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo("visibilidad",cad,cadright,cadleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VISIBILIDAD ::= dosPuntos publico 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo("visibilidad",cad,cadright,cadleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ALS ::= als iden hereda iden VISIBILIDAD llaveInicio CUERPOALS llaveFin 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int idHeredaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idHeredaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String idHereda = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int visileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int visiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo visi = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo cuerpo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT=new Nodo("als",id,idright,idleft);
            Nodo hereda=new Nodo("hereda",idHereda,idHeredaright,idHeredaleft);
            RESULT.add(hereda);RESULT.add(visi);
            RESULT.add(cuerpo);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ALS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ALS ::= als iden VISIBILIDAD llaveInicio CUERPOALS llaveFin 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int visileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int visiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo visi = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
            RESULT=new Nodo("als",id,idright,idright);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ALS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LLAMADAHASKEL ::= error 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADAHASKEL",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LLAMADAHASKEL ::= incluir_HK iden inteFin 
            {
              Nodo RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String in = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                Nodo importar=new Nodo("incluir",id,idright,idleft);RESULT=new Nodo("incluidos",inright,inleft);
                RESULT.add(importar);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADAHASKEL",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LLAMADAHASKEL ::= LLAMADAHASKEL incluir_HK iden inteFin 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=nodo;
                Nodo importar=new Nodo("incluir",id,idright,idleft);
                RESULT.add(importar);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADAHASKEL",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LLAMADAHASKELS ::= 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADAHASKELS",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LLAMADAHASKELS ::= LLAMADAHASKEL 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=nodo;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADAHASKELS",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IMPORTACION ::= importar idenImportar inteFin 
            {
              Nodo RESULT =null;
		int imleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int imright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String im = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                Nodo importar=new Nodo("importar",id,idright,idleft);RESULT=new Nodo("importaciones",imright,imleft);
                RESULT.add(importar);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IMPORTACION ::= IMPORTACION importar idenImportar inteFin 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=nodo;
                Nodo importar=new Nodo("importar",id,idright,idleft);
                RESULT.add(importar);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IMPORTACIONES ::= 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTACIONES",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // IMPORTACIONES ::= IMPORTACION 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=nodo;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTACIONES",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= IMPORTACIONES LLAMADAHASKELS ALS 
            {
              Nodo RESULT =null;
		int importarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int importarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo importar = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int incluirleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int incluirright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo incluir = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int alsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int alsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo als = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT=new Nodo("encabezado",importar.linea-1,importar.columna-1);
        RESULT.add(importar);
        RESULT.add(incluir);
        RESULT.add(als);
        Inicio.raiz=RESULT;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

