
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 14 16:06:16 GMT-12:00 2017
//----------------------------------------------------

package Graphik.Analisis;

import Ast.*;
import Interfaz.Inicio;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Mar 14 16:06:16 GMT-12:00 2017
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\236\000\002\002\004\000\002\002\005\000\002\002" +
    "\003\000\002\005\003\000\002\005\002\000\002\004\006" +
    "\000\002\004\005\000\002\006\003\000\002\006\002\000" +
    "\002\007\006\000\002\007\005\000\002\007\003\000\002" +
    "\003\004\000\002\003\003\000\002\010\010\000\002\010" +
    "\012\000\002\024\004\000\002\024\004\000\002\024\004" +
    "\000\002\024\002\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\012\006\000\002\012\014\000\002\011\006\000" +
    "\002\011\011\000\002\047\010\000\002\047\012\000\002" +
    "\043\006\000\002\043\005\000\002\044\005\000\002\044" +
    "\005\000\002\045\005\000\002\045\003\000\002\046\005" +
    "\000\002\046\003\000\002\013\006\000\002\013\004\000" +
    "\002\016\004\000\002\016\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\020" +
    "\003\000\002\020\002\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\004\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\003\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\004\000\002\022" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\017\013\000" +
    "\002\017\011\000\002\017\011\000\002\042\003\000\002" +
    "\042\002\000\002\041\005\000\002\041\003\000\002\026" +
    "\003\000\002\026\003\000\002\040\005\000\002\040\006" +
    "\000\002\050\005\000\002\050\004\000\002\031\007\000" +
    "\002\031\006\000\002\031\007\000\002\031\006\000\002" +
    "\032\005\000\002\032\003\000\002\034\004\000\002\034" +
    "\003\000\002\033\003\000\002\033\002\000\002\035\004" +
    "\000\002\035\004\000\002\035\004\000\002\035\004\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\004\000\002\035\004\000\002\035" +
    "\004\000\002\035\004\000\002\035\004\000\002\035\004" +
    "\000\002\014\005\000\002\014\003\000\002\036\005\000" +
    "\002\036\007\000\002\036\005\000\002\036\012\000\002" +
    "\036\006\000\002\036\010\000\002\037\005\000\002\037" +
    "\005\000\002\037\010\000\002\051\005\000\002\051\003" +
    "\000\002\052\004\000\002\054\011\000\002\054\015\000" +
    "\002\055\011\000\002\055\012\000\002\065\004\000\002" +
    "\065\003\000\002\064\006\000\002\066\005\000\002\067" +
    "\004\000\002\067\004\000\002\056\015\000\002\070\007" +
    "\000\002\070\005\000\002\057\011\000\002\060\012\000" +
    "\002\062\003\000\002\062\004\000\002\061\003\000\002" +
    "\063\003\000\002\071\006\000\002\053\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0154\000\040\003\ufffd\004\ufffd\006\027\023\011\025" +
    "\ufffd\026\020\053\012\070\016\110\010\111\007\112\025" +
    "\113\004\114\017\115\014\116\032\001\002\000\064\002" +
    "\uffad\052\uffad\054\uffad\056\uffad\060\uffad\061\uffad\064\uffad" +
    "\066\uffad\067\uffad\070\uffad\071\uffad\072\uffad\073\uffad\074" +
    "\uffad\075\uffad\076\uffad\077\uffad\100\uffad\101\uffad\102\uffad" +
    "\103\uffad\104\uffad\105\uffad\106\uffad\107\uffad\001\002\000" +
    "\066\002\uffbf\052\uffbf\054\uffbf\056\uffbf\060\uffbf\061\uffbf" +
    "\063\u0150\064\uffbf\066\uffbf\067\uffbf\070\uffbf\071\uffbf\072" +
    "\uffbf\073\uffbf\074\uffbf\075\uffbf\076\uffbf\077\uffbf\100\uffbf" +
    "\101\uffbf\102\uffbf\103\uffbf\104\uffbf\105\uffbf\106\uffbf\107" +
    "\uffbf\001\002\000\064\002\uffc0\052\uffc0\054\uffc0\056\uffc0" +
    "\060\uffc0\061\uffc0\064\uffc0\066\uffc0\067\uffc0\070\uffc0\071" +
    "\uffc0\072\uffc0\073\uffc0\074\uffc0\075\uffc0\076\uffc0\077\uffc0" +
    "\100\uffc0\101\uffc0\102\uffc0\103\uffc0\104\uffc0\105\uffc0\106" +
    "\uffc0\107\uffc0\001\002\000\064\002\uffaf\052\uffaf\054\uffaf" +
    "\056\uffaf\060\uffaf\061\uffaf\064\uffaf\066\uffaf\067\uffaf\070" +
    "\uffaf\071\uffaf\072\uffaf\073\uffaf\074\uffaf\075\uffaf\076\uffaf" +
    "\077\uffaf\100\uffaf\101\uffaf\102\uffaf\103\uffaf\104\uffaf\105" +
    "\uffaf\106\uffaf\107\uffaf\001\002\000\030\023\011\026\020" +
    "\053\012\070\016\110\010\111\007\112\025\113\004\114" +
    "\017\115\014\116\032\001\002\000\004\116\u014e\001\002" +
    "\000\030\023\011\026\020\053\012\070\016\110\010\111" +
    "\007\112\025\113\004\114\017\115\014\116\032\001\002" +
    "\000\012\003\ufffe\004\ufffe\006\u0149\025\ufffe\001\002\000" +
    "\064\002\uffae\052\uffae\054\uffae\056\uffae\060\uffae\061\uffae" +
    "\064\uffae\066\uffae\067\uffae\070\uffae\071\uffae\072\uffae\073" +
    "\uffae\074\uffae\075\uffae\076\uffae\077\uffae\100\uffae\101\uffae" +
    "\102\uffae\103\uffae\104\uffae\105\uffae\106\uffae\107\uffae\001" +
    "\002\000\030\002\uffb1\052\uffb1\054\uffb1\056\uffb1\060\uffb1" +
    "\061\uffb1\064\uffb1\066\uffb1\105\uffb1\106\uffb1\107\uffb1\001" +
    "\002\000\026\023\011\026\020\053\012\070\016\111\007" +
    "\112\025\113\004\114\017\115\014\116\032\001\002\000" +
    "\064\002\uffac\052\uffac\054\uffac\056\uffac\060\uffac\061\uffac" +
    "\064\uffac\066\uffac\067\uffac\070\uffac\071\uffac\072\uffac\073" +
    "\uffac\074\uffac\075\uffac\076\uffac\077\uffac\100\uffac\101\uffac" +
    "\102\uffac\103\uffac\104\uffac\105\uffac\106\uffac\107\uffac\001" +
    "\002\000\004\116\u0140\001\002\000\012\002\uffff\105\042" +
    "\106\037\107\041\001\002\000\064\002\uffbd\052\uffbd\054" +
    "\uffbd\056\uffbd\060\uffbd\061\uffbd\064\uffbd\066\uffbd\067\uffbd" +
    "\070\uffbd\071\uffbd\072\uffbd\073\uffbd\074\uffbd\075\uffbd\076" +
    "\uffbd\077\uffbd\100\uffbd\101\uffbd\102\uffbd\103\uffbd\104\uffbd" +
    "\105\uffbd\106\uffbd\107\uffbd\001\002\000\010\003\106\004" +
    "\ufff9\025\110\001\002\000\064\002\uffbe\052\uffbe\054\uffbe" +
    "\056\uffbe\060\uffbe\061\uffbe\064\uffbe\066\uffbe\067\uffbe\070" +
    "\uffbe\071\uffbe\072\uffbe\073\uffbe\074\uffbe\075\uffbe\076\uffbe" +
    "\077\uffbe\100\uffbe\101\uffbe\102\uffbe\103\uffbe\104\uffbe\105" +
    "\uffbe\106\uffbe\107\uffbe\001\002\000\064\002\uffb0\052\uffb0" +
    "\054\uffb0\056\uffb0\060\uffb0\061\uffb0\064\uffb0\066\uffb0\067" +
    "\uffb0\070\uffb0\071\uffb0\072\uffb0\073\uffb0\074\uffb0\075\uffb0" +
    "\076\uffb0\077\uffb0\100\uffb0\101\uffb0\102\uffb0\103\uffb0\104" +
    "\uffb0\105\uffb0\106\uffb0\107\uffb0\001\002\000\064\002\uffb6" +
    "\052\uffb6\054\uffb6\056\uffb6\060\uffb6\061\uffb6\064\uffb6\066" +
    "\uffb6\067\070\070\062\071\056\072\053\073\066\074\065" +
    "\075\060\076\057\077\067\100\063\101\055\102\054\103" +
    "\064\104\061\105\uffb6\106\uffb6\107\uffb6\001\002\000\004" +
    "\051\051\001\002\000\004\002\050\001\002\000\064\002" +
    "\uffc1\052\uffc1\054\uffc1\056\uffc1\060\uffc1\061\uffc1\064\uffc1" +
    "\066\uffc1\067\uffc1\070\uffc1\071\uffc1\072\uffc1\073\uffc1\074" +
    "\uffc1\075\uffc1\076\uffc1\077\uffc1\100\uffc1\101\uffc1\102\uffc1" +
    "\103\uffc1\104\uffc1\105\uffc1\106\uffc1\107\uffc1\001\002\000" +
    "\070\002\uff7a\052\uff7a\054\uff7a\056\uff7a\060\uff7a\061\uff7a" +
    "\063\uff7a\064\uff7a\065\033\066\uff7a\067\uff7a\070\uff7a\071" +
    "\uff7a\072\uff7a\073\uff7a\074\uff7a\075\uff7a\076\uff7a\077\uff7a" +
    "\100\uff7a\101\uff7a\102\uff7a\103\uff7a\104\uff7a\105\uff7a\106" +
    "\uff7a\107\uff7a\001\002\000\030\023\011\026\020\053\012" +
    "\070\016\110\010\111\007\112\025\113\004\114\017\115" +
    "\014\116\032\001\002\000\066\002\uff79\052\uff79\054\uff79" +
    "\056\uff79\060\uff79\061\uff79\064\uff79\065\035\066\uff79\067" +
    "\uff79\070\uff79\071\uff79\072\uff79\073\uff79\074\uff79\075\uff79" +
    "\076\uff79\077\uff79\100\uff79\101\uff79\102\uff79\103\uff79\104" +
    "\uff79\105\uff79\106\uff79\107\uff79\001\002\000\030\023\011" +
    "\026\020\053\012\070\016\110\010\111\007\112\025\113" +
    "\004\114\017\115\014\116\032\001\002\000\012\066\040" +
    "\105\042\106\037\107\041\001\002\000\030\023\011\026" +
    "\020\053\012\070\016\110\010\111\007\112\025\113\004" +
    "\114\017\115\014\116\032\001\002\000\070\002\uffdb\052" +
    "\uffdb\054\uffdb\056\uffdb\060\uffdb\061\uffdb\062\uffdb\064\uffdb" +
    "\065\uffdb\066\uffdb\067\uffdb\070\uffdb\071\uffdb\072\uffdb\073" +
    "\uffdb\074\uffdb\075\uffdb\076\uffdb\077\uffdb\100\uffdb\101\uffdb" +
    "\102\uffdb\103\uffdb\104\uffdb\105\uffdb\106\uffdb\107\uffdb\001" +
    "\002\000\030\023\011\026\020\053\012\070\016\110\010" +
    "\111\007\112\025\113\004\114\017\115\014\116\032\001" +
    "\002\000\030\023\011\026\020\053\012\070\016\110\010" +
    "\111\007\112\025\113\004\114\017\115\014\116\032\001" +
    "\002\000\030\002\uffb4\052\uffb4\054\uffb4\056\uffb4\060\uffb4" +
    "\061\uffb4\064\uffb4\066\uffb4\105\uffb4\106\uffb4\107\041\001" +
    "\002\000\030\002\uffb5\052\uffb5\054\uffb5\056\uffb5\060\uffb5" +
    "\061\uffb5\064\uffb5\066\uffb5\105\uffb5\106\uffb5\107\uffb5\001" +
    "\002\000\030\002\uffb3\052\uffb3\054\uffb3\056\uffb3\060\uffb3" +
    "\061\uffb3\064\uffb3\066\uffb3\105\uffb3\106\uffb3\107\041\001" +
    "\002\000\012\066\047\105\042\106\037\107\041\001\002" +
    "\000\070\002\uffda\052\uffda\054\uffda\056\uffda\060\uffda\061" +
    "\uffda\062\uffda\064\uffda\065\uffda\066\uffda\067\uffda\070\uffda" +
    "\071\uffda\072\uffda\073\uffda\074\uffda\075\uffda\076\uffda\077" +
    "\uffda\100\uffda\101\uffda\102\uffda\103\uffda\104\uffda\105\uffda" +
    "\106\uffda\107\uffda\001\002\000\004\002\001\001\002\000" +
    "\004\060\052\001\002\000\012\003\ufffb\004\ufffb\006\ufffb" +
    "\025\ufffb\001\002\000\026\023\011\026\020\053\012\070" +
    "\016\111\007\112\025\113\004\114\017\115\014\116\032" +
    "\001\002\000\026\023\011\026\020\053\012\070\016\111" +
    "\007\112\025\113\004\114\017\115\014\116\032\001\002" +
    "\000\026\023\011\026\020\053\012\070\016\111\007\112" +
    "\025\113\004\114\017\115\014\116\032\001\002\000\026" +
    "\023\011\026\020\053\012\070\016\111\007\112\025\113" +
    "\004\114\017\115\014\116\032\001\002\000\064\002\uff6f" +
    "\052\uff6f\054\uff6f\056\uff6f\060\uff6f\061\uff6f\064\uff6f\066" +
    "\uff6f\067\uff6f\070\uff6f\071\uff6f\072\uff6f\073\uff6f\074\uff6f" +
    "\075\uff6f\076\uff6f\077\uff6f\100\uff6f\101\uff6f\102\uff6f\103" +
    "\uff6f\104\uff6f\105\uff6f\106\uff6f\107\uff6f\001\002\000\064" +
    "\002\uff70\052\uff70\054\uff70\056\uff70\060\uff70\061\uff70\064" +
    "\uff70\066\uff70\067\uff70\070\uff70\071\uff70\072\uff70\073\uff70" +
    "\074\uff70\075\uff70\076\uff70\077\uff70\100\uff70\101\uff70\102" +
    "\uff70\103\uff70\104\uff70\105\uff70\106\uff70\107\uff70\001\002" +
    "\000\026\023\011\026\020\053\012\070\016\111\007\112" +
    "\025\113\004\114\017\115\014\116\032\001\002\000\026" +
    "\023\011\026\020\053\012\070\016\111\007\112\025\113" +
    "\004\114\017\115\014\116\032\001\002\000\026\023\011" +
    "\026\020\053\012\070\016\111\007\112\025\113\004\114" +
    "\017\115\014\116\032\001\002\000\026\023\011\026\020" +
    "\053\012\070\016\111\007\112\025\113\004\114\017\115" +
    "\014\116\032\001\002\000\026\023\011\026\020\053\012" +
    "\070\016\111\007\112\025\113\004\114\017\115\014\116" +
    "\032\001\002\000\026\023\011\026\020\053\012\070\016" +
    "\111\007\112\025\113\004\114\017\115\014\116\032\001" +
    "\002\000\026\023\011\026\020\053\012\070\016\111\007" +
    "\112\025\113\004\114\017\115\014\116\032\001\002\000" +
    "\026\023\011\026\020\053\012\070\016\111\007\112\025" +
    "\113\004\114\017\115\014\116\032\001\002\000\064\002" +
    "\uffc9\052\uffc9\054\uffc9\056\uffc9\060\uffc9\061\uffc9\064\uffc9" +
    "\066\uffc9\067\uffc9\070\uffc9\071\056\072\053\073\066\074" +
    "\065\075\uffc9\076\uffc9\077\uffc9\100\uffc9\101\uffc9\102\uffc9" +
    "\103\uffc9\104\uffc9\105\uffc9\106\uffc9\107\uffc9\001\002\000" +
    "\050\002\uffbb\052\uffbb\054\uffbb\056\uffbb\060\uffbb\061\uffbb" +
    "\064\uffbb\066\uffbb\067\070\070\062\071\056\072\053\073" +
    "\066\074\065\075\060\076\057\105\uffbb\106\uffbb\107\uffbb" +
    "\001\002\000\064\002\uffc4\052\uffc4\054\uffc4\056\uffc4\060" +
    "\uffc4\061\uffc4\064\uffc4\066\uffc4\067\uffc4\070\uffc4\071\uffc4" +
    "\072\uffc4\073\uffc4\074\065\075\uffc4\076\uffc4\077\uffc4\100" +
    "\uffc4\101\uffc4\102\uffc4\103\uffc4\104\uffc4\105\uffc4\106\uffc4" +
    "\107\uffc4\001\002\000\064\002\uffc5\052\uffc5\054\uffc5\056" +
    "\uffc5\060\uffc5\061\uffc5\064\uffc5\066\uffc5\067\uffc5\070\uffc5" +
    "\071\uffc5\072\uffc5\073\uffc5\074\uffc5\075\uffc5\076\uffc5\077" +
    "\uffc5\100\uffc5\101\uffc5\102\uffc5\103\uffc5\104\uffc5\105\uffc5" +
    "\106\uffc5\107\uffc5\001\002\000\050\002\uffb8\052\uffb8\054" +
    "\uffb8\056\uffb8\060\uffb8\061\uffb8\064\uffb8\066\uffb8\067\070" +
    "\070\062\071\056\072\053\073\066\074\065\075\060\076" +
    "\057\105\uffb8\106\uffb8\107\uffb8\001\002\000\050\002\uffba" +
    "\052\uffba\054\uffba\056\uffba\060\uffba\061\uffba\064\uffba\066" +
    "\uffba\067\070\070\062\071\056\072\053\073\066\074\065" +
    "\075\060\076\057\105\uffba\106\uffba\107\uffba\001\002\000" +
    "\064\002\uffc8\052\uffc8\054\uffc8\056\uffc8\060\uffc8\061\uffc8" +
    "\064\uffc8\066\uffc8\067\uffc8\070\uffc8\071\056\072\053\073" +
    "\066\074\065\075\uffc8\076\uffc8\077\uffc8\100\uffc8\101\uffc8" +
    "\102\uffc8\103\uffc8\104\uffc8\105\uffc8\106\uffc8\107\uffc8\001" +
    "\002\000\050\002\uffb7\052\uffb7\054\uffb7\056\uffb7\060\uffb7" +
    "\061\uffb7\064\uffb7\066\uffb7\067\070\070\062\071\056\072" +
    "\053\073\066\074\065\075\060\076\057\105\uffb7\106\uffb7" +
    "\107\uffb7\001\002\000\064\002\uffc7\052\uffc7\054\uffc7\056" +
    "\uffc7\060\uffc7\061\uffc7\064\uffc7\066\uffc7\067\uffc7\070\uffc7" +
    "\071\uffc7\072\uffc7\073\uffc7\074\065\075\uffc7\076\uffc7\077" +
    "\uffc7\100\uffc7\101\uffc7\102\uffc7\103\uffc7\104\uffc7\105\uffc7" +
    "\106\uffc7\107\uffc7\001\002\000\050\002\uffbc\052\uffbc\054" +
    "\uffbc\056\uffbc\060\uffbc\061\uffbc\064\uffbc\066\uffbc\067\070" +
    "\070\062\071\056\072\053\073\066\074\065\075\060\076" +
    "\057\105\uffbc\106\uffbc\107\uffbc\001\002\000\050\002\uffb9" +
    "\052\uffb9\054\uffb9\056\uffb9\060\uffb9\061\uffb9\064\uffb9\066" +
    "\uffb9\067\070\070\062\071\056\072\053\073\066\074\065" +
    "\075\060\076\057\105\uffb9\106\uffb9\107\uffb9\001\002\000" +
    "\064\002\uffc6\052\uffc6\054\uffc6\056\uffc6\060\uffc6\061\uffc6" +
    "\064\uffc6\066\uffc6\067\uffc6\070\uffc6\071\uffc6\072\uffc6\073" +
    "\uffc6\074\065\075\uffc6\076\uffc6\077\uffc6\100\uffc6\101\uffc6" +
    "\102\uffc6\103\uffc6\104\uffc6\105\uffc6\106\uffc6\107\uffc6\001" +
    "\002\000\004\004\120\001\002\000\006\004\ufff6\025\ufff6" +
    "\001\002\000\006\004\ufffa\025\113\001\002\000\004\116" +
    "\111\001\002\000\004\060\112\001\002\000\006\004\ufff7" +
    "\025\ufff7\001\002\000\004\116\114\001\002\000\004\060" +
    "\115\001\002\000\006\004\ufff8\025\ufff8\001\002\000\006" +
    "\002\000\004\120\001\002\000\006\002\ufff4\004\ufff4\001" +
    "\002\000\004\116\121\001\002\000\010\020\uffee\055\uffee" +
    "\064\123\001\002\000\006\020\130\055\127\001\002\000" +
    "\010\015\126\016\124\017\125\001\002\000\014\020\ufff0" +
    "\055\ufff0\060\ufff0\061\ufff0\062\ufff0\001\002\000\014\020" +
    "\uffef\055\uffef\060\uffef\061\uffef\062\uffef\001\002\000\014" +
    "\020\ufff1\055\ufff1\060\ufff1\061\ufff1\062\ufff1\001\002\000" +
    "\024\005\152\007\141\010\133\011\146\012\135\013\142" +
    "\014\145\056\uffca\116\143\001\002\000\004\116\131\001" +
    "\002\000\004\055\132\001\002\000\024\005\152\007\141" +
    "\010\133\011\146\012\135\013\142\014\145\056\uffca\116" +
    "\143\001\002\000\004\116\uffe7\001\002\000\024\005\uffcc" +
    "\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\056" +
    "\uffcc\116\uffcc\001\002\000\004\116\uffe5\001\002\000\024" +
    "\005\152\007\141\010\133\011\146\012\135\013\142\014" +
    "\145\056\uffcb\116\143\001\002\000\024\005\uffcf\007\uffcf" +
    "\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\056\uffcf\116" +
    "\uffcf\001\002\000\004\116\u0126\001\002\000\004\116\uffe8" +
    "\001\002\000\004\116\uffe4\001\002\000\004\116\uffe3\001" +
    "\002\000\024\005\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0" +
    "\013\uffd0\014\uffd0\056\uffd0\116\uffd0\001\002\000\010\024" +
    "\231\030\230\116\uffe2\001\002\000\004\116\uffe6\001\002" +
    "\000\004\056\227\001\002\000\024\005\uffce\007\uffce\010" +
    "\uffce\011\uffce\012\uffce\013\uffce\014\uffce\056\uffce\116\uffce" +
    "\001\002\000\024\005\uffcd\007\uffcd\010\uffcd\011\uffcd\012" +
    "\uffcd\013\uffcd\014\uffcd\056\uffcd\116\uffcd\001\002\000\016" +
    "\007\154\010\155\011\161\012\153\013\160\116\156\001" +
    "\002\000\004\116\uffea\001\002\000\004\116\uffed\001\002" +
    "\000\004\116\uffec\001\002\000\004\116\215\001\002\000" +
    "\004\116\162\001\002\000\004\116\uffe9\001\002\000\004" +
    "\116\uffeb\001\002\000\014\060\uffee\061\uffee\062\uffee\064" +
    "\123\065\033\001\002\000\006\060\164\061\165\001\002" +
    "\000\024\005\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013" +
    "\uffdf\014\uffdf\056\uffdf\116\uffdf\001\002\000\004\116\166" +
    "\001\002\000\010\060\uffee\061\uffee\064\123\001\002\000" +
    "\006\060\uffd3\061\uffd3\001\002\000\012\060\uffee\062\uffee" +
    "\064\123\065\035\001\002\000\010\060\uffd2\061\uffd2\062" +
    "\172\001\002\000\030\023\011\026\020\053\012\070\016" +
    "\110\010\111\007\112\025\113\004\114\017\115\014\116" +
    "\032\001\002\000\012\060\174\105\042\106\037\107\041" +
    "\001\002\000\024\005\uffde\007\uffde\010\uffde\011\uffde\012" +
    "\uffde\013\uffde\014\uffde\056\uffde\116\uffde\001\002\000\006" +
    "\060\176\062\177\001\002\000\024\005\uffdd\007\uffdd\010" +
    "\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\056\uffdd\116\uffdd" +
    "\001\002\000\004\055\200\001\002\000\032\023\011\026" +
    "\020\053\012\055\200\070\016\110\010\111\007\112\025" +
    "\113\004\114\017\115\014\116\032\001\002\000\004\060" +
    "\202\001\002\000\024\005\uffdc\007\uffdc\010\uffdc\011\uffdc" +
    "\012\uffdc\013\uffdc\014\uffdc\056\uffdc\116\uffdc\001\002\000" +
    "\006\056\uffd6\061\uffd6\001\002\000\014\056\uffd4\061\uffd4" +
    "\105\042\106\037\107\041\001\002\000\006\056\213\061" +
    "\212\001\002\000\006\056\210\061\207\001\002\000\004" +
    "\055\200\001\002\000\010\056\uffd8\060\uffd8\061\uffd8\001" +
    "\002\000\006\056\uffd7\061\uffd7\001\002\000\030\023\011" +
    "\026\020\053\012\070\016\110\010\111\007\112\025\113" +
    "\004\114\017\115\014\116\032\001\002\000\010\056\uffd9" +
    "\060\uffd9\061\uffd9\001\002\000\014\056\uffd5\061\uffd5\105" +
    "\042\106\037\107\041\001\002\000\012\060\uffee\061\uffee" +
    "\062\uffee\064\123\001\002\000\006\060\217\061\165\001" +
    "\002\000\024\005\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1" +
    "\013\uffe1\014\uffe1\056\uffe1\116\uffe1\001\002\000\010\060" +
    "\uffd2\061\uffd2\062\221\001\002\000\004\021\222\001\002" +
    "\000\004\116\223\001\002\000\004\053\224\001\002\000" +
    "\004\054\225\001\002\000\004\060\226\001\002\000\024" +
    "\005\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014" +
    "\uffe0\056\uffe0\116\uffe0\001\002\000\006\002\ufff2\004\ufff2" +
    "\001\002\000\004\053\u0121\001\002\000\004\053\232\001" +
    "\002\000\004\054\233\001\002\000\004\055\234\001\002" +
    "\000\056\005\256\022\270\023\011\026\020\027\265\036" +
    "\237\037\247\041\244\044\257\045\251\046\264\047\235" +
    "\050\267\053\012\056\uff95\070\016\111\007\112\025\113" +
    "\004\114\017\115\014\116\253\001\002\000\004\060\uff67" +
    "\001\002\000\024\060\u0120\067\uffbd\070\uffbd\071\uffbd\072" +
    "\uffbd\073\uffbd\074\uffbd\075\uffbd\076\uffbd\001\002\000\004" +
    "\053\u011d\001\002\000\004\060\u011c\001\002\000\062\005" +
    "\uff90\022\uff90\023\uff90\026\uff90\027\uff90\036\uff90\037\uff90" +
    "\041\uff90\042\uff90\043\uff90\044\uff90\045\uff90\046\uff90\047" +
    "\uff90\050\uff90\053\uff90\056\uff90\070\uff90\111\uff90\112\uff90" +
    "\113\uff90\114\uff90\115\uff90\116\uff90\001\002\000\004\056" +
    "\u011b\001\002\000\062\005\uff97\022\uff97\023\uff97\026\uff97" +
    "\027\uff97\036\uff97\037\uff97\041\uff97\042\uff97\043\uff97\044" +
    "\uff97\045\uff97\046\uff97\047\uff97\050\uff97\053\uff97\056\uff97" +
    "\070\uff97\111\uff97\112\uff97\113\uff97\114\uff97\115\uff97\116" +
    "\uff97\001\002\000\004\053\u010a\001\002\000\062\005\256" +
    "\022\270\023\011\026\020\027\265\036\237\037\247\041" +
    "\244\042\uff96\043\uff96\044\257\045\251\046\264\047\235" +
    "\050\267\053\012\056\uff96\070\016\111\007\112\025\113" +
    "\004\114\017\115\014\116\253\001\002\000\022\067\070" +
    "\070\062\071\056\072\053\073\066\074\065\075\060\076" +
    "\057\001\002\000\004\053\377\001\002\000\062\005\uff8d" +
    "\022\uff8d\023\uff8d\026\uff8d\027\uff8d\036\uff8d\037\uff8d\041" +
    "\uff8d\042\uff8d\043\uff8d\044\uff8d\045\uff8d\046\uff8d\047\uff8d" +
    "\050\uff8d\053\uff8d\056\uff8d\070\uff8d\111\uff8d\112\uff8d\113" +
    "\uff8d\114\uff8d\115\uff8d\116\uff8d\001\002\000\004\053\371" +
    "\001\002\000\004\060\370\001\002\000\030\062\361\063" +
    "\uff7a\065\033\067\uff7a\070\uff7a\071\uff7a\072\uff7a\073\uff7a" +
    "\074\uff7a\075\uff7a\076\uff7a\001\002\000\004\060\360\001" +
    "\002\000\004\060\357\001\002\000\016\007\154\010\155" +
    "\011\161\012\153\013\160\116\335\001\002\000\004\053" +
    "\313\001\002\000\004\060\312\001\002\000\004\060\311" +
    "\001\002\000\004\060\310\001\002\000\062\005\uff8f\022" +
    "\uff8f\023\uff8f\026\uff8f\027\uff8f\036\uff8f\037\uff8f\041\uff8f" +
    "\042\uff8f\043\uff8f\044\uff8f\045\uff8f\046\uff8f\047\uff8f\050" +
    "\uff8f\053\uff8f\056\uff8f\070\uff8f\111\uff8f\112\uff8f\113\uff8f" +
    "\114\uff8f\115\uff8f\116\uff8f\001\002\000\004\055\301\001" +
    "\002\000\004\053\276\001\002\000\004\060\275\001\002" +
    "\000\004\060\uff66\001\002\000\032\023\011\026\020\053" +
    "\012\060\uff69\070\016\110\010\111\007\112\025\113\004" +
    "\114\017\115\014\116\032\001\002\000\062\005\uff8e\022" +
    "\uff8e\023\uff8e\026\uff8e\027\uff8e\036\uff8e\037\uff8e\041\uff8e" +
    "\042\uff8e\043\uff8e\044\uff8e\045\uff8e\046\uff8e\047\uff8e\050" +
    "\uff8e\053\uff8e\056\uff8e\070\uff8e\111\uff8e\112\uff8e\113\uff8e" +
    "\114\uff8e\115\uff8e\116\uff8e\001\002\000\024\060\273\067" +
    "\uffc0\070\uffc0\071\uffc0\072\uffc0\073\uffc0\074\uffc0\075\uffc0" +
    "\076\uffc0\001\002\000\062\005\uff94\022\uff94\023\uff94\026" +
    "\uff94\027\uff94\036\uff94\037\uff94\041\uff94\042\uff94\043\uff94" +
    "\044\uff94\045\uff94\046\uff94\047\uff94\050\uff94\053\uff94\056" +
    "\uff94\070\uff94\111\uff94\112\uff94\113\uff94\114\uff94\115\uff94" +
    "\116\uff94\001\002\000\012\060\uff68\105\042\106\037\107" +
    "\041\001\002\000\062\005\uff8a\022\uff8a\023\uff8a\026\uff8a" +
    "\027\uff8a\036\uff8a\037\uff8a\041\uff8a\042\uff8a\043\uff8a\044" +
    "\uff8a\045\uff8a\046\uff8a\047\uff8a\050\uff8a\053\uff8a\056\uff8a" +
    "\070\uff8a\111\uff8a\112\uff8a\113\uff8a\114\uff8a\115\uff8a\116" +
    "\uff8a\001\002\000\004\116\277\001\002\000\004\054\300" +
    "\001\002\000\004\060\uff65\001\002\000\056\005\256\022" +
    "\270\023\011\026\020\027\265\036\237\037\247\041\244" +
    "\044\257\045\251\046\264\047\235\050\267\053\012\056" +
    "\uff95\070\016\111\007\112\025\113\004\114\017\115\014" +
    "\116\253\001\002\000\004\056\303\001\002\000\004\045" +
    "\304\001\002\000\004\053\305\001\002\000\030\023\011" +
    "\026\020\053\012\070\016\110\010\111\007\112\025\113" +
    "\004\114\017\115\014\116\032\001\002\000\012\054\307" +
    "\105\042\106\037\107\041\001\002\000\004\060\uff6a\001" +
    "\002\000\062\005\uff93\022\uff93\023\uff93\026\uff93\027\uff93" +
    "\036\uff93\037\uff93\041\uff93\042\uff93\043\uff93\044\uff93\045" +
    "\uff93\046\uff93\047\uff93\050\uff93\053\uff93\056\uff93\070\uff93" +
    "\111\uff93\112\uff93\113\uff93\114\uff93\115\uff93\116\uff93\001" +
    "\002\000\062\005\uff92\022\uff92\023\uff92\026\uff92\027\uff92" +
    "\036\uff92\037\uff92\041\uff92\042\uff92\043\uff92\044\uff92\045" +
    "\uff92\046\uff92\047\uff92\050\uff92\053\uff92\056\uff92\070\uff92" +
    "\111\uff92\112\uff92\113\uff92\114\uff92\115\uff92\116\uff92\001" +
    "\002\000\062\005\uff88\022\uff88\023\uff88\026\uff88\027\uff88" +
    "\036\uff88\037\uff88\041\uff88\042\uff88\043\uff88\044\uff88\045" +
    "\uff88\046\uff88\047\uff88\050\uff88\053\uff88\056\uff88\070\uff88" +
    "\111\uff88\112\uff88\113\uff88\114\uff88\115\uff88\116\uff88\001" +
    "\002\000\006\005\315\116\314\001\002\000\004\062\333" +
    "\001\002\000\004\007\327\001\002\000\004\052\317\001" +
    "\002\000\030\023\011\026\020\053\012\070\016\110\010" +
    "\111\007\112\025\113\004\114\017\115\014\116\032\001" +
    "\002\000\012\052\321\105\042\106\037\107\041\001\002" +
    "\000\026\023\011\026\020\053\012\070\016\111\007\112" +
    "\025\113\004\114\017\115\014\116\032\001\002\000\024" +
    "\054\323\067\uffbd\070\uffbd\071\uffbd\072\uffbd\073\uffbd\074" +
    "\uffbd\075\uffbd\076\uffbd\001\002\000\004\055\324\001\002" +
    "\000\056\005\256\022\270\023\011\026\020\027\265\036" +
    "\237\037\247\041\244\044\257\045\251\046\264\047\235" +
    "\050\267\053\012\056\uff95\070\016\111\007\112\025\113" +
    "\004\114\017\115\014\116\253\001\002\000\004\056\326" +
    "\001\002\000\062\005\uff6e\022\uff6e\023\uff6e\026\uff6e\027" +
    "\uff6e\036\uff6e\037\uff6e\041\uff6e\042\uff6e\043\uff6e\044\uff6e" +
    "\045\uff6e\046\uff6e\047\uff6e\050\uff6e\053\uff6e\056\uff6e\070" +
    "\uff6e\111\uff6e\112\uff6e\113\uff6e\114\uff6e\115\uff6e\116\uff6e" +
    "\001\002\000\004\116\330\001\002\000\004\062\331\001" +
    "\002\000\030\023\011\026\020\053\012\070\016\110\010" +
    "\111\007\112\025\113\004\114\017\115\014\116\032\001" +
    "\002\000\012\052\uff6d\105\042\106\037\107\041\001\002" +
    "\000\030\023\011\026\020\053\012\070\016\110\010\111" +
    "\007\112\025\113\004\114\017\115\014\116\032\001\002" +
    "\000\012\052\uff6c\105\042\106\037\107\041\001\002\000" +
    "\004\116\350\001\002\000\004\116\337\001\002\000\012" +
    "\060\uff85\061\uff85\062\343\065\033\001\002\000\006\060" +
    "\uff84\061\341\001\002\000\004\116\342\001\002\000\006" +
    "\060\uff86\061\uff86\001\002\000\030\023\011\026\020\053" +
    "\012\070\016\110\010\111\007\112\025\113\004\114\017" +
    "\115\014\116\032\001\002\000\010\060\uff80\062\345\065" +
    "\035\001\002\000\004\055\200\001\002\000\004\060\uff7f" +
    "\001\002\000\012\060\uff83\105\042\106\037\107\041\001" +
    "\002\000\010\060\uff85\061\uff85\062\352\001\002\000\006" +
    "\060\uff82\061\341\001\002\000\004\021\353\001\002\000" +
    "\004\116\354\001\002\000\004\053\355\001\002\000\004" +
    "\054\356\001\002\000\004\060\uff81\001\002\000\062\005" +
    "\uff8b\022\uff8b\023\uff8b\026\uff8b\027\uff8b\036\uff8b\037\uff8b" +
    "\041\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b\046\uff8b\047" +
    "\uff8b\050\uff8b\053\uff8b\056\uff8b\070\uff8b\111\uff8b\112\uff8b" +
    "\113\uff8b\114\uff8b\115\uff8b\116\uff8b\001\002\000\062\005" +
    "\uff89\022\uff89\023\uff89\026\uff89\027\uff89\036\uff89\037\uff89" +
    "\041\uff89\042\uff89\043\uff89\044\uff89\045\uff89\046\uff89\047" +
    "\uff89\050\uff89\053\uff89\056\uff89\070\uff89\111\uff89\112\uff89" +
    "\113\uff89\114\uff89\115\uff89\116\uff89\001\002\000\034\021" +
    "\364\023\011\026\020\053\012\055\200\070\016\110\010" +
    "\111\007\112\025\113\004\114\017\115\014\116\032\001" +
    "\002\000\004\060\uff7d\001\002\000\012\060\uff7e\105\042" +
    "\106\037\107\041\001\002\000\004\116\365\001\002\000" +
    "\004\053\366\001\002\000\004\054\367\001\002\000\004" +
    "\060\uff7c\001\002\000\062\005\uff8c\022\uff8c\023\uff8c\026" +
    "\uff8c\027\uff8c\036\uff8c\037\uff8c\041\uff8c\042\uff8c\043\uff8c" +
    "\044\uff8c\045\uff8c\046\uff8c\047\uff8c\050\uff8c\053\uff8c\056" +
    "\uff8c\070\uff8c\111\uff8c\112\uff8c\113\uff8c\114\uff8c\115\uff8c" +
    "\116\uff8c\001\002\000\030\023\011\026\020\053\012\070" +
    "\016\110\010\111\007\112\025\113\004\114\017\115\014" +
    "\116\032\001\002\000\012\054\373\105\042\106\037\107" +
    "\041\001\002\000\004\055\374\001\002\000\056\005\256" +
    "\022\270\023\011\026\020\027\265\036\237\037\247\041" +
    "\244\044\257\045\251\046\264\047\235\050\267\053\012" +
    "\056\uff95\070\016\111\007\112\025\113\004\114\017\115" +
    "\014\116\253\001\002\000\004\056\376\001\002\000\062" +
    "\005\uff6b\022\uff6b\023\uff6b\026\uff6b\027\uff6b\036\uff6b\037" +
    "\uff6b\041\uff6b\042\uff6b\043\uff6b\044\uff6b\045\uff6b\046\uff6b" +
    "\047\uff6b\050\uff6b\053\uff6b\056\uff6b\070\uff6b\111\uff6b\112" +
    "\uff6b\113\uff6b\114\uff6b\115\uff6b\116\uff6b\001\002\000\030" +
    "\023\011\026\020\053\012\070\016\110\010\111\007\112" +
    "\025\113\004\114\017\115\014\116\032\001\002\000\012" +
    "\054\u0101\105\042\106\037\107\041\001\002\000\004\055" +
    "\u0102\001\002\000\056\005\256\022\270\023\011\026\020" +
    "\027\265\036\237\037\247\041\244\044\257\045\251\046" +
    "\264\047\235\050\267\053\012\056\uff95\070\016\111\007" +
    "\112\025\113\004\114\017\115\014\116\253\001\002\000" +
    "\004\056\u0104\001\002\000\064\005\uff78\022\uff78\023\uff78" +
    "\026\uff78\027\uff78\036\uff78\037\uff78\040\u0105\041\uff78\042" +
    "\uff78\043\uff78\044\uff78\045\uff78\046\uff78\047\uff78\050\uff78" +
    "\053\uff78\056\uff78\070\uff78\111\uff78\112\uff78\113\uff78\114" +
    "\uff78\115\uff78\116\uff78\001\002\000\004\055\u0106\001\002" +
    "\000\056\005\256\022\270\023\011\026\020\027\265\036" +
    "\237\037\247\041\244\044\257\045\251\046\264\047\235" +
    "\050\267\053\012\056\uff95\070\016\111\007\112\025\113" +
    "\004\114\017\115\014\116\253\001\002\000\004\056\u0108" +
    "\001\002\000\062\005\uff77\022\uff77\023\uff77\026\uff77\027" +
    "\uff77\036\uff77\037\uff77\041\uff77\042\uff77\043\uff77\044\uff77" +
    "\045\uff77\046\uff77\047\uff77\050\uff77\053\uff77\056\uff77\070" +
    "\uff77\111\uff77\112\uff77\113\uff77\114\uff77\115\uff77\116\uff77" +
    "\001\002\000\062\005\uff98\022\uff98\023\uff98\026\uff98\027" +
    "\uff98\036\uff98\037\uff98\041\uff98\042\uff98\043\uff98\044\uff98" +
    "\045\uff98\046\uff98\047\uff98\050\uff98\053\uff98\056\uff98\070" +
    "\uff98\111\uff98\112\uff98\113\uff98\114\uff98\115\uff98\116\uff98" +
    "\001\002\000\004\116\u010b\001\002\000\004\054\u010c\001" +
    "\002\000\004\055\u010d\001\002\000\004\042\u010f\001\002" +
    "\000\010\042\u010f\043\u0115\056\u0116\001\002\000\030\023" +
    "\011\026\020\053\012\070\016\110\010\111\007\112\025" +
    "\113\004\114\017\115\014\116\032\001\002\000\010\042" +
    "\uff73\043\uff73\056\uff73\001\002\000\012\064\u0112\105\042" +
    "\106\037\107\041\001\002\000\062\005\256\022\270\023" +
    "\011\026\020\027\265\036\237\037\247\041\244\042\uff95" +
    "\043\uff95\044\257\045\251\046\264\047\235\050\267\053" +
    "\012\056\uff95\070\016\111\007\112\025\113\004\114\017" +
    "\115\014\116\253\001\002\000\010\042\uff72\043\uff72\056" +
    "\uff72\001\002\000\004\056\u011a\001\002\000\004\064\u0118" +
    "\001\002\000\062\005\uff76\022\uff76\023\uff76\026\uff76\027" +
    "\uff76\036\uff76\037\uff76\041\uff76\042\uff76\043\uff76\044\uff76" +
    "\045\uff76\046\uff76\047\uff76\050\uff76\053\uff76\056\uff76\070" +
    "\uff76\111\uff76\112\uff76\113\uff76\114\uff76\115\uff76\116\uff76" +
    "\001\002\000\010\042\uff74\043\uff74\056\uff74\001\002\000" +
    "\056\005\256\022\270\023\011\026\020\027\265\036\237" +
    "\037\247\041\244\044\257\045\251\046\264\047\235\050" +
    "\267\053\012\056\uff95\070\016\111\007\112\025\113\004" +
    "\114\017\115\014\116\253\001\002\000\004\056\uff71\001" +
    "\002\000\062\005\uff75\022\uff75\023\uff75\026\uff75\027\uff75" +
    "\036\uff75\037\uff75\041\uff75\042\uff75\043\uff75\044\uff75\045" +
    "\uff75\046\uff75\047\uff75\050\uff75\053\uff75\056\uff75\070\uff75" +
    "\111\uff75\112\uff75\113\uff75\114\uff75\115\uff75\116\uff75\001" +
    "\002\000\024\005\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa" +
    "\013\uffaa\014\uffaa\056\uffaa\116\uffaa\001\002\000\062\005" +
    "\uff87\022\uff87\023\uff87\026\uff87\027\uff87\036\uff87\037\uff87" +
    "\041\uff87\042\uff87\043\uff87\044\uff87\045\uff87\046\uff87\047" +
    "\uff87\050\uff87\053\uff87\056\uff87\070\uff87\111\uff87\112\uff87" +
    "\113\uff87\114\uff87\115\uff87\116\uff87\001\002\000\030\023" +
    "\011\026\020\053\012\070\016\110\010\111\007\112\025" +
    "\113\004\114\017\115\014\116\032\001\002\000\012\054" +
    "\u011f\105\042\106\037\107\041\001\002\000\004\060\uff64" +
    "\001\002\000\062\005\uff91\022\uff91\023\uff91\026\uff91\027" +
    "\uff91\036\uff91\037\uff91\041\uff91\042\uff91\043\uff91\044\uff91" +
    "\045\uff91\046\uff91\047\uff91\050\uff91\053\uff91\056\uff91\070" +
    "\uff91\111\uff91\112\uff91\113\uff91\114\uff91\115\uff91\116\uff91" +
    "\001\002\000\004\054\u0122\001\002\000\004\055\u0123\001" +
    "\002\000\056\005\256\022\270\023\011\026\020\027\265" +
    "\036\237\037\247\041\244\044\257\045\251\046\264\047" +
    "\235\050\267\053\012\056\uff95\070\016\111\007\112\025" +
    "\113\004\114\017\115\014\116\253\001\002\000\004\056" +
    "\u0125\001\002\000\024\005\uffa9\007\uffa9\010\uffa9\011\uffa9" +
    "\012\uffa9\013\uffa9\014\uffa9\056\uffa9\116\uffa9\001\002\000" +
    "\004\053\u0127\001\002\000\006\005\u0128\054\uffa7\001\002" +
    "\000\016\007\154\010\155\011\161\012\153\013\160\116" +
    "\u0134\001\002\000\006\054\uffa5\061\uffa5\001\002\000\006" +
    "\054\uffa8\061\u0131\001\002\000\004\054\u012c\001\002\000" +
    "\006\055\uffee\064\123\001\002\000\004\055\u012e\001\002" +
    "\000\056\005\256\022\270\023\011\026\020\027\265\036" +
    "\237\037\247\041\244\044\257\045\251\046\264\047\235" +
    "\050\267\053\012\056\uff95\070\016\111\007\112\025\113" +
    "\004\114\017\115\014\116\253\001\002\000\004\056\u0130" +
    "\001\002\000\024\005\uffab\007\uffab\010\uffab\011\uffab\012" +
    "\uffab\013\uffab\014\uffab\056\uffab\116\uffab\001\002\000\004" +
    "\005\u0128\001\002\000\006\054\uffa6\061\uffa6\001\002\000" +
    "\004\116\u0136\001\002\000\004\116\uffa3\001\002\000\004" +
    "\116\uffa4\001\002\000\010\054\uffa2\061\uffa2\065\u0137\001" +
    "\002\000\004\066\u013b\001\002\000\010\054\uffa1\061\uffa1" +
    "\065\u0139\001\002\000\004\066\u013a\001\002\000\010\054" +
    "\uffa0\061\uffa0\065\uffa0\001\002\000\010\054\uff9f\061\uff9f" +
    "\065\uff9f\001\002\000\024\005\uffd1\007\uffd1\010\uffd1\011" +
    "\uffd1\012\uffd1\013\uffd1\014\uffd1\056\uffd1\116\uffd1\001\002" +
    "\000\004\056\u013e\001\002\000\006\002\ufff3\004\ufff3\001" +
    "\002\000\006\002\ufff5\004\ufff5\001\002\000\004\053\u0141" +
    "\001\002\000\032\023\011\026\020\053\012\054\u0144\070" +
    "\016\110\010\111\007\112\025\113\004\114\017\115\014" +
    "\116\032\001\002\000\006\054\u0145\061\u0146\001\002\000" +
    "\014\054\uff99\061\uff99\105\042\106\037\107\041\001\002" +
    "\000\064\002\uff9b\052\uff9b\054\uff9b\056\uff9b\060\uff9b\061" +
    "\uff9b\064\uff9b\066\uff9b\067\uff9b\070\uff9b\071\uff9b\072\uff9b" +
    "\073\uff9b\074\uff9b\075\uff9b\076\uff9b\077\uff9b\100\uff9b\101" +
    "\uff9b\102\uff9b\103\uff9b\104\uff9b\105\uff9b\106\uff9b\107\uff9b" +
    "\001\002\000\064\002\uff9c\052\uff9c\054\uff9c\056\uff9c\060" +
    "\uff9c\061\uff9c\064\uff9c\066\uff9c\067\uff9c\070\uff9c\071\uff9c" +
    "\072\uff9c\073\uff9c\074\uff9c\075\uff9c\076\uff9c\077\uff9c\100" +
    "\uff9c\101\uff9c\102\uff9c\103\uff9c\104\uff9c\105\uff9c\106\uff9c" +
    "\107\uff9c\001\002\000\030\023\011\026\020\053\012\070" +
    "\016\110\010\111\007\112\025\113\004\114\017\115\014" +
    "\116\032\001\002\000\014\054\uff9a\061\uff9a\105\042\106" +
    "\037\107\041\001\002\000\064\002\uffc2\052\uffc2\054\uffc2" +
    "\056\uffc2\060\uffc2\061\uffc2\064\uffc2\066\uffc2\067\uffc2\070" +
    "\uffc2\071\056\072\053\073\066\074\065\075\uffc2\076\uffc2" +
    "\077\uffc2\100\uffc2\101\uffc2\102\uffc2\103\uffc2\104\uffc2\105" +
    "\uffc2\106\uffc2\107\uffc2\001\002\000\004\051\u014a\001\002" +
    "\000\004\060\u014b\001\002\000\012\003\ufffc\004\ufffc\006" +
    "\ufffc\025\ufffc\001\002\000\012\054\u014d\105\042\106\037" +
    "\107\041\001\002\000\064\002\uffc3\052\uffc3\054\uffc3\056" +
    "\uffc3\060\uffc3\061\uffc3\064\uffc3\066\uffc3\067\uffc3\070\uffc3" +
    "\071\uffc3\072\uffc3\073\uffc3\074\uffc3\075\uffc3\076\uffc3\077" +
    "\uffc3\100\uffc3\101\uffc3\102\uffc3\103\uffc3\104\uffc3\105\uffc3" +
    "\106\uffc3\107\uffc3\001\002\000\006\053\uff7a\063\uff7a\001" +
    "\002\000\006\053\u0151\063\u0150\001\002\000\004\116\u0155" +
    "\001\002\000\032\023\011\026\020\053\012\054\u0153\070" +
    "\016\110\010\111\007\112\025\113\004\114\017\115\014" +
    "\116\032\001\002\000\006\054\u0154\061\u0146\001\002\000" +
    "\064\002\uff9d\052\uff9d\054\uff9d\056\uff9d\060\uff9d\061\uff9d" +
    "\064\uff9d\066\uff9d\067\uff9d\070\uff9d\071\uff9d\072\uff9d\073" +
    "\uff9d\074\uff9d\075\uff9d\076\uff9d\077\uff9d\100\uff9d\101\uff9d" +
    "\102\uff9d\103\uff9d\104\uff9d\105\uff9d\106\uff9d\107\uff9d\001" +
    "\002\000\064\002\uff9e\052\uff9e\054\uff9e\056\uff9e\060\uff9e" +
    "\061\uff9e\064\uff9e\066\uff9e\067\uff9e\070\uff9e\071\uff9e\072" +
    "\uff9e\073\uff9e\074\uff9e\075\uff9e\076\uff9e\077\uff9e\100\uff9e" +
    "\101\uff9e\102\uff9e\103\uff9e\104\uff9e\105\uff9e\106\uff9e\107" +
    "\uff9e\001\002\000\070\002\uff7b\052\uff7b\053\uff7b\054\uff7b" +
    "\056\uff7b\060\uff7b\061\uff7b\063\uff7b\064\uff7b\066\uff7b\067" +
    "\uff7b\070\uff7b\071\uff7b\072\uff7b\073\uff7b\074\uff7b\075\uff7b" +
    "\076\uff7b\077\uff7b\100\uff7b\101\uff7b\102\uff7b\103\uff7b\104" +
    "\uff7b\105\uff7b\106\uff7b\107\uff7b\001\002\000\030\002\uffb2" +
    "\052\uffb2\054\uffb2\056\uffb2\060\uffb2\061\uffb2\064\uffb2\066" +
    "\uffb2\105\uffb2\106\uffb2\107\uffb2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0154\000\030\002\027\004\012\005\022\021\025\022" +
    "\020\023\014\030\030\031\005\051\004\052\023\067\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\021\025\022\u0155\023\014" +
    "\030\030\031\005\051\004\052\023\067\021\001\001\000" +
    "\004\051\u014e\001\001\000\022\021\025\022\u014b\023\014" +
    "\030\030\031\005\051\004\052\023\067\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\021\u0147\030\030\031\005\051\004\052\023\067\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\104\007\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\033\001\001\000\022\021\025\022\045\023\014\030\030" +
    "\031\005\051\004\052\023\067\021\001\001\000\002\001" +
    "\001\000\022\021\025\022\035\023\014\030\030\031\005" +
    "\051\004\052\023\067\021\001\001\000\002\001\001\000" +
    "\022\021\025\022\044\023\014\030\030\031\005\051\004" +
    "\052\023\067\021\001\001\000\002\001\001\000\022\021" +
    "\025\022\043\023\014\030\030\031\005\051\004\052\023" +
    "\067\021\001\001\000\022\021\025\022\042\023\014\030" +
    "\030\031\005\051\004\052\023\067\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\021\103\030\030\031\005\051" +
    "\004\052\023\067\021\001\001\000\016\021\102\030\030" +
    "\031\005\051\004\052\023\067\021\001\001\000\016\021" +
    "\101\030\030\031\005\051\004\052\023\067\021\001\001" +
    "\000\016\021\100\030\030\031\005\051\004\052\023\067" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\021\077\030\030\031\005\051\004\052\023\067\021\001" +
    "\001\000\016\021\076\030\030\031\005\051\004\052\023" +
    "\067\021\001\001\000\016\021\075\030\030\031\005\051" +
    "\004\052\023\067\021\001\001\000\016\021\074\030\030" +
    "\031\005\051\004\052\023\067\021\001\001\000\016\021" +
    "\073\030\030\031\005\051\004\052\023\067\021\001\001" +
    "\000\016\021\072\030\030\031\005\051\004\052\023\067" +
    "\021\001\001\000\016\021\071\030\030\031\005\051\004" +
    "\052\023\067\021\001\001\000\016\021\070\030\030\031" +
    "\005\051\004\052\023\067\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\115\010\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\u013e\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\121\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\011\136\012\150" +
    "\015\143\016\135\017\147\020\u013c\027\137\047\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\011\136" +
    "\012\150\015\143\016\135\017\147\020\146\027\137\047" +
    "\133\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\011\136\012\150\015\u013b\017\147\027" +
    "\137\047\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\156\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\215\001\001\000\004\013\162\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\024\170" +
    "\043\167\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\166\001\001\000\002\001\001" +
    "\000\004\024\174\001\001\000\002\001\001\000\022\021" +
    "\025\022\172\023\014\030\030\031\005\051\004\052\023" +
    "\067\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\044\200\001\001" +
    "\000\030\021\025\022\203\023\014\030\030\031\005\044" +
    "\202\045\205\046\204\051\004\052\023\067\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\210\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\021\025\022\213\023\014\030\030\031\005\051\004" +
    "\052\023\067\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\217\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\054" +
    "\021\245\030\030\031\271\033\241\034\244\035\242\036" +
    "\261\037\260\051\004\052\023\053\237\054\240\055\262" +
    "\056\270\057\247\060\251\061\253\062\254\063\265\067" +
    "\235\071\257\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\021\245\030\030\031\271\035\u0108\036\261\037\260\051" +
    "\004\052\023\053\237\054\240\055\262\056\270\057\247" +
    "\060\251\061\253\062\254\063\265\067\235\071\257\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\335" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\021\025\022\273\023\014\030\030\031\005\051\004" +
    "\052\023\067\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\021\245\030\030\031\271\033\301\034\244\035\242" +
    "\036\261\037\260\051\004\052\023\053\237\054\240\055" +
    "\262\056\270\057\247\060\251\061\253\062\254\063\265" +
    "\067\235\071\257\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\021\025\022\305\023\014" +
    "\030\030\031\005\051\004\052\023\067\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\070\315\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\021\025\022\317\023\014\030\030\031\005\051\004\052" +
    "\023\067\021\001\001\000\002\001\001\000\016\021\245" +
    "\030\030\031\005\051\004\052\023\067\321\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\021\245\030\030" +
    "\031\271\033\324\034\244\035\242\036\261\037\260\051" +
    "\004\052\023\053\237\054\240\055\262\056\270\057\247" +
    "\060\251\061\253\062\254\063\265\067\235\071\257\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\021\025\022\331\023\014\030" +
    "\030\031\005\051\004\052\023\067\021\001\001\000\002" +
    "\001\001\000\022\021\025\022\333\023\014\030\030\031" +
    "\005\051\004\052\023\067\021\001\001\000\002\001\001" +
    "\000\004\014\350\001\001\000\004\014\337\001\001\000" +
    "\004\043\343\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\021\025\022\346\023\014\030" +
    "\030\031\005\051\004\052\023\067\021\001\001\000\002" +
    "\001\001\000\004\044\345\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\021\025\022\362\023\014\030\030\031\005\044" +
    "\361\051\004\052\023\067\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\021\025\022\371\023\014\030\030\031\005\051\004\052" +
    "\023\067\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\021\245\030\030\031\271\033\374\034\244\035" +
    "\242\036\261\037\260\051\004\052\023\053\237\054\240" +
    "\055\262\056\270\057\247\060\251\061\253\062\254\063" +
    "\265\067\235\071\257\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\021\025\022\377\023\014\030\030\031" +
    "\005\051\004\052\023\067\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\054\021\245\030\030\031\271\033" +
    "\u0102\034\244\035\242\036\261\037\260\051\004\052\023" +
    "\053\237\054\240\055\262\056\270\057\247\060\251\061" +
    "\253\062\254\063\265\067\235\071\257\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\021" +
    "\245\030\030\031\271\033\u0106\034\244\035\242\036\261" +
    "\037\260\051\004\052\023\053\237\054\240\055\262\056" +
    "\270\057\247\060\251\061\253\062\254\063\265\067\235" +
    "\071\257\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\064\u010f\065\u010d\001\001\000\006\064" +
    "\u0116\066\u0113\001\001\000\022\021\025\022\u0110\023\014" +
    "\030\030\031\005\051\004\052\023\067\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\021\245\030\030" +
    "\031\271\033\u0112\034\244\035\242\036\261\037\260\051" +
    "\004\052\023\053\237\054\240\055\262\056\270\057\247" +
    "\060\251\061\253\062\254\063\265\067\235\071\257\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\021\245\030" +
    "\030\031\271\033\u0118\034\244\035\242\036\261\037\260" +
    "\051\004\052\023\053\237\054\240\055\262\056\270\057" +
    "\247\060\251\061\253\062\254\063\265\067\235\071\257" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\021\025\022\u011d\023\014" +
    "\030\030\031\005\051\004\052\023\067\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\021\245\030\030\031" +
    "\271\033\u0123\034\244\035\242\036\261\037\260\051\004" +
    "\052\023\053\237\054\240\055\262\056\270\057\247\060" +
    "\251\061\253\062\254\063\265\067\235\071\257\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\040\u0128\041\u0129\042\u012a\001\001\000\006\025\u0134" +
    "\026\u0132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\u012c\001\001\000\002\001\001" +
    "\000\054\021\245\030\030\031\271\033\u012e\034\244\035" +
    "\242\036\261\037\260\051\004\052\023\053\237\054\240" +
    "\055\262\056\270\057\247\060\251\061\253\062\254\063" +
    "\265\067\235\071\257\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\u0131\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\050\u0137\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\021\025\022\u0142\023\014" +
    "\030\030\031\005\032\u0141\051\004\052\023\067\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\021\025\022\u0146\023\014\030" +
    "\030\031\005\051\004\052\023\067\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\021\025\022\u0142\023\014\030\030\031\005\032\u0151" +
    "\051\004\052\023\067\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        System.out.println("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "
        +s.value + " no reconocido." );
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error en la Línea " + (s.right+1)+ "Columna "+(s.left+1)+". Identificador " +
        s.value + " no reconocido.");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // IMPRIMIR ::= imprimir parenInicio EXPL parenFin 
            {
              Nodo RESULT =null;
		int impleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int impright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String imp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
    RESULT=new Nodo("imprimir",impright,impleft);
    RESULT.add(exp);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // GRAFICARFUNCION ::= graphikar_funcion parenInicio iden parenFin 
            {
              Nodo RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
    RESULT=new Nodo("graficarFuncion",id,gright,gleft);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GRAFICARFUNCION",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // TERMINAR ::= terminar 
            {
              Nodo RESULT =null;
		int terleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int terright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ter = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo("terminar",terright,terleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TERMINAR",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // CONTINUAR ::= continuar 
            {
              Nodo RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String con = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo("continuar",conright,conleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTINUAR",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // RETORNO ::= retornar EXPL 
            {
              Nodo RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String ret = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT=new Nodo("retorno",retright,retleft);
        RESULT.add(exp);    
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // RETORNO ::= retornar 
            {
              Nodo RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int retright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ret = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT=new Nodo("retorno",retright,retleft);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // HACERMIENTRAS ::= hacer llaveInicio SENTENCIAS llaveFin mientras parenInicio EXPL parenFin 
            {
              Nodo RESULT =null;
		int hacerleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int hacerright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String hacer = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
    RESULT=new Nodo("hacerMientras",hacerright,hacerleft);
    RESULT.add(sent);
    RESULT.add(exp);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("HACERMIENTRAS",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // MIENTRAS ::= mientras parenInicio EXPL parenFin llaveInicio SENTENCIAS llaveFin 
            {
              Nodo RESULT =null;
		int mileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int miright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String mi = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
    RESULT=new Nodo("mientras",miright,mileft);
    RESULT.add(exp);
    RESULT.add(sent);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("MIENTRAS",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // VARIABLEPARA ::= iden igual EXPL 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=new Nodo("asignacion",id,idright,idleft);
            RESULT.add(exp);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLEPARA",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // VARIABLEPARA ::= var resEntero iden igual EXPL 
            {
              Nodo RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=new Nodo("varLocalDA",varright,varleft);
            Nodo id1=new Nodo("id",id,idright,idleft);
            Nodo t=new Nodo("tipo",tipo,tiporight,tipoleft);
            RESULT.add(t);
            RESULT.add(id1);
            RESULT.add(exp);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLEPARA",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // PARA ::= para parenInicio VARIABLEPARA puntoComa EXPL puntoComa SIMPLIFICADA parenFin llaveInicio SENTENCIAS llaveFin 
            {
              Nodo RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).right;
		String para = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Nodo var = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo op = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
    RESULT=new Nodo("para",pararight,paraleft);
    RESULT.add(var);
    RESULT.add(exp);
    RESULT.add(op);
    RESULT.add(sent);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARA",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // SIMPLIFICADA ::= EXPA disminucion 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Nodo("--",exp.linea-1,exp.columna-1);
            RESULT.add(exp);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIMPLIFICADA",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // SIMPLIFICADA ::= EXPA aumento 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Nodo("++",exp.linea-1,exp.columna-1);
            RESULT.add(exp);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIMPLIFICADA",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // DEFECTO ::= defecto dosPuntos SENTENCIAS 
            {
              Nodo RESULT =null;
		int defleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String def = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT=new Nodo("defecto",defright,defleft);
    RESULT.add(sent);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFECTO",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // CASO ::= caso EXPL dosPuntos SENTENCIAS 
            {
              Nodo RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT=new Nodo("caso",caright,caleft);
    RESULT.add(exp);
    RESULT.add(sent);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASO",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // CASOS ::= CASO 
            {
              Nodo RESULT =null;
		int casoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo caso = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT=new Nodo("casos",caso.linea-1,caso.columna-1);
    RESULT.add(caso);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASOS",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // CASOS ::= CASOS CASO 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int casoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo caso = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=lista;
    RESULT.add(caso);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASOS",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // SELECCION ::= seleccion parenInicio iden parenFin llaveInicio CASOS DEFECTO llaveFin 
            {
              Nodo RESULT =null;
		int selleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int selright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String sel = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo def = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
    RESULT=new Nodo("seleccion",selright,selleft);
    Nodo variable=new Nodo("id",id,idright,idleft);
    RESULT.add(variable);
    lista.add(def);
    RESULT.add(lista);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SELECCION",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // SELECCION ::= seleccion parenInicio iden parenFin llaveInicio CASOS llaveFin 
            {
              Nodo RESULT =null;
		int selleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int selright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String sel = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
    RESULT=new Nodo("seleccion",selright,selleft);
    Nodo variable=new Nodo("id",id,idright,idleft);
    RESULT.add(variable);
    Nodo defecto=new Nodo("defecto",0,0);
    lista.add(defecto);
    RESULT.add(lista);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SELECCION",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // SI ::= si parenInicio EXPL parenFin llaveInicio SENTENCIAS llaveFin sino llaveInicio SENTENCIAS llaveFin 
            {
              Nodo RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int sent1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int sent1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Nodo sent1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int sent2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sent2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sent2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
    RESULT=new Nodo("si",siright,sileft);
    RESULT.add(exp);
    RESULT.add(sent1);
    RESULT.add(sent2);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SI",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // SI ::= si parenInicio EXPL parenFin llaveInicio SENTENCIAS llaveFin 
            {
              Nodo RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String si = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int sent1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sent1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sent1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
    RESULT=new Nodo("si",siright,sileft);
    RESULT.add(exp);
    RESULT.add(sent1);
    Nodo sent2=new Nodo("sentencias",0,0);
    RESULT.add(sent2);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SI",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ACCESOAR ::= iden INDICES 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT=new Nodo("accesoAr",id,idright,idleft);
    RESULT.add(lista);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOAR",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ACCESOVAR ::= iden 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=new Nodo("accesoVar",idright,idleft);
            Nodo id1=new Nodo("id",id,idright,idleft);
            RESULT.add(id1);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVAR",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ACCESOVAR ::= ACCESOVAR punto iden 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=lista;
            Nodo id1=new Nodo("id",id,idright,idleft);
            RESULT.add(id1);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESOVAR",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ASIGNACION ::= iden igual nuevo iden parenInicio parenFin 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int tipo2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tipo2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String tipo2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
    RESULT=new Nodo("asignacionAlsI",id,idright,idleft);
    Nodo tipoVar=new Nodo("tipo",tipo2,tipo2right,tipo2left);
    RESULT.add(tipoVar);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ASIGNACION ::= iden igual ARREGLO 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo ar = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT=new Nodo("asignacionAr",id,idright,idleft);
    RESULT.add(ar);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ASIGNACION ::= iden igual EXPL 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT=new Nodo("asignacion",id,idright,idleft);
    RESULT.add(exp);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // DECLARACION ::= var TIPODATO iden INDICES igual ARREGLO 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int indicesleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int indicesright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo indices = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo arreglo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=new Nodo("varLocalArDA",id,idright,idleft);
            RESULT.add(tipo);
            RESULT.add(indices);
            RESULT.add(arreglo);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // DECLARACION ::= var TIPODATO iden INDICES 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int indicesleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int indicesright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo indices = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=new Nodo("varLocalArD",id,idright,idleft);
            RESULT.add(tipo);
            RESULT.add(indices);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // DECLARACION ::= var iden iden igual nuevo iden parenInicio parenFin 
            {
              Nodo RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int tipo1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int tipo1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String tipo1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int tipo2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tipo2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String tipo2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
            RESULT=new Nodo("varLocalAlsDI",varright,varleft);
            Nodo n1=new Nodo("id",id,idright,idleft);
            Nodo tipoVar=new Nodo("tipo",tipo1,tipo1right,tipo1left);
            RESULT.add(tipoVar);
            RESULT.add(n1);
            tipoVar=new Nodo("tipo",tipo2,tipo2right,tipo2left);
            RESULT.add(tipoVar);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // DECLARACION ::= var iden LISTAID2 
            {
              Nodo RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=new Nodo("varLocalAlsD",varright,varleft);
            Nodo tipoVar=new Nodo("tipo",tipo,tiporight,tipoleft);
            RESULT.add(tipoVar);
            RESULT.add(lista);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // DECLARACION ::= var TIPODATO iden igual EXPL 
            {
              Nodo RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=new Nodo("varLocalDA",varright,varleft);
            Nodo id1=new Nodo("id",id,idright,idleft);
            RESULT.add(tipo);
            RESULT.add(id1);
            RESULT.add(exp);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // DECLARACION ::= var TIPODATO LISTAID2 
            {
              Nodo RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=new Nodo("varLocalD",varright,varleft);
            RESULT.add(tipo);
            RESULT.add(lista);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // LISTAID2 ::= iden 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=new Nodo("listaIds",idright,idleft);
            Nodo id1=new Nodo("id",id,idright,idleft);
            RESULT.add(id1);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAID2",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // LISTAID2 ::= LISTAID2 coma iden 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=lista;
            Nodo id1=new Nodo("id",id,idright,idleft);
            RESULT.add(id1);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAID2",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SENTENCIA ::= IMPRIMIR inteFin 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=sent;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SENTENCIA ::= GRAFICARFUNCION inteFin 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=sent;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SENTENCIA ::= CONTINUAR inteFin 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=sent;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // SENTENCIA ::= TERMINAR inteFin 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=sent;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SENTENCIA ::= RETORNO inteFin 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=sent;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SENTENCIA ::= HACERMIENTRAS inteFin 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=sent;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SENTENCIA ::= MIENTRAS 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=sent;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SENTENCIA ::= PARA 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=sent;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SENTENCIA ::= SELECCION 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=sent;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SENTENCIA ::= SI 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=sent;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SENTENCIA ::= SIMPLIFICADA inteFin 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=sent;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // SENTENCIA ::= ASIGNACION inteFin 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=sent;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // SENTENCIA ::= DECLARACION inteFin 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=sent;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // SENTENCIA ::= LLAMADAMETODO inteFin 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=sent;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // SENTENCIAS ::= 
            {
              Nodo RESULT =null;
		RESULT=new Nodo("sentencias",0,0);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SENTENCIAS ::= SENTENCIAS1 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=sent;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SENTENCIAS1 ::= SENTENCIA 
            {
              Nodo RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=new Nodo("sentencias",sent.linea-1,sent.columna-1);
            RESULT.add(sent);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SENTENCIAS1 ::= SENTENCIAS1 SENTENCIA 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=lista;
            RESULT.add(sent);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // VALORPARAMETROS ::= EXPL 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT=new Nodo("valorParametros",expright,expleft);
                RESULT.add(exp);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALORPARAMETROS",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // VALORPARAMETROS ::= VALORPARAMETROS coma EXPL 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=lista;
                RESULT.add(exp);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALORPARAMETROS",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // LLAMADAMETODO ::= llamarHK iden parenInicio parenFin 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
            RESULT=new Nodo("llamadaMetodoHK",id,idright,idleft);
            Nodo n1=new Nodo("valorParametros",0,0);
            RESULT.add(n1);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADAMETODO",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // LLAMADAMETODO ::= llamarHK iden parenInicio VALORPARAMETROS parenFin 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT=new Nodo("llamadaMetodoHK",id,idright,idleft);
            RESULT.add(lista);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADAMETODO",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // LLAMADAMETODO ::= llamar ACCESOVAR parenInicio parenFin 
            {
              Nodo RESULT =null;
		int llaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int llaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String lla = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int accleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int accright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo acc = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
            RESULT=new Nodo("llamadaMetodo",llaright,llaleft);
            Nodo n1=new Nodo("valorParametros",0,0);
            RESULT.add(acc);
            RESULT.add(n1);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADAMETODO",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // LLAMADAMETODO ::= llamar ACCESOVAR parenInicio VALORPARAMETROS parenFin 
            {
              Nodo RESULT =null;
		int llaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int llaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String lla = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int accleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int accright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo acc = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT=new Nodo("llamadaMetodo",llaright,llaleft);
            RESULT.add(acc);
            RESULT.add(lista);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADAMETODO",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // INDICES2 ::= corInicio corFin 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT=new Nodo("indices",expright,expleft);
        Nodo n=new Nodo("dimension",0,0);
        RESULT.add(n);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INDICES2",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // INDICES2 ::= INDICES2 corInicio corFin 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT=lista;
        Nodo n=new Nodo("dimension",0,0);
        RESULT.add(n);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INDICES2",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // PARAMETRO ::= var TIPODATO2 iden INDICES2 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo dim = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT=new Nodo("parametroAr",id,idright,idleft);
    RESULT.add(tipo);
    RESULT.add(dim);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // PARAMETRO ::= var TIPODATO2 iden 
            {
              Nodo RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT=new Nodo("parametro",id,idright,idleft);
    RESULT.add(tipo);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TIPODATO2 ::= iden 
            {
              Nodo RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo("tipo",dato,datoright,datoleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO2",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TIPODATO2 ::= TIPODATO 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=tipo;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO2",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PARAMETROS ::= PARAMETRO 
            {
              Nodo RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo par = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=new Nodo("parametros",par.linea-1,par.columna-1);
            RESULT.add(par);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PARAMETROS ::= PARAMETROS coma PARAMETRO 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo par = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=lista;
            RESULT.add(par);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // PARAMETROSSTAR ::= 
            {
              Nodo RESULT =null;
		RESULT=new Nodo("parametros",0,0);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSSTAR",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // PARAMETROSSTAR ::= PARAMETROS 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=lista;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROSSTAR",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // METODO ::= vacio datos parenInicio parenFin llaveInicio SENTENCIAS llaveFin 
            {
              Nodo RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT=new Nodo("datos","datos",varight,valeft);
        RESULT.add(sent);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // METODO ::= vacio inicio parenInicio parenFin llaveInicio SENTENCIAS llaveFin 
            {
              Nodo RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String va = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT=new Nodo("inicio","inicio",varight,valeft);
        RESULT.add(sent);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // METODO ::= TIPOMETODO iden parenInicio PARAMETROSSTAR parenFin VISIBILIDAD llaveInicio SENTENCIAS llaveFin 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int paraleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Nodo para = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int visileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int visiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo visi = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo sent = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT=new Nodo("metodo",id,idright,idleft);
        RESULT.add(tipo);
        RESULT.add(visi);
        RESULT.add(para);
        RESULT.add(sent);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("METODO",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DATO ::= bool 
            {
              Nodo RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo("bool",dato,datoright,datoleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DATO",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DATO ::= cadena 
            {
              Nodo RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		dato=dato.replace("\"","");RESULT=new Nodo("cadena",dato,datoright,datoleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DATO",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DATO ::= caracter 
            {
              Nodo RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		dato=dato.replace("'","");RESULT=new Nodo("caracter",dato,datoright,datoleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DATO",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DATO ::= decimal 
            {
              Nodo RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo("decimal",dato,datoright,datoleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DATO",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DATO ::= entero 
            {
              Nodo RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo("entero",dato,datoright,datoleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DATO",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPL ::= EXPR 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=d1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPL",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPL ::= not EXPL 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int d1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPL",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPL ::= EXPL xor EXPL 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPL",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPL ::= EXPL or EXPL 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPL",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPL ::= EXPL and EXPL 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPL",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPR ::= EXPA 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=d1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPR ::= EXPA noIgual EXPA 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPR ::= EXPA menorIgual EXPA 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPR ::= EXPA mayorIgual EXPA 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPR ::= EXPA menor EXPA 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPR ::= EXPA mayor EXPA 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPR ::= EXPA igualIgual EXPA 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPA ::= SIMPLIFICADA 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPA ::= ACCESOAR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPA ::= ACCESOVAR 
            {
              Nodo RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo val = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPA ::= LLAMADAMETODO 
            {
              Nodo RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo id1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=id1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPA ::= DATO 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=d1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPA ::= menos EXPA 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo("unitario",exp.linea-1,exp.columna-1);RESULT.add(exp);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPA ::= parenInicio EXPL parenFin 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=d1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPA ::= EXPA mod EXPA 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPA ::= EXPA pot EXPA 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPA ::= EXPA div EXPA 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPA ::= EXPA mul EXPA 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPA ::= EXPA menos EXPA 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPA ::= EXPA mas EXPA 
            {
              Nodo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo d1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo d2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo(op,opright,opleft);RESULT.add(d1);RESULT.add(d2);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CUERPOALS ::= 
            {
              Nodo RESULT =null;
		RESULT=new Nodo("cuerpo",0,0);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOALS",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CUERPOALS ::= CUERPOS 
            {
              Nodo RESULT =null;
		int cuerposleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cuerposright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo cuerpos = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=cuerpos;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOALS",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CUERPO ::= ATRIBUTOVARAR 
            {
              Nodo RESULT =null;
		int arregloVarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int arregloVarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo arregloVar = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=arregloVar;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CUERPO ::= ATRIBUTOALS 
            {
              Nodo RESULT =null;
		int atributoAlsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int atributoAlsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo atributoAls = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=atributoAls;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CUERPO ::= METODO 
            {
              Nodo RESULT =null;
		int metodoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int metodoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo metodo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=metodo;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CUERPO ::= ATRIBUTOVAR 
            {
              Nodo RESULT =null;
		int atributoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int atributoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo atributo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=atributo;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CUERPOS ::= CUERPO 
            {
              Nodo RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo cuerpo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=new Nodo("cuerpo",cuerpo.linea-1,cuerpo.columna-1);
            RESULT.add(cuerpo);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CUERPOS ::= CUERPOS CUERPO 
            {
              Nodo RESULT =null;
		int cuerposleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cuerposright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo cuerpos = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo cuerpo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=cuerpos;
            RESULT.add(cuerpo);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOS",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LISTAID ::= iden VISIBILIDAD 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int visileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int visiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo visi = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=new Nodo("listaIds",idright,idleft);
            Nodo id1=new Nodo("id",id,idright,idleft);
            id1.add(visi);
            RESULT.add(id1);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAID",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LISTAID ::= LISTAID coma iden VISIBILIDAD 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int visileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int visiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo visi = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=lista;
            Nodo id1=new Nodo("id",id,idright,idleft);
            id1.add(visi);
            RESULT.add(id1);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAID",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LISTAEXP ::= EXPL 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT=new Nodo("listaExp",exp.linea-1,exp.columna-1);
        RESULT.add(exp);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAEXP",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LISTAEXP ::= LISTAEXP coma EXPL 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=lista;
        RESULT.add(exp);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAEXP",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ARREGLOS ::= ARREGLO 
            {
              Nodo RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo ar = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT=ar;    
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ARREGLOS ::= ARREGLOS coma ARREGLO 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo ar = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=lista;
        for(Nodo e:ar.hijos){
            RESULT.add(e);
        }
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ARREGLO ::= llaveInicio ARREGLOS llaveFin 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=lista;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ARREGLO ::= llaveInicio LISTAEXP llaveFin 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=lista;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INDICES ::= corInicio EXPL corFin 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        RESULT=new Nodo("indices",exp.linea-1,exp.columna-1);
        RESULT.add(exp);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INDICES",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INDICES ::= INDICES corInicio EXPL corFin 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=lista;
        RESULT.add(exp);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INDICES",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ATRIBUTOVARAR ::= var TIPODATO iden INDICES VISIBILIDAD igual ARREGLO inteFin 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int indicesleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int indicesright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo indices = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int visileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int visiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo visi = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo arreglo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT=new Nodo("atributoVarArDA",id,idright,idleft);
            RESULT.add(tipo);
            RESULT.add(indices);
            RESULT.add(visi);
            RESULT.add(arreglo);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOVARAR",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ATRIBUTOVARAR ::= var TIPODATO iden INDICES VISIBILIDAD inteFin 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int indicesleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int indicesright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo indices = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int visileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int visiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo visi = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT=new Nodo("atributoVarArD",id,idright,idleft);
            RESULT.add(tipo);
            RESULT.add(indices);
            RESULT.add(visi);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOVARAR",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ATRIBUTOVAR ::= var TIPODATO iden VISIBILIDAD igual EXPL inteFin 
            {
              Nodo RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int visileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int visiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo visi = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT=new Nodo("atributoVarDA",varright,varleft);
            Nodo id1=new Nodo("id",id,idright,idleft);
            id1.add(visi);
            RESULT.add(tipo);
            RESULT.add(id1);
            RESULT.add(exp);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOVAR",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ATRIBUTOVAR ::= var TIPODATO LISTAID inteFin 
            {
              Nodo RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT=new Nodo("atributoVarD",varright,varleft);
            RESULT.add(tipo);
            RESULT.add(lista);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOVAR",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ATRIBUTOALS ::= var iden iden VISIBILIDAD igual nuevo iden parenInicio parenFin inteFin 
            {
              Nodo RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int visileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int visiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Nodo visi = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int tipo2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tipo2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String tipo2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
            RESULT=new Nodo("atributoAlsDI",varright,varleft);
            Nodo tipoVar=new Nodo("tipo",tipo,tiporight,tipoleft);
            Nodo tipoVar2=new Nodo("tipo",tipo2,tipo2right,tipo2left);
            Nodo objeto=new Nodo("id",id,idright,idleft);
            objeto.add(visi);
            RESULT.add(tipoVar);
            RESULT.add(objeto);
            RESULT.add(tipoVar2);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOALS",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ATRIBUTOALS ::= var iden LISTAID inteFin 
            {
              Nodo RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT=new Nodo("atributoAlsD",varright,varleft);
            Nodo tipoVar=new Nodo("tipo",tipo,tiporight,tipoleft);
            RESULT.add(tipoVar);
            RESULT.add(lista);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOALS",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TIPOMETODO ::= vacio 
            {
              Nodo RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo("tipo",dato,datoright,datoleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOMETODO",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TIPOMETODO ::= iden 
            {
              Nodo RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo("tipo",dato,datoright,datoleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOMETODO",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TIPOMETODO ::= resBool 
            {
              Nodo RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo("tipo",dato,datoright,datoleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOMETODO",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TIPOMETODO ::= resCadena 
            {
              Nodo RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo("tipo",dato,datoright,datoleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOMETODO",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TIPOMETODO ::= resCaracter 
            {
              Nodo RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo("tipo",dato,datoright,datoleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOMETODO",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TIPOMETODO ::= resDecimal 
            {
              Nodo RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo("tipo",dato,datoright,datoleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOMETODO",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPOMETODO ::= resEntero 
            {
              Nodo RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo("tipo",dato,datoright,datoleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOMETODO",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIPODATO ::= resBool 
            {
              Nodo RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo("tipo",dato,datoright,datoleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPODATO ::= resCadena 
            {
              Nodo RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo("tipo",dato,datoright,datoleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPODATO ::= resCaracter 
            {
              Nodo RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo("tipo",dato,datoright,datoleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPODATO ::= resDecimal 
            {
              Nodo RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo("tipo",dato,datoright,datoleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPODATO ::= resEntero 
            {
              Nodo RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String dato = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo("tipo",dato,datoright,datoleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VISIBILIDAD ::= 
            {
              Nodo RESULT =null;
		RESULT=new Nodo("visibilidad","publico");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VISIBILIDAD ::= dosPuntos privado 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo("visibilidad",cad,cadright,cadleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VISIBILIDAD ::= dosPuntos protegido 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo("visibilidad",cad,cadright,cadleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VISIBILIDAD ::= dosPuntos publico 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Nodo("visibilidad",cad,cadright,cadleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VISIBILIDAD",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ALS ::= als iden VISIBILIDAD hereda iden llaveInicio CUERPOALS llaveFin 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int visileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int visiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Nodo visi = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int idHeredaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idHeredaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String idHereda = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo cuerpo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT=new Nodo("als",id,idright,idleft);
            Nodo hereda=new Nodo("hereda",idHereda,idHeredaright,idHeredaleft);
            RESULT.add(hereda);
            RESULT.add(visi);
            RESULT.add(cuerpo);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ALS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ALS ::= als iden VISIBILIDAD llaveInicio CUERPOALS llaveFin 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int visileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int visiright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo visi = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo cuerpo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT=new Nodo("als",id,idright,idright);
            RESULT.add(visi);
            RESULT.add(cuerpo);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ALS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CLASESALS ::= ALS 
            {
              Nodo RESULT =null;
		int alsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int alsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo als = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT=new Nodo("clases",als.linea-1,als.columna-1);
        RESULT.add(als);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASESALS",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CLASESALS ::= CLASESALS ALS 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int alsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int alsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo als = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=lista;
        RESULT.add(als);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CLASESALS",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INCLUIRHASKEL ::= error 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCLUIRHASKEL",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INCLUIRHASKEL ::= incluir_HK iden inteFin 
            {
              Nodo RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String in = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                Nodo importar=new Nodo("incluir",id,idright,idleft);RESULT=new Nodo("incluidos",inright,inleft);
                RESULT.add(importar);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCLUIRHASKEL",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INCLUIRHASKEL ::= INCLUIRHASKEL incluir_HK iden inteFin 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=nodo;
                Nodo importar=new Nodo("incluir",id,idright,idleft);
                RESULT.add(importar);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCLUIRHASKEL",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INCLUIRHASKELS ::= 
            {
              Nodo RESULT =null;
		RESULT=new Nodo("incluidos",0,0);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCLUIRHASKELS",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INCLUIRHASKELS ::= INCLUIRHASKEL 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=nodo;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCLUIRHASKELS",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMPORTACION ::= importar idenImportar inteFin 
            {
              Nodo RESULT =null;
		int imleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int imright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String im = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                Nodo importar=new Nodo("importar",id,idright,idleft);RESULT=new Nodo("importaciones",imright,imleft);
                RESULT.add(importar);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IMPORTACION ::= IMPORTACION importar idenImportar inteFin 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=nodo;
                Nodo importar=new Nodo("importar",id,idright,idleft);
                RESULT.add(importar);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IMPORTACIONES ::= 
            {
              Nodo RESULT =null;
		RESULT=new Nodo("importaciones",0,0);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTACIONES",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IMPORTACIONES ::= IMPORTACION 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=nodo;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPORTACIONES",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= EXPL 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Inicio.raiz=exp;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= IMPORTACIONES INCLUIRHASKELS CLASESALS 
            {
              Nodo RESULT =null;
		int importarleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int importarright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo importar = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int incluirleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int incluirright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo incluir = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int clasesAlsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int clasesAlsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo clasesAls = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT=new Nodo("encabezado",importar.linea-1,importar.columna-1);
        RESULT.add(importar);
        RESULT.add(incluir);
        RESULT.add(clasesAls);
        Inicio.raiz=RESULT;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

